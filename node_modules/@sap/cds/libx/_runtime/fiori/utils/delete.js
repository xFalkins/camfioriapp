const cds = require('../../cds')
const { SELECT, DELETE } = cds.ql

const { isDraftRootEntity } = require('./csn')
const { getUpdateDraftAdminCQN, ensureDraftsSuffix, ensureNoDraftsSuffix } = require('./handler')
const { extractKeyConditions } = require('./where')
const { getTargetData } = require('../../common/utils/data')

const _getSelectCQN = (req, keys) => {
  return SELECT.from(ensureNoDraftsSuffix(req.target.name), [1]).where(keys.keyList)
}

const _getDraftSelectCQN = (req, keys) => {
  const draftEntityName = ensureDraftsSuffix(req.target.name)

  return SELECT.from(draftEntityName, ['DraftUUID'])
    .join('DRAFT.DraftAdministrativeData')
    .on('DraftAdministrativeData_DraftUUID =', { ref: ['DRAFT.DraftAdministrativeData', 'DraftUUID'] })
    .where(keys.keyList)
}

const _validate = (activeResult, draftResult, req, IsActiveEntity) => {
  if (
    (IsActiveEntity === true && activeResult.length === 0) ||
    (IsActiveEntity === false && draftResult.length === 0)
  ) {
    req.reject(404)
  }
}

const deleteDraft = async (req, definitions, includingActive = false) => {
  const dbtx = cds.tx(req)

  // REVISIT: how to handle delete of to 1 assoc
  const keys = extractKeyConditions(req.query.DELETE.from.ref[req.query.DELETE.from.ref.length - 1].where)
  const [activeResult, draftResult] = await Promise.all([
    dbtx.run(_getSelectCQN(req, keys)),
    dbtx.run(_getDraftSelectCQN(req, keys))
  ])

  _validate(activeResult, draftResult, req, keys.IsActiveEntity)

  const source = definitions[ensureNoDraftsSuffix(req.target.name)]
  const delCQNs = []

  if (includingActive) {
    delCQNs.push(DELETE.from(ensureNoDraftsSuffix(getTargetData(req.target, {}).target.name)).where(keys.keyList))
  }

  if (draftResult.length !== 0) {
    delCQNs.push(DELETE.from(ensureDraftsSuffix(source.name)).where(keys.keyList))

    const draftUUID = draftResult[0].DraftUUID
    if (isDraftRootEntity(definitions, ensureNoDraftsSuffix(req.target.name))) {
      delCQNs.push(DELETE.from('DRAFT.DraftAdministrativeData').where({ draftUUID }))
    } else {
      delCQNs.push(getUpdateDraftAdminCQN(req, draftUUID))
    }
  }

  req._oldData = keys.IsActiveEntity ? activeResult[0] : draftResult[0]

  return Promise.all(delCQNs.map(cqn => dbtx.run(cqn)))
}

module.exports = { deleteDraft }
