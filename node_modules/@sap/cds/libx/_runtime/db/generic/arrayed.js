// REVISIT: use templating mechanism (resp. results.metadata, once available) to make more efficient

const { getEntityFromCQN } = require('../../common/utils/entityFromCqn')

const _toArray = (result, elements) => {
  // REVISIT: This is a very expensive loop in loop...
  // and 100% overhead the results don't contain arrayed elements,
  // and 100% of all currently existing stakeholder projects don't.
  // but that's not that easy to fix -> see comment about results.metadata below
  for (const row of result) {
    for (const column in row) {
      if (elements[column] === undefined || row[column] === undefined) continue

      // .items marks arrayed element
      if (elements[column].items) {
        row[column] = JSON.parse(row[column])
      } else if (elements[column].is2many) {
        _toArray(row[column], elements[column]._target.elements)
      } else if (elements[column].is2one) {
        _toArray([row[column]], elements[column]._target.elements)
      } else if (elements[column].elements) {
        _toArray([row[column]], elements[column].elements)
      }
    }
  }
}

/**
 * Formats JSON Strings to arrayed data
 *
 * @param result - the result of the DB query
 * @param req - the context object
 * @returns {Promise}
 */
module.exports = function (result, req) {
  if (!this.model) return

  if (!Array.isArray(result)) result = [result]

  // REVISIT: We need results.metadata to make that more efficient
  // results.metadata ~= cds.infer(req.query).metadata
  // REVISIT: No entity for sets/unions outside of common draft scenarios
  const entity = getEntityFromCQN(req, this)
  if (!entity) return
  if (entity) _toArray(result, entity.elements)
}
