const cds = require('../cds')
const LOG = cds.log('remote')

// REVISIT: use cds.log's logger in cloud sdk

// disable sdk logger if not in debug mode
if (!LOG._debug) {
  const sdkUtils = require('@sap-cloud-sdk/util')
  sdkUtils.setGlobalLogLevel('error')
}

const { resolveView, getTransition } = require('../common/utils/resolveView')
const { getKind, run, getDestination, getAdditionalOptions, getReqOptions, postProcess } = require('./utils/client')
const { formatVal } = require('../odata/cqn2odata')

const _checkProduction = destination => {
  if (!destination && process.env.NODE_ENV === 'production') {
    throw new Error('In production mode it is required to set `options.destination`')
  }
}

const _setHeaders = (defaultHeaders, req) => {
  return Object.assign(
    defaultHeaders,
    Object.keys(req.headers).reduce((acc, cur) => {
      acc[cur.toLowerCase()] = req.headers[cur]
      return acc
    }, {})
  )
}
const _setCorrectValue = (el, data, params, kind) => {
  return typeof data[el] === 'object' && kind !== 'odata-v2'
    ? JSON.stringify(data[el])
    : formatVal(data[el], el, { elements: params }, kind)
}

// v4: builds url like /function(p1=@p1,p2=@p2,p3=@p3)?@p1=val&@p2={...}&@p3=[...]
// v2: builds url like /function?p1=val1&p2=val2 for functions and actions
const _buildPartialUrlFunctions = (url, data, params, kind = 'odata-v4') => {
  const funcParams = []
  const queryOptions = []
  for (const el in data) {
    if (kind === 'odata-v2') {
      funcParams.push(`${el}=${_setCorrectValue(el, data, params, kind)}`)
    } else {
      funcParams.push(`${el}=@${el}`)
      queryOptions.push(`@${el}=${_setCorrectValue(el, data, params, kind)}`)
    }
  }
  return kind === 'odata-v2'
    ? `${url}?${funcParams.join('&')}`
    : `${url}(${funcParams.join(',')})?${queryOptions.join('&')}`
}

const _extractParamsFromData = (data, params) => {
  return Object.keys(data).reduce((res, el) => {
    if (params[el]) Object.assign(res, { [el]: data[el] })
    return res
  }, {})
}

const _buildKeys = (req, kind) => {
  const keys = []
  for (const key in req.target.keys) {
    keys.push(`${key}=${formatVal(req.data[key], key, req.target, kind)}`)
  }
  return keys
}

const _handleBoundActionFunction = (srv, def, req, url) => {
  if (def.kind === 'action') {
    return srv.post(url, def.params ? _extractParamsFromData(req.data, def.params) : {})
  }

  if (def.params) {
    const data = _extractParamsFromData(req.data, def.params)
    url = _buildPartialUrlFunctions(url, data, def.params)
  } else url = `${url}()`

  return srv.get(url)
}

const _handleUnboundActionFunction = (srv, def, req, event) => {
  if (def.kind === 'action') {
    return srv.post(`/${event}`, req.data)
  }

  const url =
    Object.keys(req.data).length > 0 ? _buildPartialUrlFunctions(`/${event}`, req.data, def.params) : `/${event}()`
  return srv.get(url)
}

const _handleV2ActionFunction = (srv, def, req, event, kind) => {
  const url =
    Object.keys(req.data).length > 0 ? _buildPartialUrlFunctions(`/${event}`, req.data, def.params, kind) : `/${event}`
  return def.kind === 'function' ? srv.get(url) : srv.post(url, {})
}

const _addHandlerActionFunction = (srv, def, target) => {
  const event = def.name.match(/\w*$/)[0]
  if (target) {
    srv.on(event, target, async function (req) {
      const shortEntityName = req.target.name.replace(`${this.namespace}.`, '')
      const url = `/${shortEntityName}(${_buildKeys(req, this.kind).join(',')})/${this.namespace}.${event}`
      return _handleBoundActionFunction(srv, def, req, url)
    })
  } else {
    srv.on(event, async function (req) {
      if (this.kind === 'odata-v2') return _handleV2ActionFunction(srv, def, req, event, this.kind)
      return _handleUnboundActionFunction(srv, def, req, event)
    })
  }
}

class RemoteService extends cds.Service {
  init() {
    this.destination = this.options.credentials && this.options.credentials.destination
    this.requestTimeout = this.options.credentials && this.options.credentials.requestTimeout
    if (this.requestTimeout === null || this.requestTimeout === undefined) this.requestTimeout = 60000
    this.path = this.options.credentials && this.options.credentials.path
    this.datasource = this.options.datasource
    this.kind = getKind(this.options) // TODO: Simplify

    _checkProduction(this.destination)

    for (const each of this.entities) {
      for (const a in each.actions) {
        _addHandlerActionFunction(this, each.actions[a], each)
      }
    }

    for (const each of this.operations) {
      _addHandlerActionFunction(this, each)
    }

    this.on('*', async (req, next) => {
      let { query } = req
      if (!query && !(typeof req.path === 'string')) return next()
      if (typeof query === 'object' && this.model) query = resolveView(query, this.model, 'remote', true)
      const transitions =
        (typeof query === 'object' && (query.SELECT || query.INSERT || query.UPDATE || query.DELETE)._transitions) || []
      const resolvedTarget =
        (transitions.length && [transitions.length - 1].target) || getTransition(req.target, true).target
      if (!this.destination) this.destination = getDestination(this.model, this.datasource, this.options)
      const reqOptions = getReqOptions(req, query, this)
      reqOptions.headers = _setHeaders(reqOptions.headers, req)
      const additionalOptions = getAdditionalOptions(req, this.destination, this.kind, resolvedTarget)

      const result = await run(reqOptions, additionalOptions)
      return typeof query === 'object' ? postProcess(query, result) : result
    })
  }
}

module.exports = RemoteService
