const _formatRowContext = ({ tKey, keyNames, row }) => {
  const keyValuePairs = keyNames.map(key => key + '=' + row[key])
  return tKey + '(' + keyValuePairs.join(',') + ')'
}

const _processElement = args => {
  const { processFn, row, key, elements, picked = {}, complex = false, isRoot, pathOptions } = args
  const { segments: pathSegments } = pathOptions
  const element = elements[key]
  const { plain } = picked

  if (plain) {
    if (!complex && pathSegments) {
      pathSegments.push(key)
    }

    // skip processing if row is undefined, it is not mandatory, and null is allowed
    // where should this go? `if (row && (row[key] !== undefined || element._isMandatory || element.notNull))`
    processFn(row, key, element, plain, isRoot, pathSegments)
  }
}

const _processRow = ({ processFn, row, template, tKey, tValue, isRoot, pathOptions }) => {
  const { template: subTemplate, picked } = tValue
  const key = tKey.split(' ').pop()

  const args = {
    processFn,
    row,
    key,
    elements: template.target.elements,
    picked,
    complex: !!subTemplate,
    isRoot,
    pathOptions
  }

  _processElement(args)

  // process deep
  if (subTemplate) {
    let subRows = row && row[key]
    subRows = Array.isArray(subRows) ? subRows : [subRows]
    const complexArgs = {
      processFn,
      rows: subRows,
      template: subTemplate,
      tKey: key,
      pathOptions
    }

    _processComplex(complexArgs)
  }
}

const _processComplex = ({ processFn, rows, template, tKey, pathOptions }) => {
  if (rows.length === 0) return
  const { extraKeys, rowKeysGenerator, segments: pathSegments, includeKeyValues } = pathOptions
  let keyNames

  for (const row of rows) {
    if (row == null) continue

    let pathSegment
    let complexPathSegments

    if (includeKeyValues) {
      keyNames = keyNames || (template.target.keys && Object.keys(template.target.keys)) || []
      if (typeof rowKeysGenerator === 'function') rowKeysGenerator({ keyNames, row, template })
      const rowWithExtraKeys = { ...row, ...extraKeys }
      pathSegment = _formatRowContext({ tKey, keyNames, row: rowWithExtraKeys })
      complexPathSegments = [...pathSegments, pathSegment]
      pathOptions.segments = complexPathSegments
    } else {
      pathOptions.segments.push(tKey)
    }

    const args = {
      processFn,
      row,
      template,
      isRoot: false,
      pathOptions
    }

    templateProcessor(args)
  }
}

/**
 * @param {import("../../types/api").TemplateProcessor} args
 */
const templateProcessor = ({ processFn, row, template, isRoot = true, pathOptions = {} }) => {
  let { segments: pathSegments } = pathOptions
  pathSegments = pathSegments || []

  for (const [tKey, tValue] of template.elements) {
    if (pathSegments) {
      pathOptions.segments = [...pathSegments]
    }

    const args = {
      processFn,
      row,
      template,
      tKey,
      tValue,
      isRoot,
      pathOptions
    }

    _processRow(args)
  }
}

module.exports = templateProcessor
