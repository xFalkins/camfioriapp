const { foreignKeyPropagations } = require('./foreignKeyPropagations')

const getOnCondElements = (onCond, onCondElements = []) => {
  const andIndex = onCond.indexOf('and')
  const entityKey = onCond[2].ref && onCond[2].ref.join('.')
  const entityVal = onCond[2].val
  const targetKey = onCond[0].ref && onCond[0].ref.join('.')
  const targetVal = onCond[0].val
  onCondElements.push({ entityKey, targetKey, entityVal, targetVal })

  if (andIndex !== -1) {
    getOnCondElements(onCond.slice(andIndex + 1), onCondElements)
  }
  return onCondElements
}

const isSelfManaged = element => {
  if (element.on && element.on.length > 2) {
    return (
      (element.on[0].ref && element.on[0].ref[0]) === '$self' || (element.on[2].ref && element.on[2].ref[0] === '$self')
    )
  }
  return false
}

const _getBacklinkNameFromOnCond = element => {
  if (element.on && element.on.length === 3 && element.on[0].ref && element.on[2].ref) {
    if (element.on[0].ref[0] === '$self') {
      return element.on[2].ref[element.on[2].ref.length - 1]
    } else if (element.on[2].ref[0] === '$self') {
      return element.on[0].ref[element.on[0].ref.length - 1]
    }
  }
}

const isBacklink = (element, parent, checkContained) => {
  if (!element._isAssociationStrict) return false
  if (!parent || !(element.keys || element.on)) return false
  if (element.target !== parent.name) return false

  for (const parentElement of Object.values(parent.elements)) {
    if ((!checkContained || parentElement._isContained) && _getBacklinkNameFromOnCond(parentElement) === element.name) {
      return true
    }
  }

  return false
}
// REVISIT: replace getBacklinks where used with foreignKeyPropagation
const getBackLinks = element => {
  const res = foreignKeyPropagations(element)

  if (element.on) {
    return res.map(e => ({
      entityKey:
        e.prefix && !e.childFieldName.includes(e.prefix) ? e.prefix + '_' + e.childFieldName : e.childFieldName,
      entityVal: e.childFieldValue,
      targetKey:
        e.prefix && !e.parentFieldName.includes(e.prefix) ? e.prefix + '_' + e.parentFieldName : e.parentFieldName,
      targetVal: e.parentFieldValue
    }))
  }

  return res.map(e => ({
    entityKey:
      e.prefix && !e.parentFieldName.includes(e.prefix) ? e.prefix + '_' + e.parentFieldName : e.parentFieldName,
    targetKey: e.prefix && !e.childFieldName.includes(e.prefix) ? e.prefix + '_' + e.childFieldName : e.childFieldName
  }))
}

module.exports = {
  getBackLinks,
  isSelfManaged,
  getOnCondElements,
  isBacklink
}
