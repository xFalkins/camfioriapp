const { foreignKeyPropagations } = require('./foreignKeyPropagations')
const { _structPrefix } = require('./foreignKeyPropagations')

const _toRef = (alias, column) => {
  if (Array.isArray(column)) column = column.join('_')
  return { ref: alias ? [alias, column] : [column] }
}

const _adaptOnConditionElements = (onCond, associationName, selectAlias, joinAlias) => {
  const adaptedOnCondition = onCond.map(el => {
    const ref = el.ref

    if (ref) {
      if (ref[0] === associationName.join('_') && ref[1]) {
        return _toRef(selectAlias, ref.slice(1))
      }

      // no alias for special $user of canonical localized association
      if (ref[0] === '$user' && associationName[0] === 'localized') {
        return _toRef(undefined, ref.slice(0))
      }

      return _toRef(joinAlias, ref.slice(0))
    }

    return el
  })

  return adaptedOnCondition
}

const _args = (csnElement, options) => {
  const { associationNames, csn, aliases } = options
  const onCond = csnElement.on

  if (!onCond || !onCond.length) {
    return []
  }

  if (onCond.length < 3) {
    return onCond
  }

  if ((onCond[0].ref && onCond[0].ref[0] === '$self') || (onCond[2].ref && onCond[2].ref[0] === '$self')) {
    const target =
      onCond[0].ref[0] === '$self' ? onCond[2].ref[onCond[2].ref.length - 1] : onCond[0].ref[onCond[0].ref.length - 1]

    const oc = getOnCondNew(csn.definitions[csnElement.target].elements[target], {
      associationNames: target,
      csn,
      // revert join and select aliases because of backlink
      aliases: { select: aliases.join, join: aliases.select }
    })

    if (onCond.some(ele => ele === 'and')) {
      const and = _adaptOnConditionElements(
        onCond.slice(onCond.findIndex(ele => ele === 'and') + 1),
        associationNames,
        aliases.select,
        aliases.join
      )
      oc.push('and', ...and)
    }

    return oc
  }

  return _adaptOnConditionElements(onCond, associationNames, aliases.select, aliases.join)
}

const _foreignToOn = (csnElement, options) => {
  const { aliases } = options
  const on = []
  const foreignKeys = foreignKeyPropagations(csnElement)

  // for external services, there might be no foreign keys
  if (foreignKeys) {
    for (const key of foreignKeys) {
      if (on.length !== 0) {
        on.push('and')
      }

      // TODO static values possible here?

      on.push(
        _toRef(aliases.select, key.prefix ? key.prefix + '_' + key.childFieldName : key.childFieldName),
        '=',
        _toRef(aliases.join, _structPrefix(csnElement) + key.parentFieldName)
      )
    }
  }

  return on
}

/**
 * Gets the `ON` conditions in CQN format based on the CSN.
 *
 * @param {object} csnElement
 * @param {import('../../types/api').ONConditionOptions} [options]
 * @returns {Array}
 * @private
 */
function getOnCondNew(csnElement, options) {
  const defaultOptions = {
    aliases: {},
    resolveView: true
  }
  options = { ...defaultOptions, ...options }
  const { associationNames } = options

  if (!Array.isArray(associationNames)) {
    options.associationNames = [associationNames]
  }

  if (csnElement.keys) {
    return _foreignToOn(csnElement, options)
  }

  return _args(csnElement, options)
}

const getOnCond = (...args) => {
  return ['(', ...getOnCondNew(...args), ')']
}

module.exports = {
  getOnCond
}
