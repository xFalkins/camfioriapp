const { getOnCondElements } = require('./backlinks')

function _modifyWhereWithNavigations(where, newWhere, targetKeyElement, keyName) {
  if (where) {
    const whereCopy = JSON.parse(JSON.stringify(where)) // copy where else query will be modified
    if (newWhere.length > 0) newWhere.push('and')
    newWhere.push(...whereCopy)
  }

  newWhere.forEach(element => {
    if (element.ref && targetKeyElement._target.keys[element.ref[0]]) {
      element.ref = [keyName + '_' + element.ref[0]]
    }
  })
}

const _buildWhereForNavigations = (ref, newWhere, model, target) => {
  const currentRef = ref[0]
  const nextRef = ref[1]

  if (nextRef) {
    const csnEntity = target || model.definitions[currentRef.id || currentRef]
    const navigationElement = csnEntity && csnEntity.elements[nextRef.id || nextRef]

    if (!navigationElement || !navigationElement.on) return

    const nextKeys = getOnCondElements(navigationElement.on)
    for (const key of nextKeys) {
      const keyName = key.targetKey.replace(navigationElement.name + '.', '')
      const targetKeyElement = navigationElement._target.elements[keyName]
      if (targetKeyElement && targetKeyElement.isAssociation) {
        _modifyWhereWithNavigations(currentRef.where, newWhere, targetKeyElement, keyName)
      }
    }
    _buildWhereForNavigations(ref.slice(1), newWhere, model, navigationElement._target)
  }
}

function _getWhereFromInsert(query, target, model) {
  const where = []
  if (query.INSERT.into.ref && query.INSERT.into.ref.length > 1) {
    _buildWhereForNavigations(query.INSERT.into.ref, where, model)
  }
  return where
}

function _getWhereFromUpdate(query, target, model) {
  if (query.UPDATE.entity.ref && query.UPDATE.entity.ref.length > 1) {
    const where = []
    _buildWhereForNavigations(query.UPDATE.entity.ref, where, model)

    return where
  }

  return query.UPDATE.where
}

function _addKeysFromWhereToData(where, target, data) {
  const whereLength = where.length
  for (let i = 0; i < whereLength; i++) {
    const whereEl = where[i]
    const colName = whereEl.ref && whereEl.ref[whereEl.ref.length - 1]
    const colEl = colName && target.elements[colName]
    if (colEl && colEl.key) {
      const opWhere = where[i + 1]
      const valWhere = where[i + 2]
      if (opWhere === '=' && valWhere && 'val' in valWhere) {
        data[colName] = valWhere.val
      }
    }
  }
}

// params: data, req, service/tx
module.exports = (data, { query, target }, { model }) => {
  if (query.INSERT) {
    const where = _getWhereFromInsert(query, target, model)
    if (!where || !where.length) return

    if (!Array.isArray(data)) data = [data]

    for (const d of data) {
      _addKeysFromWhereToData(where, target, d)
    }
  } else if (query.UPDATE) {
    const where = _getWhereFromUpdate(query, target, model)
    if (!where || !where.length) return

    _addKeysFromWhereToData(where, target, data)
  }
}
