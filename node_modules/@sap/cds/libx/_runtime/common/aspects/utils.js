const CommonFieldControl = e => {
  const cfr = e['@Common.FieldControl']
  return cfr && cfr['#']
}

const isMandatory = e => {
  return (
    e['@assert.mandatory'] !== false &&
    (e['@mandatory'] ||
      e['@Common.FieldControl.Mandatory'] ||
      e['@FieldControl.Mandatory'] ||
      CommonFieldControl(e) === 'Mandatory')
  )
}

const isReadOnly = e => {
  return (
    e['@readonly'] ||
    e['@cds.on.update'] ||
    e['@cds.on.insert'] ||
    e['@Core.Computed'] ||
    e['@Common.FieldControl.ReadOnly'] ||
    e['@FieldControl.ReadOnly'] ||
    CommonFieldControl(e) === 'ReadOnly'
  )
}

const getETag = entity => {
  let val
  for (const ele in entity.elements) {
    if (entity.elements[ele]['@odata.etag']) {
      val = ele
      break
    }
  }
  return val
}

const hasPersonalData = entity => {
  let val
  if (entity['@PersonalData.DataSubjectRole'] && entity['@PersonalData.EntitySemantics']) {
    for (const ele in entity.elements) {
      if (
        entity.elements[ele]['@PersonalData.IsPotentiallyPersonal'] ||
        entity.elements[ele]['@PersonalData.IsPotentiallySensitive']
      ) {
        val = true
        break
      }
    }
  }
  return val
}

const hasSensitiveData = entity => {
  let val
  if (entity['@PersonalData.DataSubjectRole'] && entity['@PersonalData.EntitySemantics']) {
    for (const ele in entity.elements) {
      if (entity.elements[ele]['@PersonalData.IsPotentiallySensitive']) {
        val = true
        break
      }
    }
  }
  return val
}

module.exports = {
  isMandatory,
  isReadOnly,
  getETag,
  hasPersonalData,
  hasSensitiveData
}
