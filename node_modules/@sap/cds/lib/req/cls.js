/**
 * Continuation Local Storage support for req.context -> used through cds.context.
 */
 module.exports = (cds,v) => {

  if (cds.env.features.cls) {

    const { executionAsyncResource:current, createHook } = module.require ('async_hooks')
    const _context = Symbol('cds.context')

    createHook ({ init(id,t,tid, res) {
      const cr = current(); if (!cr) return
      const ctx = cr[_context]
      if (ctx) res[_context] = ctx
    }}).enable()

    Reflect.defineProperty (cds,'context',{ enumerable:1,
      set(v) {
        const cr = current()
        if (cr) cr[_context] = v && v.context || v
      },
      get() {
        const cr = current()
        return cr ? cr[_context] : undefined
      },
    })

  } else {

    Reflect.defineProperty (cds,'context',{ enumerable:1,
      get:()=> undefined,
      set:()=> {},
    })

  }

  return v ? cds.context = v : cds.context

}
