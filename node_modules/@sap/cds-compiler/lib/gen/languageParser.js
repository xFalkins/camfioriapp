/* eslint-disable */
// @ts-nocheck

// Generated from language.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var genericAntlrParser = require('./genericAntlrParser').genericAntlrParser;

var grammarFileName = "language.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0093\u0c2a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0003\u0002\u0007\u0002\u00ea\n\u0002",
    "\f\u0002\u000e\u0002\u00ed\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0007\u0002\u00f2\n\u0002\f\u0002\u000e\u0002\u00f5\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00fa\n\u0002\f\u0002",
    "\u000e\u0002\u00fd\u000b\u0002\u0005\u0002\u00ff\n\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u011a\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u011f\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0007\u0006\u0127\n\u0006\f\u0006\u000e\u0006",
    "\u012a\u000b\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0130\n\u0006\u0005\u0006\u0132\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u013d\n\u0007\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0005\t\u0143\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u014a\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0152",
    "\n\n\f\n\u000e\n\u0155\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u015e\n\u000b\u0003",
    "\u000b\u0003\u000b\u0005\u000b\u0162\n\u000b\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0005\f\u0169\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u0170\n\f\u0005\f\u0172\n\f\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u017e\n\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0188\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0005\r\u0191\n\r\u0005\r\u0193\n\r\u0005\r\u0195\n\r\u0005\r\u0197",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u019c\n\u000e\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u01a0\n\u000f\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u01a4\n\u0010\f\u0010\u000e\u0010\u01a7\u000b\u0010\u0003",
    "\u0010\u0005\u0010\u01aa\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u01b4\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01be\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01c3\n\u0010\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u01c7\n\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u01cc\n\u0011\f\u0011\u000e\u0011\u01cf\u000b",
    "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u01d3\n\u0011\f\u0011\u000e",
    "\u0011\u01d6\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u01db\n\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u01df\n\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01e5\n\u0012",
    "\u0003\u0012\u0003\u0012\u0007\u0012\u01e9\n\u0012\f\u0012\u000e\u0012",
    "\u01ec\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u01f0\n\u0012",
    "\f\u0012\u000e\u0012\u01f3\u000b\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u01f8\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0007\u0013\u01fe\n\u0013\f\u0013\u000e\u0013\u0201\u000b",
    "\u0013\u0003\u0013\u0005\u0013\u0204\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u020b\n\u0013\f\u0013",
    "\u000e\u0013\u020e\u000b\u0013\u0005\u0013\u0210\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u0215\n\u0013\f\u0013\u000e\u0013",
    "\u0218\u000b\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007",
    "\u0013\u021e\n\u0013\f\u0013\u000e\u0013\u0221\u000b\u0013\u0003\u0013",
    "\u0005\u0013\u0224\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u022d\n\u0013",
    "\f\u0013\u000e\u0013\u0230\u000b\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0235\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u023d\n\u0013\f\u0013",
    "\u000e\u0013\u0240\u000b\u0013\u0003\u0013\u0005\u0013\u0243\n\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0247\n\u0013\u0005\u0013\u0249",
    "\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u0252\n\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0258\n\u0014\u0003\u0014",
    "\u0005\u0014\u025b\n\u0014\u0003\u0014\u0005\u0014\u025e\n\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0264\n\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0007\u0015\u026e\n\u0015\f\u0015\u000e\u0015",
    "\u0271\u000b\u0015\u0005\u0015\u0273\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0279\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u027e\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0283\n\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u028b\n\u0016",
    "\f\u0016\u000e\u0016\u028e\u000b\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u029b\n\u0018\f\u0018\u000e",
    "\u0018\u029e\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u02a4\n\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u02a8",
    "\n\u0018\f\u0018\u000e\u0018\u02ab\u000b\u0018\u0003\u0018\u0005\u0018",
    "\u02ae\n\u0018\u0003\u0019\u0003\u0019\u0007\u0019\u02b2\n\u0019\f\u0019",
    "\u000e\u0019\u02b5\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0007\u0019\u02bb\n\u0019\f\u0019\u000e\u0019\u02be\u000b\u0019",
    "\u0003\u0019\u0005\u0019\u02c1\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0007\u0019\u02c7\n\u0019\f\u0019\u000e\u0019\u02ca",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02cf\n",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u02d6\n\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u02da\n\u001a",
    "\f\u001a\u000e\u001a\u02dd\u000b\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u02e5\n\u001a",
    "\f\u001a\u000e\u001a\u02e8\u000b\u001a\u0005\u001a\u02ea\n\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u02f0\n\u001a",
    "\f\u001a\u000e\u001a\u02f3\u000b\u001a\u0003\u001a\u0005\u001a\u02f6",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a",
    "\u02fc\n\u001a\f\u001a\u000e\u001a\u02ff\u000b\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0304\n\u001a\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u0308\n\u001b\f\u001b\u000e\u001b\u030b\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0311\n\u001b",
    "\f\u001b\u000e\u001b\u0314\u000b\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u0319\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0007\u001b\u031f\n\u001b\f\u001b\u000e\u001b\u0322\u000b",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0327\n\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u032d\n",
    "\u001c\f\u001c\u000e\u001c\u0330\u000b\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u0335\n\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0007\u001c\u033b\n\u001c\f\u001c\u000e\u001c\u033e",
    "\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0343\n",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0349",
    "\n\u001d\f\u001d\u000e\u001d\u034c\u000b\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u0358\n\u001d\f\u001d\u000e\u001d",
    "\u035b\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u0362\n\u001d\f\u001d\u000e\u001d\u0365\u000b\u001d",
    "\u0003\u001d\u0005\u001d\u0368\n\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0371",
    "\n\u001d\u0005\u001d\u0373\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0378\n\u001e\u0003\u001e\u0005\u001e\u037b\n\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0380\n\u001e\f\u001e\u000e",
    "\u001e\u0383\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0007\u001e\u038a\n\u001e\f\u001e\u000e\u001e\u038d\u000b",
    "\u001e\u0005\u001e\u038f\n\u001e\u0005\u001e\u0391\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0007\u001e\u0396\n\u001e\f\u001e\u000e\u001e",
    "\u0399\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u039f\n\u001e\f\u001e\u000e\u001e\u03a2\u000b\u001e\u0003\u001e",
    "\u0005\u001e\u03a5\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u03ad\n\u001f\f\u001f\u000e",
    "\u001f\u03b0\u000b\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0007\"\u03c2\n\"\f\"\u000e\"\u03c5\u000b\"\u0003\"\u0003",
    "\"\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0007$\u03d0\n$",
    "\f$\u000e$\u03d3\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u03da",
    "\n$\f$\u000e$\u03dd\u000b$\u0003$\u0003$\u0003$\u0005$\u03e2\n$\u0003",
    "$\u0003$\u0007$\u03e6\n$\f$\u000e$\u03e9\u000b$\u0003$\u0003$\u0007",
    "$\u03ed\n$\f$\u000e$\u03f0\u000b$\u0003$\u0003$\u0003$\u0005$\u03f5",
    "\n$\u0005$\u03f7\n$\u0003%\u0003%\u0003%\u0003%\u0005%\u03fd\n%\u0003",
    "%\u0003%\u0007%\u0401\n%\f%\u000e%\u0404\u000b%\u0003%\u0003%\u0007",
    "%\u0408\n%\f%\u000e%\u040b\u000b%\u0003%\u0003%\u0003%\u0003%\u0007",
    "%\u0411\n%\f%\u000e%\u0414\u000b%\u0003%\u0005%\u0417\n%\u0003%\u0003",
    "%\u0003%\u0003%\u0007%\u041d\n%\f%\u000e%\u0420\u000b%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u0429\n%\f%\u000e%\u042c",
    "\u000b%\u0003%\u0003%\u0003%\u0003%\u0007%\u0432\n%\f%\u000e%\u0435",
    "\u000b%\u0003%\u0003%\u0003%\u0005%\u043a\n%\u0003%\u0003%\u0003%\u0007",
    "%\u043f\n%\f%\u000e%\u0442\u000b%\u0003%\u0003%\u0003%\u0005%\u0447",
    "\n%\u0003&\u0003&\u0007&\u044b\n&\f&\u000e&\u044e\u000b&\u0003&\u0003",
    "&\u0003&\u0007&\u0453\n&\f&\u000e&\u0456\u000b&\u0003&\u0003&\u0007",
    "&\u045a\n&\f&\u000e&\u045d\u000b&\u0003&\u0003&\u0003&\u0005&\u0462",
    "\n&\u0003\'\u0003\'\u0007\'\u0466\n\'\f\'\u000e\'\u0469\u000b\'\u0003",
    "\'\u0003\'\u0003\'\u0007\'\u046e\n\'\f\'\u000e\'\u0471\u000b\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0478\n\'\f\'\u000e\'\u047b",
    "\u000b\'\u0003\'\u0003\'\u0005\'\u047f\n\'\u0003\'\u0003\'\u0003\'\u0007",
    "\'\u0484\n\'\f\'\u000e\'\u0487\u000b\'\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u048c\n\'\u0003(\u0003(\u0007(\u0490\n(\f(\u000e(\u0493\u000b(\u0003",
    "(\u0003(\u0003(\u0007(\u0498\n(\f(\u000e(\u049b\u000b(\u0003)\u0003",
    ")\u0007)\u049f\n)\f)\u000e)\u04a2\u000b)\u0003)\u0003)\u0003)\u0007",
    ")\u04a7\n)\f)\u000e)\u04aa\u000b)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u04b3\n)\u0003)\u0003)\u0005)\u04b7\n)\u0003",
    ")\u0003)\u0007)\u04bb\n)\f)\u000e)\u04be\u000b)\u0005)\u04c0\n)\u0003",
    ")\u0003)\u0003*\u0003*\u0007*\u04c6\n*\f*\u000e*\u04c9\u000b*\u0003",
    "*\u0003*\u0003*\u0005*\u04ce\n*\u0003+\u0003+\u0007+\u04d2\n+\f+\u000e",
    "+\u04d5\u000b+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u04e0\n,\u0003,\u0005,\u04e3\n,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0005,\u04ea\n,\u0005,\u04ec\n,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u04f2\n,\u0003,\u0003,\u0003-\u0006-\u04f7\n-\r-\u000e",
    "-\u04f8\u0003-\u0003-\u0003.\u0003.\u0005.\u04ff\n.\u0003.\u0005.\u0502",
    "\n.\u0003.\u0005.\u0505\n.\u0003.\u0005.\u0508\n.\u0003.\u0003.\u0003",
    ".\u0007.\u050d\n.\f.\u000e.\u0510\u000b.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u0517\n.\u0003.\u0003.\u0003.\u0005.\u051c\n.\u0003",
    ".\u0005.\u051f\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u053a\n.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0005.\u0541\n.\u0003.\u0003.\u0005.\u0545",
    "\n.\u0003.\u0005.\u0548\n.\u0003.\u0003.\u0005.\u054c\n.\u0003.\u0003",
    ".\u0007.\u0550\n.\f.\u000e.\u0553\u000b.\u0003.\u0003.\u0005.\u0557",
    "\n.\u0003.\u0003.\u0007.\u055b\n.\f.\u000e.\u055e\u000b.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u0564\n.\f.\u000e.\u0567\u000b.\u0003.\u0003",
    ".\u0005.\u056b\n.\u0005.\u056d\n.\u0005.\u056f\n.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u0575\n.\u0003.\u0003.\u0007.\u0579\n.\f.\u000e.\u057c",
    "\u000b.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u0585",
    "\n.\f.\u000e.\u0588\u000b.\u0003.\u0003.\u0003.\u0007.\u058d\n.\f.\u000e",
    ".\u0590\u000b.\u0005.\u0592\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007",
    ".\u0599\n.\f.\u000e.\u059c\u000b.\u0003.\u0003.\u0003.\u0003.\u0007",
    ".\u05a2\n.\f.\u000e.\u05a5\u000b.\u0003.\u0003.\u0005.\u05a9\n.\u0003",
    ".\u0005.\u05ac\n.\u0003.\u0003.\u0003.\u0007.\u05b1\n.\f.\u000e.\u05b4",
    "\u000b.\u0005.\u05b6\n.\u0003.\u0003.\u0005.\u05ba\n.\u0003.\u0003.",
    "\u0003.\u0003.\u0003.\u0007.\u05c1\n.\f.\u000e.\u05c4\u000b.\u0003.",
    "\u0003.\u0005.\u05c8\n.\u0003/\u0005/\u05cb\n/\u0003/\u0003/\u0003/",
    "\u0003/\u00030\u00030\u00030\u00030\u00030\u00050\u05d6\n0\u00030\u0003",
    "0\u00030\u00070\u05db\n0\f0\u000e0\u05de\u000b0\u00050\u05e0\n0\u0003",
    "0\u00030\u00031\u00031\u00071\u05e6\n1\f1\u000e1\u05e9\u000b1\u0003",
    "1\u00031\u00051\u05ed\n1\u00031\u00051\u05f0\n1\u00031\u00031\u0003",
    "1\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00052\u05ff\n2\u00032\u00032\u00032\u00032\u00052\u0605\n2\u0003",
    "2\u00032\u00032\u00032\u00052\u060b\n2\u00032\u00032\u00052\u060f\n",
    "2\u00052\u0611\n2\u00032\u00032\u00032\u00052\u0616\n2\u00032\u0003",
    "2\u00032\u00032\u00052\u061c\n2\u00032\u00032\u00072\u0620\n2\f2\u000e",
    "2\u0623\u000b2\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00072\u062d\n2\f2\u000e2\u0630\u000b2\u00052\u0632\n2\u00032\u0003",
    "2\u00032\u00072\u0637\n2\f2\u000e2\u063a\u000b2\u00032\u00032\u0003",
    "2\u00072\u063f\n2\f2\u000e2\u0642\u000b2\u00052\u0644\n2\u00052\u0646",
    "\n2\u00033\u00033\u00033\u00033\u00033\u00053\u064d\n3\u00033\u0003",
    "3\u00033\u00073\u0652\n3\f3\u000e3\u0655\u000b3\u00053\u0657\n3\u0003",
    "3\u00033\u00034\u00034\u00074\u065d\n4\f4\u000e4\u0660\u000b4\u0003",
    "4\u00034\u00035\u00035\u00035\u00035\u00035\u00075\u0669\n5\f5\u000e",
    "5\u066c\u000b5\u00055\u066e\n5\u00035\u00035\u00036\u00036\u00076\u0674",
    "\n6\f6\u000e6\u0677\u000b6\u00036\u00036\u00036\u00076\u067c\n6\f6\u000e",
    "6\u067f\u000b6\u00036\u00036\u00036\u00036\u00036\u00056\u0686\n6\u0003",
    "6\u00036\u00076\u068a\n6\f6\u000e6\u068d\u000b6\u00037\u00037\u0003",
    "7\u00037\u00037\u00077\u0694\n7\f7\u000e7\u0697\u000b7\u00057\u0699",
    "\n7\u00037\u00037\u00038\u00038\u00078\u069f\n8\f8\u000e8\u06a2\u000b",
    "8\u00038\u00038\u00038\u00078\u06a7\n8\f8\u000e8\u06aa\u000b8\u0003",
    "8\u00038\u00038\u00038\u00038\u00058\u06b1\n8\u00039\u00039\u00039\u0003",
    "9\u00039\u00059\u06b8\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u06bf",
    "\n:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u06c6\n:\u0003:\u0003",
    ":\u0003:\u0005:\u06cb\n:\u0003;\u0003;\u0003;\u0003;\u0007;\u06d1\n",
    ";\f;\u000e;\u06d4\u000b;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0007",
    ";\u06dc\n;\f;\u000e;\u06df\u000b;\u0005;\u06e1\n;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0005",
    "=\u06ef\n=\u0003=\u0003=\u0003=\u0005=\u06f4\n=\u0003=\u0003=\u0005",
    "=\u06f8\n=\u0003=\u0003=\u0003=\u0003=\u0007=\u06fe\n=\f=\u000e=\u0701",
    "\u000b=\u0003=\u0005=\u0704\n=\u0005=\u0706\n=\u0005=\u0708\n=\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u070e\n>\u0003>\u0003>\u0003>\u0005>\u0713",
    "\n>\u0003>\u0003>\u0005>\u0717\n>\u0003>\u0003>\u0003>\u0003>\u0007",
    ">\u071d\n>\f>\u000e>\u0720\u000b>\u0003>\u0003>\u0005>\u0724\n>\u0005",
    ">\u0726\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0005?\u0735\n?\u0003?\u0005?\u0738\n",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0741\n?\u0003",
    "?\u0003?\u0005?\u0745\n?\u0003?\u0003?\u0003?\u0003?\u0005?\u074b\n",
    "?\u0003?\u0003?\u0007?\u074f\n?\f?\u000e?\u0752\u000b?\u0003?\u0003",
    "?\u0003?\u0003?\u0005?\u0758\n?\u0003?\u0003?\u0007?\u075c\n?\f?\u000e",
    "?\u075f\u000b?\u0003?\u0003?\u0003?\u0003?\u0007?\u0765\n?\f?\u000e",
    "?\u0768\u000b?\u0003?\u0003?\u0003?\u0005?\u076d\n?\u0005?\u076f\n?",
    "\u0003?\u0003?\u0003?\u0007?\u0774\n?\f?\u000e?\u0777\u000b?\u0003?",
    "\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0007?\u0780\n?\f?\u000e",
    "?\u0783\u000b?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0007?\u0790\n?\f?\u000e?\u0793\u000b?\u0003",
    "?\u0003?\u0003?\u0007?\u0798\n?\f?\u000e?\u079b\u000b?\u0003?\u0003",
    "?\u0003?\u0003?\u0007?\u07a1\n?\f?\u000e?\u07a4\u000b?\u0003?\u0003",
    "?\u0003?\u0005?\u07a9\n?\u0003?\u0003?\u0003?\u0003?\u0003?\u0007?\u07b0",
    "\n?\f?\u000e?\u07b3\u000b?\u0003?\u0003?\u0003?\u0003?\u0007?\u07b9",
    "\n?\f?\u000e?\u07bc\u000b?\u0003?\u0003?\u0003?\u0005?\u07c1\n?\u0003",
    "?\u0003?\u0007?\u07c5\n?\f?\u000e?\u07c8\u000b?\u0003?\u0003?\u0003",
    "?\u0003?\u0007?\u07ce\n?\f?\u000e?\u07d1\u000b?\u0003?\u0003?\u0003",
    "?\u0005?\u07d6\n?\u0003?\u0003?\u0003?\u0003?\u0007?\u07dc\n?\f?\u000e",
    "?\u07df\u000b?\u0003?\u0003?\u0003?\u0005?\u07e4\n?\u0005?\u07e6\n?",
    "\u0005?\u07e8\n?\u0003@\u0003@\u0003@\u0007@\u07ed\n@\f@\u000e@\u07f0",
    "\u000b@\u0003@\u0003@\u0003A\u0003A\u0003A\u0007A\u07f7\nA\fA\u000e",
    "A\u07fa\u000bA\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0005",
    "B\u0803\nB\u0003B\u0003B\u0005B\u0807\nB\u0003B\u0003B\u0005B\u080b",
    "\nB\u0003B\u0003B\u0005B\u080f\nB\u0003B\u0003B\u0003B\u0003B\u0007",
    "B\u0815\nB\fB\u000eB\u0818\u000bB\u0003B\u0005B\u081b\nB\u0005B\u081d",
    "\nB\u0003C\u0003C\u0005C\u0821\nC\u0003C\u0003C\u0003C\u0003C\u0005",
    "C\u0827\nC\u0003C\u0003C\u0005C\u082b\nC\u0003C\u0003C\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0007D\u0835\nD\fD\u000eD\u0838\u000b",
    "D\u0005D\u083a\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0841\n",
    "D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0007E\u0849\nE\fE\u000e",
    "E\u084c\u000bE\u0005E\u084e\nE\u0003E\u0003E\u0005E\u0852\nE\u0003E",
    "\u0003E\u0003E\u0003E\u0003E\u0005E\u0859\nE\u0003E\u0003E\u0007E\u085d",
    "\nE\fE\u000eE\u0860\u000bE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003",
    "F\u0003G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0005H\u0874\nH\u0003H\u0003H\u0003H\u0005H\u0879\n",
    "H\u0003H\u0003H\u0003H\u0003H\u0005H\u087f\nH\u0005H\u0881\nH\u0003",
    "H\u0003H\u0003I\u0003I\u0003I\u0005I\u0888\nI\u0003I\u0003I\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u0893\nJ\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0007K\u089d\nK\fK\u000eK\u08a0",
    "\u000bK\u0003K\u0003K\u0003K\u0003K\u0005K\u08a6\nK\u0003L\u0003L\u0003",
    "L\u0003L\u0005L\u08ac\nL\u0003L\u0003L\u0005L\u08b0\nL\u0003L\u0003",
    "L\u0005L\u08b4\nL\u0005L\u08b6\nL\u0003L\u0003L\u0003L\u0007L\u08bb",
    "\nL\fL\u000eL\u08be\u000bL\u0003L\u0003L\u0003L\u0005L\u08c3\nL\u0003",
    "L\u0003L\u0003L\u0005L\u08c8\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0007M\u08d3\nM\fM\u000eM\u08d6\u000bM\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u08de\nN\u0003N\u0003N\u0003",
    "N\u0005N\u08e3\nN\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0005O\u08eb",
    "\nO\u0003O\u0003O\u0003O\u0005O\u08f0\nO\u0003P\u0003P\u0003P\u0003",
    "P\u0005P\u08f6\nP\u0003P\u0003P\u0003P\u0007P\u08fb\nP\fP\u000eP\u08fe",
    "\u000bP\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0007Q\u090c\nQ\fQ\u000eQ\u090f\u000bQ\u0003",
    "Q\u0003Q\u0005Q\u0913\nQ\u0003Q\u0003Q\u0005Q\u0917\nQ\u0003Q\u0005",
    "Q\u091a\nQ\u0003Q\u0005Q\u091d\nQ\u0003Q\u0003Q\u0005Q\u0921\nQ\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0005Q\u0927\nQ\u0003Q\u0003Q\u0003Q\u0007Q\u092c",
    "\nQ\fQ\u000eQ\u092f\u000bQ\u0003Q\u0003Q\u0005Q\u0933\nQ\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0005Q\u0939\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0007Q\u0943\nQ\fQ\u000eQ\u0946\u000bQ\u0005Q\u0948",
    "\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u094e\nQ\u0005Q\u0950\nQ\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0006R\u0959\nR\rR\u000e",
    "R\u095a\u0005R\u095d\nR\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0007S\u096e",
    "\nS\fS\u000eS\u0971\u000bS\u0003T\u0003T\u0003T\u0003T\u0005T\u0977",
    "\nT\u0003T\u0003T\u0003T\u0003T\u0005T\u097d\nT\u0003T\u0005T\u0980",
    "\nT\u0003T\u0003T\u0003T\u0003T\u0005T\u0986\nT\u0003T\u0005T\u0989",
    "\nT\u0003T\u0003T\u0003T\u0003T\u0005T\u098f\nT\u0003T\u0005T\u0992",
    "\nT\u0003T\u0003T\u0005T\u0996\nT\u0003T\u0003T\u0003U\u0005U\u099b",
    "\nU\u0003U\u0003U\u0003U\u0003U\u0005U\u09a1\nU\u0003U\u0003U\u0005",
    "U\u09a5\nU\u0003U\u0003U\u0003U\u0003U\u0005U\u09ab\nU\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0005V\u09b2\nV\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0005V\u09bb\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u09c8\nV\u0003V\u0003V\u0003",
    "V\u0003V\u0005V\u09ce\nV\u0005V\u09d0\nV\u0003W\u0003W\u0003W\u0003",
    "W\u0005W\u09d6\nW\u0003W\u0005W\u09d9\nW\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0005W\u09e0\nW\u0003W\u0005W\u09e3\nW\u0007W\u09e5\nW\fW\u000e",
    "W\u09e8\u000bW\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u09f0",
    "\nX\fX\u000eX\u09f3\u000bX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0007Y\u09fb\nY\fY\u000eY\u09fe\u000bY\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u0a0f\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0a16",
    "\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0a1f\n",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0a27\nZ\u0005Z\u0a29",
    "\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u0a3d",
    "\n[\u0005[\u0a3f\n[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\",
    "\u0007\\\u0a47\n\\\f\\\u000e\\\u0a4a\u000b\\\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0007]\u0a52\n]\f]\u000e]\u0a55\u000b]\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0007^\u0a5d\n^\f^\u000e^\u0a60\u000b",
    "^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0006_\u0a76\n_\r_\u000e_\u0a77\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0006_\u0a80\n_\r_\u000e_\u0a81\u0005_\u0a84\n_\u0003_\u0003",
    "_\u0003_\u0003_\u0005_\u0a8a\n_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0005",
    "_\u0a9b\n_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u0aab\n_\f_\u000e_\u0aae",
    "\u000b_\u0003_\u0003_\u0003_\u0005_\u0ab3\n_\u0005_\u0ab5\n_\u0005_",
    "\u0ab7\n_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005",
    "`\u0ac1\n`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0005`\u0ace\n`\u0005`\u0ad0\n`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0ae6\n`\u0003",
    "a\u0003a\u0003a\u0003a\u0005a\u0aec\na\u0003a\u0005a\u0aef\na\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0005a\u0af6\na\u0003a\u0005a\u0af9\n",
    "a\u0007a\u0afb\na\fa\u000ea\u0afe\u000ba\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0007b\u0b05\nb\fb\u000eb\u0b08\u000bb\u0003b\u0003b\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0b12\nc\fc\u000ec\u0b15",
    "\u000bc\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0b1c\nc\fc\u000e",
    "c\u0b1f\u000bc\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0b26\nc\f",
    "c\u000ec\u0b29\u000bc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0b38\nc\fc\u000e",
    "c\u0b3b\u000bc\u0003c\u0003c\u0003c\u0005c\u0b40\nc\u0003c\u0003c\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0005f\u0b53\nf\u0003g\u0003g\u0005g\u0b57",
    "\ng\u0003g\u0003g\u0003g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003i\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0007j\u0b6d\nj\fj\u000ej\u0b70\u000bj\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0b7b\nj\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0005j\u0b84\nj\u0007j\u0b86\nj\fj\u000e",
    "j\u0b89\u000bj\u0005j\u0b8b\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0005j\u0b93\nj\u0003j\u0003j\u0005j\u0b97\nj\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0005k\u0b9e\nk\u0003k\u0003k\u0005k\u0ba2\nk\u0005",
    "k\u0ba4\nk\u0003l\u0005l\u0ba7\nl\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0005l\u0baf\nl\u0003l\u0003l\u0003l\u0005l\u0bb4\nl\u0003",
    "l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u0bbf",
    "\nm\fm\u000em\u0bc2\u000bm\u0003m\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u0bcf\nm\fm\u000em\u0bd2",
    "\u000bm\u0005m\u0bd4\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005",
    "m\u0bdc\nm\u0003m\u0003m\u0003m\u0003m\u0005m\u0be2\nm\u0003m\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0005m\u0bea\nm\u0005m\u0bec\nm\u0003",
    "n\u0005n\u0bef\nn\u0003n\u0003n\u0003n\u0005n\u0bf4\nn\u0003n\u0003",
    "n\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0005o\u0c06\no\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0007p\u0c0e\np\fp\u000ep\u0c11\u000bp\u0003q\u0003",
    "q\u0003q\u0003q\u0005q\u0c17\nq\u0003q\u0003q\u0003q\u0007q\u0c1c\n",
    "q\fq\u000eq\u0c1f\u000bq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003",
    "s\u0003t\u0003t\u0003t\u0002\u0002u\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c",
    "\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4",
    "\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc",
    "\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4",
    "\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u0002\r\u0004",
    "\u0002>>\u0090\u0090\u0004\u0002((..\u0004\u0002^^ii\u0004\u0002\u0013",
    "\u0013\u0090\u0090\u0004\u0002\u000b\u000b\u0014\u0019\u0004\u0002(",
    ")::\u0003\u0002\f\r\u0004\u0002\u000e\u000e\u001b\u001b\u0005\u0002",
    "KKjj\u0084\u0084\b\u0002OOccrrtt\u0081\u0081\u008a\u008a\u0003\u0002",
    "@\u008b\u0002\u0db3\u0002\u00eb\u0003\u0002\u0002\u0002\u0004\u0102",
    "\u0003\u0002\u0002\u0002\u0006\u0106\u0003\u0002\u0002\u0002\b\u010a",
    "\u0003\u0002\u0002\u0002\n\u010e\u0003\u0002\u0002\u0002\f\u0135\u0003",
    "\u0002\u0002\u0002\u000e\u013e\u0003\u0002\u0002\u0002\u0010\u0140\u0003",
    "\u0002\u0002\u0002\u0012\u014b\u0003\u0002\u0002\u0002\u0014\u0158\u0003",
    "\u0002\u0002\u0002\u0016\u0163\u0003\u0002\u0002\u0002\u0018\u0173\u0003",
    "\u0002\u0002\u0002\u001a\u019b\u0003\u0002\u0002\u0002\u001c\u019d\u0003",
    "\u0002\u0002\u0002\u001e\u01a1\u0003\u0002\u0002\u0002 \u01c6\u0003",
    "\u0002\u0002\u0002\"\u01de\u0003\u0002\u0002\u0002$\u01f9\u0003\u0002",
    "\u0002\u0002&\u024a\u0003\u0002\u0002\u0002(\u0263\u0003\u0002\u0002",
    "\u0002*\u0284\u0003\u0002\u0002\u0002,\u0291\u0003\u0002\u0002\u0002",
    ".\u0294\u0003\u0002\u0002\u00020\u02ce\u0003\u0002\u0002\u00022\u02d0",
    "\u0003\u0002\u0002\u00024\u0305\u0003\u0002\u0002\u00026\u0342\u0003",
    "\u0002\u0002\u00028\u0344\u0003\u0002\u0002\u0002:\u037a\u0003\u0002",
    "\u0002\u0002<\u03a8\u0003\u0002\u0002\u0002>\u03b3\u0003\u0002\u0002",
    "\u0002@\u03b8\u0003\u0002\u0002\u0002B\u03bd\u0003\u0002\u0002\u0002",
    "D\u03c8\u0003\u0002\u0002\u0002F\u03f6\u0003\u0002\u0002\u0002H\u03f8",
    "\u0003\u0002\u0002\u0002J\u0448\u0003\u0002\u0002\u0002L\u0463\u0003",
    "\u0002\u0002\u0002N\u048d\u0003\u0002\u0002\u0002P\u049c\u0003\u0002",
    "\u0002\u0002R\u04c3\u0003\u0002\u0002\u0002T\u04cf\u0003\u0002\u0002",
    "\u0002V\u04d8\u0003\u0002\u0002\u0002X\u04f6\u0003\u0002\u0002\u0002",
    "Z\u04fc\u0003\u0002\u0002\u0002\\\u05ca\u0003\u0002\u0002\u0002^\u05d0",
    "\u0003\u0002\u0002\u0002`\u05e3\u0003\u0002\u0002\u0002b\u061b\u0003",
    "\u0002\u0002\u0002d\u0647\u0003\u0002\u0002\u0002f\u065a\u0003\u0002",
    "\u0002\u0002h\u0663\u0003\u0002\u0002\u0002j\u0671\u0003\u0002\u0002",
    "\u0002l\u068e\u0003\u0002\u0002\u0002n\u069c\u0003\u0002\u0002\u0002",
    "p\u06b7\u0003\u0002\u0002\u0002r\u06ca\u0003\u0002\u0002\u0002t\u06cc",
    "\u0003\u0002\u0002\u0002v\u06e7\u0003\u0002\u0002\u0002x\u0707\u0003",
    "\u0002\u0002\u0002z\u0709\u0003\u0002\u0002\u0002|\u07e7\u0003\u0002",
    "\u0002\u0002~\u07e9\u0003\u0002\u0002\u0002\u0080\u07f3\u0003\u0002",
    "\u0002\u0002\u0082\u0802\u0003\u0002\u0002\u0002\u0084\u082a\u0003\u0002",
    "\u0002\u0002\u0086\u0840\u0003\u0002\u0002\u0002\u0088\u0858\u0003\u0002",
    "\u0002\u0002\u008a\u0863\u0003\u0002\u0002\u0002\u008c\u0867\u0003\u0002",
    "\u0002\u0002\u008e\u086b\u0003\u0002\u0002\u0002\u0090\u0884\u0003\u0002",
    "\u0002\u0002\u0092\u088b\u0003\u0002\u0002\u0002\u0094\u0894\u0003\u0002",
    "\u0002\u0002\u0096\u08a7\u0003\u0002\u0002\u0002\u0098\u08c9\u0003\u0002",
    "\u0002\u0002\u009a\u08d7\u0003\u0002\u0002\u0002\u009c\u08e4\u0003\u0002",
    "\u0002\u0002\u009e\u08f1\u0003\u0002\u0002\u0002\u00a0\u094f\u0003\u0002",
    "\u0002\u0002\u00a2\u0951\u0003\u0002\u0002\u0002\u00a4\u095e\u0003\u0002",
    "\u0002\u0002\u00a6\u0995\u0003\u0002\u0002\u0002\u00a8\u09a0\u0003\u0002",
    "\u0002\u0002\u00aa\u09cf\u0003\u0002\u0002\u0002\u00ac\u09d1\u0003\u0002",
    "\u0002\u0002\u00ae\u09e9\u0003\u0002\u0002\u0002\u00b0\u09f4\u0003\u0002",
    "\u0002\u0002\u00b2\u0a28\u0003\u0002\u0002\u0002\u00b4\u0a3e\u0003\u0002",
    "\u0002\u0002\u00b6\u0a40\u0003\u0002\u0002\u0002\u00b8\u0a4b\u0003\u0002",
    "\u0002\u0002\u00ba\u0a56\u0003\u0002\u0002\u0002\u00bc\u0ab6\u0003\u0002",
    "\u0002\u0002\u00be\u0ae5\u0003\u0002\u0002\u0002\u00c0\u0ae7\u0003\u0002",
    "\u0002\u0002\u00c2\u0aff\u0003\u0002\u0002\u0002\u00c4\u0b0b\u0003\u0002",
    "\u0002\u0002\u00c6\u0b43\u0003\u0002\u0002\u0002\u00c8\u0b48\u0003\u0002",
    "\u0002\u0002\u00ca\u0b52\u0003\u0002\u0002\u0002\u00cc\u0b54\u0003\u0002",
    "\u0002\u0002\u00ce\u0b5d\u0003\u0002\u0002\u0002\u00d0\u0b62\u0003\u0002",
    "\u0002\u0002\u00d2\u0b96\u0003\u0002\u0002\u0002\u00d4\u0ba3\u0003\u0002",
    "\u0002\u0002\u00d6\u0ba6\u0003\u0002\u0002\u0002\u00d8\u0beb\u0003\u0002",
    "\u0002\u0002\u00da\u0bee\u0003\u0002\u0002\u0002\u00dc\u0c05\u0003\u0002",
    "\u0002\u0002\u00de\u0c07\u0003\u0002\u0002\u0002\u00e0\u0c12\u0003\u0002",
    "\u0002\u0002\u00e2\u0c20\u0003\u0002\u0002\u0002\u00e4\u0c25\u0003\u0002",
    "\u0002\u0002\u00e6\u0c27\u0003\u0002\u0002\u0002\u00e8\u00ea\u0005\n",
    "\u0006\u0002\u00e9\u00e8\u0003\u0002\u0002\u0002\u00ea\u00ed\u0003\u0002",
    "\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002",
    "\u0002\u0002\u00ec\u00fe\u0003\u0002\u0002\u0002\u00ed\u00eb\u0003\u0002",
    "\u0002\u0002\u00ee\u00f3\u0005\b\u0005\u0002\u00ef\u00f2\u0005\n\u0006",
    "\u0002\u00f0\u00f2\u0005\u001e\u0010\u0002\u00f1\u00ef\u0003\u0002\u0002",
    "\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f5\u0003\u0002\u0002",
    "\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002",
    "\u0002\u00f4\u00ff\u0003\u0002\u0002\u0002\u00f5\u00f3\u0003\u0002\u0002",
    "\u0002\u00f6\u00fb\u0005\u001e\u0010\u0002\u00f7\u00fa\u0005\n\u0006",
    "\u0002\u00f8\u00fa\u0005\u001e\u0010\u0002\u00f9\u00f7\u0003\u0002\u0002",
    "\u0002\u00f9\u00f8\u0003\u0002\u0002\u0002\u00fa\u00fd\u0003\u0002\u0002",
    "\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002",
    "\u0002\u00fc\u00ff\u0003\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002",
    "\u0002\u00fe\u00ee\u0003\u0002\u0002\u0002\u00fe\u00f6\u0003\u0002\u0002",
    "\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002",
    "\u0002\u0100\u0101\u0007\u0002\u0002\u0003\u0101\u0003\u0003\u0002\u0002",
    "\u0002\u0102\u0103\u0005\u0096L\u0002\u0103\u0104\b\u0003\u0001\u0002",
    "\u0104\u0105\u0007\u0002\u0002\u0003\u0105\u0005\u0003\u0002\u0002\u0002",
    "\u0106\u0107\u0005\u00aeX\u0002\u0107\u0108\b\u0004\u0001\u0002\u0108",
    "\u0109\u0007\u0002\u0002\u0003\u0109\u0007\u0003\u0002\u0002\u0002\u010a",
    "\u010b\u0007u\u0002\u0002\u010b\u010c\u0005\u00dep\u0002\u010c\u010d",
    "\u0007\u0003\u0002\u0002\u010d\t\u0003\u0002\u0002\u0002\u010e\u0131",
    "\u0007\u0088\u0002\u0002\u010f\u0110\u00071\u0002\u0002\u0110\u0111",
    "\u0007#\u0002\u0002\u0111\u0132\b\u0006\u0001\u0002\u0112\u0113\u0005",
    "\u000e\b\u0002\u0113\u0119\b\u0006\u0001\u0002\u0114\u0115\u0007*\u0002",
    "\u0002\u0115\u0116\u0005\u00e6t\u0002\u0116\u0117\b\u0006\u0001\u0002",
    "\u0117\u011a\u0003\u0002\u0002\u0002\u0118\u011a\b\u0006\u0001\u0002",
    "\u0119\u0114\u0003\u0002\u0002\u0002\u0119\u0118\u0003\u0002\u0002\u0002",
    "\u011a\u011e\u0003\u0002\u0002\u0002\u011b\u011c\u00071\u0002\u0002",
    "\u011c\u011d\u0007#\u0002\u0002\u011d\u011f\b\u0006\u0001\u0002\u011e",
    "\u011b\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f",
    "\u0132\u0003\u0002\u0002\u0002\u0120\u0121\b\u0006\u0001\u0002\u0121",
    "\u0122\u0007\u0004\u0002\u0002\u0122\u0128\u0005\f\u0007\u0002\u0123",
    "\u0124\u0007\u0005\u0002\u0002\u0124\u0125\b\u0006\u0001\u0002\u0125",
    "\u0127\u0005\f\u0007\u0002\u0126\u0123\u0003\u0002\u0002\u0002\u0127",
    "\u012a\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0128",
    "\u0129\u0003\u0002\u0002\u0002\u0129\u012b\u0003\u0002\u0002\u0002\u012a",
    "\u0128\u0003\u0002\u0002\u0002\u012b\u012f\u0007\u0006\u0002\u0002\u012c",
    "\u012d\u00071\u0002\u0002\u012d\u012e\u0007#\u0002\u0002\u012e\u0130",
    "\b\u0006\u0001\u0002\u012f\u012c\u0003\u0002\u0002\u0002\u012f\u0130",
    "\u0003\u0002\u0002\u0002\u0130\u0132\u0003\u0002\u0002\u0002\u0131\u010f",
    "\u0003\u0002\u0002\u0002\u0131\u0112\u0003\u0002\u0002\u0002\u0131\u0120",
    "\u0003\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u0134",
    "\u0007\u0003\u0002\u0002\u0134\u000b\u0003\u0002\u0002\u0002\u0135\u0136",
    "\u0005\u000e\b\u0002\u0136\u013c\b\u0007\u0001\u0002\u0137\u0138\u0007",
    "*\u0002\u0002\u0138\u0139\u0005\u00e6t\u0002\u0139\u013a\b\u0007\u0001",
    "\u0002\u013a\u013d\u0003\u0002\u0002\u0002\u013b\u013d\b\u0007\u0001",
    "\u0002\u013c\u0137\u0003\u0002\u0002\u0002\u013c\u013b\u0003\u0002\u0002",
    "\u0002\u013d\r\u0003\u0002\u0002\u0002\u013e\u013f\u0005\u00dep\u0002",
    "\u013f\u000f\u0003\u0002\u0002\u0002\u0140\u0142\u0005\u00e0q\u0002",
    "\u0141\u0143\u0005\u00e2r\u0002\u0142\u0141\u0003\u0002\u0002\u0002",
    "\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u0149\u0003\u0002\u0002\u0002",
    "\u0144\u0145\u0007\u0007\u0002\u0002\u0145\u0146\b\t\u0001\u0002\u0146",
    "\u0147\u0005\u00d4k\u0002\u0147\u0148\b\t\u0001\u0002\u0148\u014a\u0003",
    "\u0002\u0002\u0002\u0149\u0144\u0003\u0002\u0002\u0002\u0149\u014a\u0003",
    "\u0002\u0002\u0002\u014a\u0011\u0003\u0002\u0002\u0002\u014b\u014c\u0007",
    "\b\u0002\u0002\u014c\u014d\b\n\u0001\u0002\u014d\u0153\u0005\u0010\t",
    "\u0002\u014e\u014f\u0007\u0005\u0002\u0002\u014f\u0150\b\n\u0001\u0002",
    "\u0150\u0152\u0005\u0010\t\u0002\u0151\u014e\u0003\u0002\u0002\u0002",
    "\u0152\u0155\u0003\u0002\u0002\u0002\u0153\u0151\u0003\u0002\u0002\u0002",
    "\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0156\u0003\u0002\u0002\u0002",
    "\u0155\u0153\u0003\u0002\u0002\u0002\u0156\u0157\u0007\t\u0002\u0002",
    "\u0157\u0013\u0003\u0002\u0002\u0002\u0158\u0161\u0007\n\u0002\u0002",
    "\u0159\u0162\u0005\u0012\n\u0002\u015a\u015b\b\u000b\u0001\u0002\u015b",
    "\u015d\u0005\u00e0q\u0002\u015c\u015e\u0005\u00e2r\u0002\u015d\u015c",
    "\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u015f",
    "\u0003\u0002\u0002\u0002\u015f\u0160\b\u000b\u0001\u0002\u0160\u0162",
    "\u0003\u0002\u0002\u0002\u0161\u0159\u0003\u0002\u0002\u0002\u0161\u015a",
    "\u0003\u0002\u0002\u0002\u0162\u0015\u0003\u0002\u0002\u0002\u0163\u0171",
    "\u0007\n\u0002\u0002\u0164\u0172\u0005\u0012\n\u0002\u0165\u0166\b\f",
    "\u0001\u0002\u0166\u0168\u0005\u00e0q\u0002\u0167\u0169\u0005\u00e2",
    "r\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002",
    "\u0002\u0002\u0169\u016f\u0003\u0002\u0002\u0002\u016a\u016b\u0007\u0007",
    "\u0002\u0002\u016b\u016c\b\f\u0001\u0002\u016c\u016d\u0005\u00d4k\u0002",
    "\u016d\u016e\b\f\u0001\u0002\u016e\u0170\u0003\u0002\u0002\u0002\u016f",
    "\u016a\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170",
    "\u0172\u0003\u0002\u0002\u0002\u0171\u0164\u0003\u0002\u0002\u0002\u0171",
    "\u0165\u0003\u0002\u0002\u0002\u0172\u0017\u0003\u0002\u0002\u0002\u0173",
    "\u0196\u0007\n\u0002\u0002\u0174\u0197\u0005\u0012\n\u0002\u0175\u0176",
    "\b\r\u0001\u0002\u0176\u0177\u0005\u00e0q\u0002\u0177\u017d\b\r\u0001",
    "\u0002\u0178\u0179\u0007\u008e\u0002\u0002\u0179\u017a\b\r\u0001\u0002",
    "\u017a\u017b\u0005\u00e6t\u0002\u017b\u017c\b\r\u0001\u0002\u017c\u017e",
    "\u0003\u0002\u0002\u0002\u017d\u0178\u0003\u0002\u0002\u0002\u017d\u017e",
    "\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002\u017f\u0194",
    "\b\r\u0001\u0002\u0180\u0181\u0007\u008f\u0002\u0002\u0181\u0192\b\r",
    "\u0001\u0002\u0182\u0183\u0005\u00d2j\u0002\u0183\u0184\b\r\u0001\u0002",
    "\u0184\u0193\u0003\u0002\u0002\u0002\u0185\u0187\b\r\u0001\u0002\u0186",
    "\u0188\u0007\n\u0002\u0002\u0187\u0186\u0003\u0002\u0002\u0002\u0187",
    "\u0188\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189",
    "\u018a\u0005\u00e0q\u0002\u018a\u0190\b\r\u0001\u0002\u018b\u018c\u0007",
    "\u008e\u0002\u0002\u018c\u018d\b\r\u0001\u0002\u018d\u018e\u0005\u00e6",
    "t\u0002\u018e\u018f\b\r\u0001\u0002\u018f\u0191\u0003\u0002\u0002\u0002",
    "\u0190\u018b\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002",
    "\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u0182\u0003\u0002\u0002\u0002",
    "\u0192\u0185\u0003\u0002\u0002\u0002\u0193\u0195\u0003\u0002\u0002\u0002",
    "\u0194\u0180\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002",
    "\u0195\u0197\u0003\u0002\u0002\u0002\u0196\u0174\u0003\u0002\u0002\u0002",
    "\u0196\u0175\u0003\u0002\u0002\u0002\u0197\u0019\u0003\u0002\u0002\u0002",
    "\u0198\u019c\u0007\u0003\u0002\u0002\u0199\u019a\b\u000e\u0001\u0002",
    "\u019a\u019c\u0007\u0006\u0002\u0002\u019b\u0198\u0003\u0002\u0002\u0002",
    "\u019b\u0199\u0003\u0002\u0002\u0002\u019c\u001b\u0003\u0002\u0002\u0002",
    "\u019d\u019f\b\u000f\u0001\u0002\u019e\u01a0\u0007\u0003\u0002\u0002",
    "\u019f\u019e\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002",
    "\u01a0\u001d\u0003\u0002\u0002\u0002\u01a1\u01a5\b\u0010\u0001\u0002",
    "\u01a2\u01a4\u0005\u0016\f\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002",
    "\u01a4\u01a7\u0003\u0002\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002",
    "\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u01c2\u0003\u0002\u0002\u0002",
    "\u01a7\u01a5\u0003\u0002\u0002\u0002\u01a8\u01aa\u0007Q\u0002\u0002",
    "\u01a9\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002",
    "\u01aa\u01b3\u0003\u0002\u0002\u0002\u01ab\u01b4\u0005 \u0011\u0002",
    "\u01ac\u01b4\u0005$\u0013\u0002\u01ad\u01b4\u0005<\u001f\u0002\u01ae",
    "\u01b4\u0005:\u001e\u0002\u01af\u01b4\u0005B\"\u0002\u01b0\u01b4\u0005",
    "t;\u0002\u01b1\u01b4\u00058\u001d\u0002\u01b2\u01b4\u00056\u001c\u0002",
    "\u01b3\u01ab\u0003\u0002\u0002\u0002\u01b3\u01ac\u0003\u0002\u0002\u0002",
    "\u01b3\u01ad\u0003\u0002\u0002\u0002\u01b3\u01ae\u0003\u0002\u0002\u0002",
    "\u01b3\u01af\u0003\u0002\u0002\u0002\u01b3\u01b0\u0003\u0002\u0002\u0002",
    "\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002",
    "\u01b4\u01c3\u0003\u0002\u0002\u0002\u01b5\u01b6\u0007]\u0002\u0002",
    "\u01b6\u01bd\b\u0010\u0001\u0002\u01b7\u01be\u0005\"\u0012\u0002\u01b8",
    "\u01be\u0005.\u0018\u0002\u01b9\u01be\u00052\u001a\u0002\u01ba\u01be",
    "\u0005> \u0002\u01bb\u01be\u0005@!\u0002\u01bc\u01be\u0005D#\u0002\u01bd",
    "\u01b7\u0003\u0002\u0002\u0002\u01bd\u01b8\u0003\u0002\u0002\u0002\u01bd",
    "\u01b9\u0003\u0002\u0002\u0002\u01bd\u01ba\u0003\u0002\u0002\u0002\u01bd",
    "\u01bb\u0003\u0002\u0002\u0002\u01bd\u01bc\u0003\u0002\u0002\u0002\u01be",
    "\u01c3\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007D\u0002\u0002\u01c0",
    "\u01c1\b\u0010\u0001\u0002\u01c1\u01c3\u0005H%\u0002\u01c2\u01a9\u0003",
    "\u0002\u0002\u0002\u01c2\u01b5\u0003\u0002\u0002\u0002\u01c2\u01bf\u0003",
    "\u0002\u0002\u0002\u01c3\u001f\u0003\u0002\u0002\u0002\u01c4\u01c7\u0007",
    "M\u0002\u0002\u01c5\u01c7\u0007\u0082\u0002\u0002\u01c6\u01c4\u0003",
    "\u0002\u0002\u0002\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003",
    "\u0002\u0002\u0002\u01c8\u01c9\u0005\u00dep\u0002\u01c9\u01cd\b\u0011",
    "\u0001\u0002\u01ca\u01cc\u0005\u0014\u000b\u0002\u01cb\u01ca\u0003\u0002",
    "\u0002\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002",
    "\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01da\u0003\u0002",
    "\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0\u01d4\u0007\u0004",
    "\u0002\u0002\u01d1\u01d3\u0005\u001e\u0010\u0002\u01d2\u01d1\u0003\u0002",
    "\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002\u0002\u01d4\u01d2\u0003\u0002",
    "\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7\u0003\u0002",
    "\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007\u0006",
    "\u0002\u0002\u01d8\u01db\u0005\u001c\u000f\u0002\u01d9\u01db\u0005\u001a",
    "\u000e\u0002\u01da\u01d0\u0003\u0002\u0002\u0002\u01da\u01d9\u0003\u0002",
    "\u0002\u0002\u01db!\u0003\u0002\u0002\u0002\u01dc\u01df\u0007M\u0002",
    "\u0002\u01dd\u01df\u0007\u0082\u0002\u0002\u01de\u01dc\u0003\u0002\u0002",
    "\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002",
    "\u0002\u01e0\u01e1\u0005\u00dep\u0002\u01e1\u01e4\b\u0012\u0001\u0002",
    "\u01e2\u01e3\u0007>\u0002\u0002\u01e3\u01e5\b\u0012\u0001\u0002\u01e4",
    "\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5",
    "\u01e6\u0003\u0002\u0002\u0002\u01e6\u01ea\b\u0012\u0001\u0002\u01e7",
    "\u01e9\u0005\u0016\f\u0002\u01e8\u01e7\u0003\u0002\u0002\u0002\u01e9",
    "\u01ec\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002\u01ea",
    "\u01eb\u0003\u0002\u0002\u0002\u01eb\u01f7\u0003\u0002\u0002\u0002\u01ec",
    "\u01ea\u0003\u0002\u0002\u0002\u01ed\u01f1\u0007\u0004\u0002\u0002\u01ee",
    "\u01f0\u0005\u001e\u0010\u0002\u01ef\u01ee\u0003\u0002\u0002\u0002\u01f0",
    "\u01f3\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f1",
    "\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f4\u0003\u0002\u0002\u0002\u01f3",
    "\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f5\u0007\u0006\u0002\u0002\u01f5",
    "\u01f8\u0005\u001c\u000f\u0002\u01f6\u01f8\u0005\u001a\u000e\u0002\u01f7",
    "\u01ed\u0003\u0002\u0002\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f8",
    "#\u0003\u0002\u0002\u0002\u01f9\u01fa\u0007V\u0002\u0002\u01fa\u01fb",
    "\u0005\u00dep\u0002\u01fb\u01ff\b\u0013\u0001\u0002\u01fc\u01fe\u0005",
    "\u0014\u000b\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fe\u0201\u0003",
    "\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200\u0003",
    "\u0002\u0002\u0002\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003",
    "\u0002\u0002\u0002\u0202\u0204\u0005l7\u0002\u0203\u0202\u0003\u0002",
    "\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204\u0248\u0003\u0002",
    "\u0002\u0002\u0205\u0206\u0007\u0007\u0002\u0002\u0206\u020c\u0005v",
    "<\u0002\u0207\u0208\u0007\u0005\u0002\u0002\u0208\u0209\b\u0013\u0001",
    "\u0002\u0209\u020b\u0005v<\u0002\u020a\u0207\u0003\u0002\u0002\u0002",
    "\u020b\u020e\u0003\u0002\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002",
    "\u020c\u020d\u0003\u0002\u0002\u0002\u020d\u0210\u0003\u0002\u0002\u0002",
    "\u020e\u020c\u0003\u0002\u0002\u0002\u020f\u0205\u0003\u0002\u0002\u0002",
    "\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0211\u0003\u0002\u0002\u0002",
    "\u0211\u0212\u0007\u0004\u0002\u0002\u0212\u0216\b\u0013\u0001\u0002",
    "\u0213\u0215\u0005T+\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0215",
    "\u0218\u0003\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u0219\u0003\u0002\u0002\u0002\u0218",
    "\u0216\u0003\u0002\u0002\u0002\u0219\u0223\u0007\u0006\u0002\u0002\u021a",
    "\u021b\u0007B\u0002\u0002\u021b\u021f\u0007\u0004\u0002\u0002\u021c",
    "\u021e\u00054\u001b\u0002\u021d\u021c\u0003\u0002\u0002\u0002\u021e",
    "\u0221\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f",
    "\u0220\u0003\u0002\u0002\u0002\u0220\u0222\u0003\u0002\u0002\u0002\u0221",
    "\u021f\u0003\u0002\u0002\u0002\u0222\u0224\u0007\u0006\u0002\u0002\u0223",
    "\u021a\u0003\u0002\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224",
    "\u0225\u0003\u0002\u0002\u0002\u0225\u0249\u0005\u001c\u000f\u0002\u0226",
    "\u0246\u0007*\u0002\u0002\u0227\u0228\u0005\u0096L\u0002\u0228\u0234",
    "\b\u0013\u0001\u0002\u0229\u022a\u0007B\u0002\u0002\u022a\u022e\u0007",
    "\u0004\u0002\u0002\u022b\u022d\u00054\u001b\u0002\u022c\u022b\u0003",
    "\u0002\u0002\u0002\u022d\u0230\u0003\u0002\u0002\u0002\u022e\u022c\u0003",
    "\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0231\u0003",
    "\u0002\u0002\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0231\u0232\u0007",
    "\u0006\u0002\u0002\u0232\u0235\u0005\u001c\u000f\u0002\u0233\u0235\u0005",
    "\u001a\u000e\u0002\u0234\u0229\u0003\u0002\u0002\u0002\u0234\u0233\u0003",
    "\u0002\u0002\u0002\u0235\u0247\u0003\u0002\u0002\u0002\u0236\u0237\u0005",
    "&\u0014\u0002\u0237\u0238\b\u0013\u0001\u0002\u0238\u0242\u0005(\u0015",
    "\u0002\u0239\u023a\u0007B\u0002\u0002\u023a\u023e\u0007\u0004\u0002",
    "\u0002\u023b\u023d\u00054\u001b\u0002\u023c\u023b\u0003\u0002\u0002",
    "\u0002\u023d\u0240\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002",
    "\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0241\u0003\u0002\u0002",
    "\u0002\u0240\u023e\u0003\u0002\u0002\u0002\u0241\u0243\u0007\u0006\u0002",
    "\u0002\u0242\u0239\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002",
    "\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244\u0245\u0005\u001c\u000f",
    "\u0002\u0245\u0247\u0003\u0002\u0002\u0002\u0246\u0227\u0003\u0002\u0002",
    "\u0002\u0246\u0236\u0003\u0002\u0002\u0002\u0247\u0249\u0003\u0002\u0002",
    "\u0002\u0248\u020f\u0003\u0002\u0002\u0002\u0248\u0226\u0003\u0002\u0002",
    "\u0002\u0249%\u0003\u0002\u0002\u0002\u024a\u024b\u0007}\u0002\u0002",
    "\u024b\u024c\u00078\u0002\u0002\u024c\u024d\b\u0014\u0001\u0002\u024d",
    "\u0251\u0005\u00acW\u0002\u024e\u024f\u0007\u0007\u0002\u0002\u024f",
    "\u0250\b\u0014\u0001\u0002\u0250\u0252\u0005\u00acW\u0002\u0251\u024e",
    "\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0257",
    "\u0003\u0002\u0002\u0002\u0253\u0254\u0007*\u0002\u0002\u0254\u0255",
    "\u0005\u00e6t\u0002\u0255\u0256\b\u0014\u0001\u0002\u0256\u0258\u0003",
    "\u0002\u0002\u0002\u0257\u0253\u0003\u0002\u0002\u0002\u0257\u0258\u0003",
    "\u0002\u0002\u0002\u0258\u025a\u0003\u0002\u0002\u0002\u0259\u025b\u0005",
    "^0\u0002\u025a\u0259\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002",
    "\u0002\u0002\u025b\u025d\u0003\u0002\u0002\u0002\u025c\u025e\u0005*",
    "\u0016\u0002\u025d\u025c\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002",
    "\u0002\u0002\u025e\'\u0003\u0002\u0002\u0002\u025f\u0260\u0007=\u0002",
    "\u0002\u0260\u0261\u0005\u00aeX\u0002\u0261\u0262\b\u0015\u0001\u0002",
    "\u0262\u0264\u0003\u0002\u0002\u0002\u0263\u025f\u0003\u0002\u0002\u0002",
    "\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0272\u0003\u0002\u0002\u0002",
    "\u0265\u0266\u0007a\u0002\u0002\u0266\u0267\u0007+\u0002\u0002\u0267",
    "\u0268\u0005\u00b6\\\u0002\u0268\u026f\b\u0015\u0001\u0002\u0269\u026a",
    "\u0007\u0005\u0002\u0002\u026a\u026b\u0005\u00b6\\\u0002\u026b\u026c",
    "\b\u0015\u0001\u0002\u026c\u026e\u0003\u0002\u0002\u0002\u026d\u0269",
    "\u0003\u0002\u0002\u0002\u026e\u0271\u0003\u0002\u0002\u0002\u026f\u026d",
    "\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0273",
    "\u0003\u0002\u0002\u0002\u0271\u026f\u0003\u0002\u0002\u0002\u0272\u0265",
    "\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0278",
    "\u0003\u0002\u0002\u0002\u0274\u0275\u0007b\u0002\u0002\u0275\u0276",
    "\u0005\u00aeX\u0002\u0276\u0277\b\u0015\u0001\u0002\u0277\u0279\u0003",
    "\u0002\u0002\u0002\u0278\u0274\u0003\u0002\u0002\u0002\u0278\u0279\u0003",
    "\u0002\u0002\u0002\u0279\u027d\u0003\u0002\u0002\u0002\u027a\u027b\u0005",
    "\u0098M\u0002\u027b\u027c\b\u0015\u0001\u0002\u027c\u027e\u0003\u0002",
    "\u0002\u0002\u027d\u027a\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002",
    "\u0002\u0002\u027e\u0282\u0003\u0002\u0002\u0002\u027f\u0280\u0005\u009a",
    "N\u0002\u0280\u0281\b\u0015\u0001\u0002\u0281\u0283\u0003\u0002\u0002",
    "\u0002\u0282\u027f\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002",
    "\u0002\u0283)\u0003\u0002\u0002\u0002\u0284\u0285\u0007\\\u0002\u0002",
    "\u0285\u0286\u0007\u0004\u0002\u0002\u0286\u028c\u0005,\u0017\u0002",
    "\u0287\u0288\u0007\u0005\u0002\u0002\u0288\u0289\b\u0016\u0001\u0002",
    "\u0289\u028b\u0005,\u0017\u0002\u028a\u0287\u0003\u0002\u0002\u0002",
    "\u028b\u028e\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002\u0002\u0002",
    "\u028c\u028d\u0003\u0002\u0002\u0002\u028d\u028f\u0003\u0002\u0002\u0002",
    "\u028e\u028c\u0003\u0002\u0002\u0002\u028f\u0290\u0007\u0006\u0002\u0002",
    "\u0290+\u0003\u0002\u0002\u0002\u0291\u0292\u0005\u00e6t\u0002\u0292",
    "\u0293\b\u0017\u0001\u0002\u0293-\u0003\u0002\u0002\u0002\u0294\u0295",
    "\u0007V\u0002\u0002\u0295\u0296\u0005\u00dep\u0002\u0296\u02ad\b\u0018",
    "\u0001\u0002\u0297\u0298\u0007>\u0002\u0002\u0298\u029c\b\u0018\u0001",
    "\u0002\u0299\u029b\u0005\u0016\f\u0002\u029a\u0299\u0003\u0002\u0002",
    "\u0002\u029b\u029e\u0003\u0002\u0002\u0002\u029c\u029a\u0003\u0002\u0002",
    "\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u02a3\u0003\u0002\u0002",
    "\u0002\u029e\u029c\u0003\u0002\u0002\u0002\u029f\u02a0\u0005v<\u0002",
    "\u02a0\u02a1\u0005\u001a\u000e\u0002\u02a1\u02a4\u0003\u0002\u0002\u0002",
    "\u02a2\u02a4\u00050\u0019\u0002\u02a3\u029f\u0003\u0002\u0002\u0002",
    "\u02a3\u02a2\u0003\u0002\u0002\u0002\u02a4\u02ae\u0003\u0002\u0002\u0002",
    "\u02a5\u02a9\b\u0018\u0001\u0002\u02a6\u02a8\u0005\u0016\f\u0002\u02a7",
    "\u02a6\u0003\u0002\u0002\u0002\u02a8\u02ab\u0003\u0002\u0002\u0002\u02a9",
    "\u02a7\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa",
    "\u02ac\u0003\u0002\u0002\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ac",
    "\u02ae\u00050\u0019\u0002\u02ad\u0297\u0003\u0002\u0002\u0002\u02ad",
    "\u02a5\u0003\u0002\u0002\u0002\u02ae/\u0003\u0002\u0002\u0002\u02af",
    "\u02b3\u0007\u0004\u0002\u0002\u02b0\u02b2\u0005R*\u0002\u02b1\u02b0",
    "\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003\u0002\u0002\u0002\u02b3\u02b1",
    "\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u02b6",
    "\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b6\u02c0",
    "\u0007\u0006\u0002\u0002\u02b7\u02b8\u0007B\u0002\u0002\u02b8\u02bc",
    "\u0007\u0004\u0002\u0002\u02b9\u02bb\u00054\u001b\u0002\u02ba\u02b9",
    "\u0003\u0002\u0002\u0002\u02bb\u02be\u0003\u0002\u0002\u0002\u02bc\u02ba",
    "\u0003\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bd\u02bf",
    "\u0003\u0002\u0002\u0002\u02be\u02bc\u0003\u0002\u0002\u0002\u02bf\u02c1",
    "\u0007\u0006\u0002\u0002\u02c0\u02b7\u0003\u0002\u0002\u0002\u02c0\u02c1",
    "\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02cf",
    "\u0005\u001c\u000f\u0002\u02c3\u02c4\u0007B\u0002\u0002\u02c4\u02c8",
    "\u0007\u0004\u0002\u0002\u02c5\u02c7\u00054\u001b\u0002\u02c6\u02c5",
    "\u0003\u0002\u0002\u0002\u02c7\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6",
    "\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cb",
    "\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cc",
    "\u0007\u0006\u0002\u0002\u02cc\u02cf\u0005\u001c\u000f\u0002\u02cd\u02cf",
    "\u0005\u001a\u000e\u0002\u02ce\u02af\u0003\u0002\u0002\u0002\u02ce\u02c3",
    "\u0003\u0002\u0002\u0002\u02ce\u02cd\u0003\u0002\u0002\u0002\u02cf1",
    "\u0003\u0002\u0002\u0002\u02d0\u02d1\u0007}\u0002\u0002\u02d1\u02d2",
    "\u0005\u00dep\u0002\u02d2\u02d5\b\u001a\u0001\u0002\u02d3\u02d4\u0007",
    ">\u0002\u0002\u02d4\u02d6\b\u001a\u0001\u0002\u02d5\u02d3\u0003\u0002",
    "\u0002\u0002\u02d5\u02d6\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002",
    "\u0002\u0002\u02d7\u02db\b\u001a\u0001\u0002\u02d8\u02da\u0005\u0016",
    "\f\u0002\u02d9\u02d8\u0003\u0002\u0002\u0002\u02da\u02dd\u0003\u0002",
    "\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002",
    "\u0002\u0002\u02dc\u0303\u0003\u0002\u0002\u0002\u02dd\u02db\u0003\u0002",
    "\u0002\u0002\u02de\u02df\u0007\u0004\u0002\u0002\u02df\u02e9\b\u001a",
    "\u0001\u0002\u02e0\u02e6\u0005`1\u0002\u02e1\u02e2\u0007\u0005\u0002",
    "\u0002\u02e2\u02e3\b\u001a\u0001\u0002\u02e3\u02e5\u0005`1\u0002\u02e4",
    "\u02e1\u0003\u0002\u0002\u0002\u02e5\u02e8\u0003\u0002\u0002\u0002\u02e6",
    "\u02e4\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7",
    "\u02ea\u0003\u0002\u0002\u0002\u02e8\u02e6\u0003\u0002\u0002\u0002\u02e9",
    "\u02e0\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002\u02ea",
    "\u02eb\u0003\u0002\u0002\u0002\u02eb\u02f5\u0007\u0006\u0002\u0002\u02ec",
    "\u02ed\u0007B\u0002\u0002\u02ed\u02f1\u0007\u0004\u0002\u0002\u02ee",
    "\u02f0\u00054\u001b\u0002\u02ef\u02ee\u0003\u0002\u0002\u0002\u02f0",
    "\u02f3\u0003\u0002\u0002\u0002\u02f1\u02ef\u0003\u0002\u0002\u0002\u02f1",
    "\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f4\u0003\u0002\u0002\u0002\u02f3",
    "\u02f1\u0003\u0002\u0002\u0002\u02f4\u02f6\u0007\u0006\u0002\u0002\u02f5",
    "\u02ec\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6",
    "\u02f7\u0003\u0002\u0002\u0002\u02f7\u0304\u0005\u001c\u000f\u0002\u02f8",
    "\u02f9\u0007B\u0002\u0002\u02f9\u02fd\u0007\u0004\u0002\u0002\u02fa",
    "\u02fc\u00054\u001b\u0002\u02fb\u02fa\u0003\u0002\u0002\u0002\u02fc",
    "\u02ff\u0003\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fd",
    "\u02fe\u0003\u0002\u0002\u0002\u02fe\u0300\u0003\u0002\u0002\u0002\u02ff",
    "\u02fd\u0003\u0002\u0002\u0002\u0300\u0301\u0007\u0006\u0002\u0002\u0301",
    "\u0304\u0005\u001c\u000f\u0002\u0302\u0304\u0005\u001a\u000e\u0002\u0303",
    "\u02de\u0003\u0002\u0002\u0002\u0303\u02f8\u0003\u0002\u0002\u0002\u0303",
    "\u0302\u0003\u0002\u0002\u0002\u03043\u0003\u0002\u0002\u0002\u0305",
    "\u0309\b\u001b\u0001\u0002\u0306\u0308\u0005\u0016\f\u0002\u0307\u0306",
    "\u0003\u0002\u0002\u0002\u0308\u030b\u0003\u0002\u0002\u0002\u0309\u0307",
    "\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u0326",
    "\u0003\u0002\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030c\u030d",
    "\u0007A\u0002\u0002\u030d\u030e\u0005\u00e6t\u0002\u030e\u0312\b\u001b",
    "\u0001\u0002\u030f\u0311\u0005\u0014\u000b\u0002\u0310\u030f\u0003\u0002",
    "\u0002\u0002\u0311\u0314\u0003\u0002\u0002\u0002\u0312\u0310\u0003\u0002",
    "\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0315\u0003\u0002",
    "\u0002\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0315\u0318\u0005h",
    "5\u0002\u0316\u0319\u0005z>\u0002\u0317\u0319\u0005\u001a\u000e\u0002",
    "\u0318\u0316\u0003\u0002\u0002\u0002\u0318\u0317\u0003\u0002\u0002\u0002",
    "\u0319\u0327\u0003\u0002\u0002\u0002\u031a\u031b\u0007`\u0002\u0002",
    "\u031b\u031c\u0005\u00e6t\u0002\u031c\u0320\b\u001b\u0001\u0002\u031d",
    "\u031f\u0005\u0014\u000b\u0002\u031e\u031d\u0003\u0002\u0002\u0002\u031f",
    "\u0322\u0003\u0002\u0002\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0320",
    "\u0321\u0003\u0002\u0002\u0002\u0321\u0323\u0003\u0002\u0002\u0002\u0322",
    "\u0320\u0003\u0002\u0002\u0002\u0323\u0324\u0005h5\u0002\u0324\u0325",
    "\u0005z>\u0002\u0325\u0327\u0003\u0002\u0002\u0002\u0326\u030c\u0003",
    "\u0002\u0002\u0002\u0326\u031a\u0003\u0002\u0002\u0002\u03275\u0003",
    "\u0002\u0002\u0002\u0328\u0329\u0007A\u0002\u0002\u0329\u032a\u0005",
    "\u00dep\u0002\u032a\u032e\b\u001c\u0001\u0002\u032b\u032d\u0005\u0014",
    "\u000b\u0002\u032c\u032b\u0003\u0002\u0002\u0002\u032d\u0330\u0003\u0002",
    "\u0002\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002",
    "\u0002\u0002\u032f\u0331\u0003\u0002\u0002\u0002\u0330\u032e\u0003\u0002",
    "\u0002\u0002\u0331\u0334\u0005h5\u0002\u0332\u0335\u0005z>\u0002\u0333",
    "\u0335\u0005\u001a\u000e\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0334",
    "\u0333\u0003\u0002\u0002\u0002\u0335\u0343\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0007`\u0002\u0002\u0337\u0338\u0005\u00dep\u0002\u0338\u033c",
    "\b\u001c\u0001\u0002\u0339\u033b\u0005\u0014\u000b\u0002\u033a\u0339",
    "\u0003\u0002\u0002\u0002\u033b\u033e\u0003\u0002\u0002\u0002\u033c\u033a",
    "\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u033f",
    "\u0003\u0002\u0002\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033f\u0340",
    "\u0005h5\u0002\u0340\u0341\u0005z>\u0002\u0341\u0343\u0003\u0002\u0002",
    "\u0002\u0342\u0328\u0003\u0002\u0002\u0002\u0342\u0336\u0003\u0002\u0002",
    "\u0002\u03437\u0003\u0002\u0002\u0002\u0344\u0345\u0007X\u0002\u0002",
    "\u0345\u0346\u0005\u00dep\u0002\u0346\u034a\b\u001d\u0001\u0002\u0347",
    "\u0349\u0005\u0014\u000b\u0002\u0348\u0347\u0003\u0002\u0002\u0002\u0349",
    "\u034c\u0003\u0002\u0002\u0002\u034a\u0348\u0003\u0002\u0002\u0002\u034a",
    "\u034b\u0003\u0002\u0002\u0002\u034b\u0372\u0003\u0002\u0002\u0002\u034c",
    "\u034a\u0003\u0002\u0002\u0002\u034d\u034e\u0005~@\u0002\u034e\u034f",
    "\u0005\u001c\u000f\u0002\u034f\u0373\u0003\u0002\u0002\u0002\u0350\u0370",
    "\u0007\u0007\u0002\u0002\u0351\u0352\b\u001d\u0001\u0002\u0352\u0367",
    "\u0005\u00dep\u0002\u0353\u0359\b\u001d\u0001\u0002\u0354\u0355\u0007",
    "\u0005\u0002\u0002\u0355\u0356\b\u001d\u0001\u0002\u0356\u0358\u0005",
    "v<\u0002\u0357\u0354\u0003\u0002\u0002\u0002\u0358\u035b\u0003\u0002",
    "\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002",
    "\u0002\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b\u0359\u0003\u0002",
    "\u0002\u0002\u035c\u035d\u0005~@\u0002\u035d\u035e\u0005\u001c\u000f",
    "\u0002\u035e\u0368\u0003\u0002\u0002\u0002\u035f\u0363\b\u001d\u0001",
    "\u0002\u0360\u0362\u0005\u0016\f\u0002\u0361\u0360\u0003\u0002\u0002",
    "\u0002\u0362\u0365\u0003\u0002\u0002\u0002\u0363\u0361\u0003\u0002\u0002",
    "\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0366\u0003\u0002\u0002",
    "\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0366\u0368\u0005\u001a\u000e",
    "\u0002\u0367\u0353\u0003\u0002\u0002\u0002\u0367\u035f\u0003\u0002\u0002",
    "\u0002\u0368\u0371\u0003\u0002\u0002\u0002\u0369\u036a\u0005~@\u0002",
    "\u036a\u036b\u0005\u001c\u000f\u0002\u036b\u0371\u0003\u0002\u0002\u0002",
    "\u036c\u036d\u0005&\u0014\u0002\u036d\u036e\b\u001d\u0001\u0002\u036e",
    "\u036f\u0005\u001c\u000f\u0002\u036f\u0371\u0003\u0002\u0002\u0002\u0370",
    "\u0351\u0003\u0002\u0002\u0002\u0370\u0369\u0003\u0002\u0002\u0002\u0370",
    "\u036c\u0003\u0002\u0002\u0002\u0371\u0373\u0003\u0002\u0002\u0002\u0372",
    "\u034d\u0003\u0002\u0002\u0002\u0372\u0350\u0003\u0002\u0002\u0002\u0373",
    "9\u0003\u0002\u0002\u0002\u0374\u037b\u0007H\u0002\u0002\u0375\u0378",
    "\u0007@\u0002\u0002\u0376\u0378\u0007\u0090\u0002\u0002\u0377\u0375",
    "\u0003\u0002\u0002\u0002\u0377\u0376\u0003\u0002\u0002\u0002\u0378\u0379",
    "\u0003\u0002\u0002\u0002\u0379\u037b\u0007V\u0002\u0002\u037a\u0374",
    "\u0003\u0002\u0002\u0002\u037a\u0377\u0003\u0002\u0002\u0002\u037b\u037c",
    "\u0003\u0002\u0002\u0002\u037c\u037d\u0005\u00dep\u0002\u037d\u0381",
    "\b\u001e\u0001\u0002\u037e\u0380\u0005\u0014\u000b\u0002\u037f\u037e",
    "\u0003\u0002\u0002\u0002\u0380\u0383\u0003\u0002\u0002\u0002\u0381\u037f",
    "\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0390",
    "\u0003\u0002\u0002\u0002\u0383\u0381\u0003\u0002\u0002\u0002\u0384\u038e",
    "\u0007\u0007\u0002\u0002\u0385\u038b\u0005v<\u0002\u0386\u0387\u0007",
    "\u0005\u0002\u0002\u0387\u0388\b\u001e\u0001\u0002\u0388\u038a\u0005",
    "v<\u0002\u0389\u0386\u0003\u0002\u0002\u0002\u038a\u038d\u0003\u0002",
    "\u0002\u0002\u038b\u0389\u0003\u0002\u0002\u0002\u038b\u038c\u0003\u0002",
    "\u0002\u0002\u038c\u038f\u0003\u0002\u0002\u0002\u038d\u038b\u0003\u0002",
    "\u0002\u0002\u038e\u0385\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002",
    "\u0002\u0002\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u0384\u0003\u0002",
    "\u0002\u0002\u0390\u0391\u0003\u0002\u0002\u0002\u0391\u0392\u0003\u0002",
    "\u0002\u0002\u0392\u0393\u0007\u0004\u0002\u0002\u0393\u0397\b\u001e",
    "\u0001\u0002\u0394\u0396\u0005T+\u0002\u0395\u0394\u0003\u0002\u0002",
    "\u0002\u0396\u0399\u0003\u0002\u0002\u0002\u0397\u0395\u0003\u0002\u0002",
    "\u0002\u0397\u0398\u0003\u0002\u0002\u0002\u0398\u039a\u0003\u0002\u0002",
    "\u0002\u0399\u0397\u0003\u0002\u0002\u0002\u039a\u03a4\u0007\u0006\u0002",
    "\u0002\u039b\u039c\u0007B\u0002\u0002\u039c\u03a0\u0007\u0004\u0002",
    "\u0002\u039d\u039f\u00054\u001b\u0002\u039e\u039d\u0003\u0002\u0002",
    "\u0002\u039f\u03a2\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002",
    "\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a3\u0003\u0002\u0002",
    "\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a3\u03a5\u0007\u0006\u0002",
    "\u0002\u03a4\u039b\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002",
    "\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03a7\u0005\u001c\u000f",
    "\u0002\u03a7;\u0003\u0002\u0002\u0002\u03a8\u03a9\u0007\u0086\u0002",
    "\u0002\u03a9\u03aa\u0005\u00dep\u0002\u03aa\u03ae\b\u001f\u0001\u0002",
    "\u03ab\u03ad\u0005\u0014\u000b\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002",
    "\u03ad\u03b0\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002",
    "\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u03b1\u0003\u0002\u0002\u0002",
    "\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1\u03b2\u0005|?\u0002\u03b2",
    "=\u0003\u0002\u0002\u0002\u03b3\u03b4\u0007\u0086\u0002\u0002\u03b4",
    "\u03b5\u0005\u00dep\u0002\u03b5\u03b6\b \u0001\u0002\u03b6\u03b7\u0005",
    "F$\u0002\u03b7?\u0003\u0002\u0002\u0002\u03b8\u03b9\u0007H\u0002\u0002",
    "\u03b9\u03ba\u0005\u00dep\u0002\u03ba\u03bb\b!\u0001\u0002\u03bb\u03bc",
    "\u0005F$\u0002\u03bcA\u0003\u0002\u0002\u0002\u03bd\u03be\u0007E\u0002",
    "\u0002\u03be\u03bf\u0005\u00dep\u0002\u03bf\u03c3\b\"\u0001\u0002\u03c0",
    "\u03c2\u0005\u0014\u000b\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2",
    "\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3",
    "\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c6\u0003\u0002\u0002\u0002\u03c5",
    "\u03c3\u0003\u0002\u0002\u0002\u03c6\u03c7\u0005|?\u0002\u03c7C\u0003",
    "\u0002\u0002\u0002\u03c8\u03c9\u0005\u00dep\u0002\u03c9\u03ca\b#\u0001",
    "\u0002\u03ca\u03cb\u0005F$\u0002\u03cbE\u0003\u0002\u0002\u0002\u03cc",
    "\u03cd\u0007>\u0002\u0002\u03cd\u03d1\b$\u0001\u0002\u03ce\u03d0\u0005",
    "\u0016\f\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03d0\u03d3\u0003",
    "\u0002\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003",
    "\u0002\u0002\u0002\u03d2\u03e1\u0003\u0002\u0002\u0002\u03d3\u03d1\u0003",
    "\u0002\u0002\u0002\u03d4\u03d5\u0005v<\u0002\u03d5\u03d6\u0005\u001a",
    "\u000e\u0002\u03d6\u03e2\u0003\u0002\u0002\u0002\u03d7\u03db\u0007\u0004",
    "\u0002\u0002\u03d8\u03da\u0005R*\u0002\u03d9\u03d8\u0003\u0002\u0002",
    "\u0002\u03da\u03dd\u0003\u0002\u0002\u0002\u03db\u03d9\u0003\u0002\u0002",
    "\u0002\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03de\u0003\u0002\u0002",
    "\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03de\u03df\u0007\u0006\u0002",
    "\u0002\u03df\u03e2\u0005\u001c\u000f\u0002\u03e0\u03e2\u0005\u001a\u000e",
    "\u0002\u03e1\u03d4\u0003\u0002\u0002\u0002\u03e1\u03d7\u0003\u0002\u0002",
    "\u0002\u03e1\u03e0\u0003\u0002\u0002\u0002\u03e2\u03f7\u0003\u0002\u0002",
    "\u0002\u03e3\u03e7\b$\u0001\u0002\u03e4\u03e6\u0005\u0016\f\u0002\u03e5",
    "\u03e4\u0003\u0002\u0002\u0002\u03e6\u03e9\u0003\u0002\u0002\u0002\u03e7",
    "\u03e5\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003\u0002\u0002\u0002\u03e8",
    "\u03f4\u0003\u0002\u0002\u0002\u03e9\u03e7\u0003\u0002\u0002\u0002\u03ea",
    "\u03ee\u0007\u0004\u0002\u0002\u03eb\u03ed\u0005R*\u0002\u03ec\u03eb",
    "\u0003\u0002\u0002\u0002\u03ed\u03f0\u0003\u0002\u0002\u0002\u03ee\u03ec",
    "\u0003\u0002\u0002\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef\u03f1",
    "\u0003\u0002\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f1\u03f2",
    "\u0007\u0006\u0002\u0002\u03f2\u03f5\u0005\u001c\u000f\u0002\u03f3\u03f5",
    "\u0005\u001a\u000e\u0002\u03f4\u03ea\u0003\u0002\u0002\u0002\u03f4\u03f3",
    "\u0003\u0002\u0002\u0002\u03f5\u03f7\u0003\u0002\u0002\u0002\u03f6\u03cc",
    "\u0003\u0002\u0002\u0002\u03f6\u03e3\u0003\u0002\u0002\u0002\u03f7G",
    "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0005\u00dep\u0002\u03f9\u03fc",
    "\b%\u0001\u0002\u03fa\u03fb\u0007>\u0002\u0002\u03fb\u03fd\b%\u0001",
    "\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002",
    "\u0002\u03fd\u03fe\u0003\u0002\u0002\u0002\u03fe\u0402\b%\u0001\u0002",
    "\u03ff\u0401\u0005\u0016\f\u0002\u0400\u03ff\u0003\u0002\u0002\u0002",
    "\u0401\u0404\u0003\u0002\u0002\u0002\u0402\u0400\u0003\u0002\u0002\u0002",
    "\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u0446\u0003\u0002\u0002\u0002",
    "\u0404\u0402\u0003\u0002\u0002\u0002\u0405\u0409\u0007\u0004\u0002\u0002",
    "\u0406\u0408\u0005J&\u0002\u0407\u0406\u0003\u0002\u0002\u0002\u0408",
    "\u040b\u0003\u0002\u0002\u0002\u0409\u0407\u0003\u0002\u0002\u0002\u0409",
    "\u040a\u0003\u0002\u0002\u0002\u040a\u040c\u0003\u0002\u0002\u0002\u040b",
    "\u0409\u0003\u0002\u0002\u0002\u040c\u0416\u0007\u0006\u0002\u0002\u040d",
    "\u040e\u0007B\u0002\u0002\u040e\u0412\u0007\u0004\u0002\u0002\u040f",
    "\u0411\u0005L\'\u0002\u0410\u040f\u0003\u0002\u0002\u0002\u0411\u0414",
    "\u0003\u0002\u0002\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0412\u0413",
    "\u0003\u0002\u0002\u0002\u0413\u0415\u0003\u0002\u0002\u0002\u0414\u0412",
    "\u0003\u0002\u0002\u0002\u0415\u0417\u0007\u0006\u0002\u0002\u0416\u040d",
    "\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002\u0002\u0002\u0417\u0418",
    "\u0003\u0002\u0002\u0002\u0418\u0447\u0005\u001c\u000f\u0002\u0419\u041a",
    "\u0007B\u0002\u0002\u041a\u041e\u0007\u0004\u0002\u0002\u041b\u041d",
    "\u0005L\'\u0002\u041c\u041b\u0003\u0002\u0002\u0002\u041d\u0420\u0003",
    "\u0002\u0002\u0002\u041e\u041c\u0003\u0002\u0002\u0002\u041e\u041f\u0003",
    "\u0002\u0002\u0002\u041f\u0421\u0003\u0002\u0002\u0002\u0420\u041e\u0003",
    "\u0002\u0002\u0002\u0421\u0422\u0007\u0006\u0002\u0002\u0422\u0447\u0005",
    "\u001c\u000f\u0002\u0423\u0424\u0007\b\u0002\u0002\u0424\u042a\u0005",
    "N(\u0002\u0425\u0426\u0007\u0005\u0002\u0002\u0426\u0427\b%\u0001\u0002",
    "\u0427\u0429\u0005N(\u0002\u0428\u0425\u0003\u0002\u0002\u0002\u0429",
    "\u042c\u0003\u0002\u0002\u0002\u042a\u0428\u0003\u0002\u0002\u0002\u042a",
    "\u042b\u0003\u0002\u0002\u0002\u042b\u042d\u0003\u0002\u0002\u0002\u042c",
    "\u042a\u0003\u0002\u0002\u0002\u042d\u0439\u0007\t\u0002\u0002\u042e",
    "\u042f\u0007\u007f\u0002\u0002\u042f\u0433\u0007\u0004\u0002\u0002\u0430",
    "\u0432\u0005J&\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0432\u0435",
    "\u0003\u0002\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0433\u0434",
    "\u0003\u0002\u0002\u0002\u0434\u0436\u0003\u0002\u0002\u0002\u0435\u0433",
    "\u0003\u0002\u0002\u0002\u0436\u0437\u0007\u0006\u0002\u0002\u0437\u043a",
    "\u0005\u001c\u000f\u0002\u0438\u043a\u0005\u001a\u000e\u0002\u0439\u042e",
    "\u0003\u0002\u0002\u0002\u0439\u0438\u0003\u0002\u0002\u0002\u043a\u0447",
    "\u0003\u0002\u0002\u0002\u043b\u043c\u0007\u007f\u0002\u0002\u043c\u0440",
    "\u0007\u0004\u0002\u0002\u043d\u043f\u0005J&\u0002\u043e\u043d\u0003",
    "\u0002\u0002\u0002\u043f\u0442\u0003\u0002\u0002\u0002\u0440\u043e\u0003",
    "\u0002\u0002\u0002\u0440\u0441\u0003\u0002\u0002\u0002\u0441\u0443\u0003",
    "\u0002\u0002\u0002\u0442\u0440\u0003\u0002\u0002\u0002\u0443\u0444\u0007",
    "\u0006\u0002\u0002\u0444\u0447\u0005\u001c\u000f\u0002\u0445\u0447\u0005",
    "\u001a\u000e\u0002\u0446\u0405\u0003\u0002\u0002\u0002\u0446\u0419\u0003",
    "\u0002\u0002\u0002\u0446\u0423\u0003\u0002\u0002\u0002\u0446\u043b\u0003",
    "\u0002\u0002\u0002\u0446\u0445\u0003\u0002\u0002\u0002\u0447I\u0003",
    "\u0002\u0002\u0002\u0448\u044c\b&\u0001\u0002\u0449\u044b\u0005\u0016",
    "\f\u0002\u044a\u0449\u0003\u0002\u0002\u0002\u044b\u044e\u0003\u0002",
    "\u0002\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002",
    "\u0002\u0002\u044d\u044f\u0003\u0002\u0002\u0002\u044e\u044c\u0003\u0002",
    "\u0002\u0002\u044f\u0450\u0005\u00e6t\u0002\u0450\u0454\b&\u0001\u0002",
    "\u0451\u0453\u0005\u0016\f\u0002\u0452\u0451\u0003\u0002\u0002\u0002",
    "\u0453\u0456\u0003\u0002\u0002\u0002\u0454\u0452\u0003\u0002\u0002\u0002",
    "\u0454\u0455\u0003\u0002\u0002\u0002\u0455\u0461\u0003\u0002\u0002\u0002",
    "\u0456\u0454\u0003\u0002\u0002\u0002\u0457\u045b\u0007\u0004\u0002\u0002",
    "\u0458\u045a\u0005J&\u0002\u0459\u0458\u0003\u0002\u0002\u0002\u045a",
    "\u045d\u0003\u0002\u0002\u0002\u045b\u0459\u0003\u0002\u0002\u0002\u045b",
    "\u045c\u0003\u0002\u0002\u0002\u045c\u045e\u0003\u0002\u0002\u0002\u045d",
    "\u045b\u0003\u0002\u0002\u0002\u045e\u045f\u0007\u0006\u0002\u0002\u045f",
    "\u0462\u0005\u001c\u000f\u0002\u0460\u0462\u0005\u001a\u000e\u0002\u0461",
    "\u0457\u0003\u0002\u0002\u0002\u0461\u0460\u0003\u0002\u0002\u0002\u0462",
    "K\u0003\u0002\u0002\u0002\u0463\u0467\b\'\u0001\u0002\u0464\u0466\u0005",
    "\u0016\f\u0002\u0465\u0464\u0003\u0002\u0002\u0002\u0466\u0469\u0003",
    "\u0002\u0002\u0002\u0467\u0465\u0003\u0002\u0002\u0002\u0467\u0468\u0003",
    "\u0002\u0002\u0002\u0468\u046a\u0003\u0002\u0002\u0002\u0469\u0467\u0003",
    "\u0002\u0002\u0002\u046a\u046b\u0005\u00e6t\u0002\u046b\u046f\b\'\u0001",
    "\u0002\u046c\u046e\u0005\u0016\f\u0002\u046d\u046c\u0003\u0002\u0002",
    "\u0002\u046e\u0471\u0003\u0002\u0002\u0002\u046f\u046d\u0003\u0002\u0002",
    "\u0002\u046f\u0470\u0003\u0002\u0002\u0002\u0470\u047e\u0003\u0002\u0002",
    "\u0002\u0471\u046f\u0003\u0002\u0002\u0002\u0472\u0473\u0007\b\u0002",
    "\u0002\u0473\u0479\u0005N(\u0002\u0474\u0475\u0007\u0005\u0002\u0002",
    "\u0475\u0476\b\'\u0001\u0002\u0476\u0478\u0005N(\u0002\u0477\u0474\u0003",
    "\u0002\u0002\u0002\u0478\u047b\u0003\u0002\u0002\u0002\u0479\u0477\u0003",
    "\u0002\u0002\u0002\u0479\u047a\u0003\u0002\u0002\u0002\u047a\u047c\u0003",
    "\u0002\u0002\u0002\u047b\u0479\u0003\u0002\u0002\u0002\u047c\u047d\u0007",
    "\t\u0002\u0002\u047d\u047f\u0003\u0002\u0002\u0002\u047e\u0472\u0003",
    "\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002\u0002\u047f\u048b\u0003",
    "\u0002\u0002\u0002\u0480\u0481\u0007\u007f\u0002\u0002\u0481\u0485\u0007",
    "\u0004\u0002\u0002\u0482\u0484\u0005J&\u0002\u0483\u0482\u0003\u0002",
    "\u0002\u0002\u0484\u0487\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002",
    "\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0488\u0003\u0002",
    "\u0002\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0488\u0489\u0007\u0006",
    "\u0002\u0002\u0489\u048c\u0005\u001c\u000f\u0002\u048a\u048c\u0005\u001a",
    "\u000e\u0002\u048b\u0480\u0003\u0002\u0002\u0002\u048b\u048a\u0003\u0002",
    "\u0002\u0002\u048cM\u0003\u0002\u0002\u0002\u048d\u0491\b(\u0001\u0002",
    "\u048e\u0490\u0005\u0016\f\u0002\u048f\u048e\u0003\u0002\u0002\u0002",
    "\u0490\u0493\u0003\u0002\u0002\u0002\u0491\u048f\u0003\u0002\u0002\u0002",
    "\u0491\u0492\u0003\u0002\u0002\u0002\u0492\u0494\u0003\u0002\u0002\u0002",
    "\u0493\u0491\u0003\u0002\u0002\u0002\u0494\u0495\u0005\u00e6t\u0002",
    "\u0495\u0499\b(\u0001\u0002\u0496\u0498\u0005\u0016\f\u0002\u0497\u0496",
    "\u0003\u0002\u0002\u0002\u0498\u049b\u0003\u0002\u0002\u0002\u0499\u0497",
    "\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049aO",
    "\u0003\u0002\u0002\u0002\u049b\u0499\u0003\u0002\u0002\u0002\u049c\u04a0",
    "\b)\u0001\u0002\u049d\u049f\u0005\u0016\f\u0002\u049e\u049d\u0003\u0002",
    "\u0002\u0002\u049f\u04a2\u0003\u0002\u0002\u0002\u04a0\u049e\u0003\u0002",
    "\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1\u04a3\u0003\u0002",
    "\u0002\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002\u04a3\u04a4\u0005\u00e6",
    "t\u0002\u04a4\u04a8\b)\u0001\u0002\u04a5\u04a7\u0005\u0016\f\u0002\u04a6",
    "\u04a5\u0003\u0002\u0002\u0002\u04a7\u04aa\u0003\u0002\u0002\u0002\u04a8",
    "\u04a6\u0003\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9",
    "\u04bf\u0003\u0002\u0002\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04ab",
    "\u04ac\u0007\u000b\u0002\u0002\u04ac\u04b6\b)\u0001\u0002\u04ad\u04ae",
    "\u0005\u00dco\u0002\u04ae\u04af\b)\u0001\u0002\u04af\u04b7\u0003\u0002",
    "\u0002\u0002\u04b0\u04b3\u0007\f\u0002\u0002\u04b1\u04b3\u0007\r\u0002",
    "\u0002\u04b2\u04b0\u0003\u0002\u0002\u0002\u04b2\u04b1\u0003\u0002\u0002",
    "\u0002\u04b3\u04b4\u0003\u0002\u0002\u0002\u04b4\u04b5\u0007?\u0002",
    "\u0002\u04b5\u04b7\b)\u0001\u0002\u04b6\u04ad\u0003\u0002\u0002\u0002",
    "\u04b6\u04b2\u0003\u0002\u0002\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002",
    "\u04b8\u04bc\b)\u0001\u0002\u04b9\u04bb\u0005\u0016\f\u0002\u04ba\u04b9",
    "\u0003\u0002\u0002\u0002\u04bb\u04be\u0003\u0002\u0002\u0002\u04bc\u04ba",
    "\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd\u04c0",
    "\u0003\u0002\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04bf\u04ab",
    "\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c1",
    "\u0003\u0002\u0002\u0002\u04c1\u04c2\u0005\u001a\u000e\u0002\u04c2Q",
    "\u0003\u0002\u0002\u0002\u04c3\u04c7\b*\u0001\u0002\u04c4\u04c6\u0005",
    "\u0016\f\u0002\u04c5\u04c4\u0003\u0002\u0002\u0002\u04c6\u04c9\u0003",
    "\u0002\u0002\u0002\u04c7\u04c5\u0003\u0002\u0002\u0002\u04c7\u04c8\u0003",
    "\u0002\u0002\u0002\u04c8\u04cd\u0003\u0002\u0002\u0002\u04c9\u04c7\u0003",
    "\u0002\u0002\u0002\u04ca\u04cb\u0007]\u0002\u0002\u04cb\u04ce\u0005",
    "\\/\u0002\u04cc\u04ce\u0005Z.\u0002\u04cd\u04ca\u0003\u0002\u0002\u0002",
    "\u04cd\u04cc\u0003\u0002\u0002\u0002\u04ceS\u0003\u0002\u0002\u0002",
    "\u04cf\u04d3\b+\u0001\u0002\u04d0\u04d2\u0005\u0016\f\u0002\u04d1\u04d0",
    "\u0003\u0002\u0002\u0002\u04d2\u04d5\u0003\u0002\u0002\u0002\u04d3\u04d1",
    "\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4\u04d6",
    "\u0003\u0002\u0002\u0002\u04d5\u04d3\u0003\u0002\u0002\u0002\u04d6\u04d7",
    "\u0005Z.\u0002\u04d7U\u0003\u0002\u0002\u0002\u04d8\u04d9\u0005\u00e6",
    "t\u0002\u04d9\u04f1\b,\u0001\u0002\u04da\u04eb\u0007\u0007\u0002\u0002",
    "\u04db\u04df\u0005\u0084C\u0002\u04dc\u04e0\u0005\u008cG\u0002\u04dd",
    "\u04e0\u0005\u008aF\u0002\u04de\u04e0\u0005\u00dep\u0002\u04df\u04dc",
    "\u0003\u0002\u0002\u0002\u04df\u04dd\u0003\u0002\u0002\u0002\u04df\u04de",
    "\u0003\u0002\u0002\u0002\u04e0\u04e2\u0003\u0002\u0002\u0002\u04e1\u04e3",
    "\u0005\u0086D\u0002\u04e2\u04e1\u0003\u0002\u0002\u0002\u04e2\u04e3",
    "\u0003\u0002\u0002\u0002\u04e3\u04ec\u0003\u0002\u0002\u0002\u04e4\u04e9",
    "\u0005\u0094K\u0002\u04e5\u04e6\u0007\u000b\u0002\u0002\u04e6\u04e7",
    "\u0005\u00b6\\\u0002\u04e7\u04e8\b,\u0001\u0002\u04e8\u04ea\u0003\u0002",
    "\u0002\u0002\u04e9\u04e5\u0003\u0002\u0002\u0002\u04e9\u04ea\u0003\u0002",
    "\u0002\u0002\u04ea\u04ec\u0003\u0002\u0002\u0002\u04eb\u04db\u0003\u0002",
    "\u0002\u0002\u04eb\u04e4\u0003\u0002\u0002\u0002\u04ec\u04f2\u0003\u0002",
    "\u0002\u0002\u04ed\u04ee\u0007\u000b\u0002\u0002\u04ee\u04ef\u0005\u00b6",
    "\\\u0002\u04ef\u04f0\b,\u0001\u0002\u04f0\u04f2\u0003\u0002\u0002\u0002",
    "\u04f1\u04da\u0003\u0002\u0002\u0002\u04f1\u04ed\u0003\u0002\u0002\u0002",
    "\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4\u0005\u001a\u000e\u0002",
    "\u04f4W\u0003\u0002\u0002\u0002\u04f5\u04f7\u0005\u0016\f\u0002\u04f6",
    "\u04f5\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003\u0002\u0002\u0002\u04f8",
    "\u04f6\u0003\u0002\u0002\u0002\u04f8\u04f9\u0003\u0002\u0002\u0002\u04f9",
    "\u04fa\u0003\u0002\u0002\u0002\u04fa\u04fb\b-\u0001\u0002\u04fbY\u0003",
    "\u0002\u0002\u0002\u04fc\u04fe\b.\u0001\u0002\u04fd\u04ff\u0007\u008d",
    "\u0002\u0002\u04fe\u04fd\u0003\u0002\u0002\u0002\u04fe\u04ff\u0003\u0002",
    "\u0002\u0002\u04ff\u0501\u0003\u0002\u0002\u0002\u0500\u0502\u00073",
    "\u0002\u0002\u0501\u0500\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002",
    "\u0002\u0002\u0502\u0504\u0003\u0002\u0002\u0002\u0503\u0505\u0007p",
    "\u0002\u0002\u0504\u0503\u0003\u0002\u0002\u0002\u0504\u0505\u0003\u0002",
    "\u0002\u0002\u0505\u0507\u0003\u0002\u0002\u0002\u0506\u0508\u0007S",
    "\u0002\u0002\u0507\u0506\u0003\u0002\u0002\u0002\u0507\u0508\u0003\u0002",
    "\u0002\u0002\u0508\u0509\u0003\u0002\u0002\u0002\u0509\u050a\u0005\u00e6",
    "t\u0002\u050a\u050e\b.\u0001\u0002\u050b\u050d\u0005\u0014\u000b\u0002",
    "\u050c\u050b\u0003\u0002\u0002\u0002\u050d\u0510\u0003\u0002\u0002\u0002",
    "\u050e\u050c\u0003\u0002\u0002\u0002\u050e\u050f\u0003\u0002\u0002\u0002",
    "\u050f\u05c7\u0003\u0002\u0002\u0002\u0510\u050e\u0003\u0002\u0002\u0002",
    "\u0511\u0516\u0005~@\u0002\u0512\u0513\u0005p9\u0002\u0513\u0514\u0005",
    "\u001a\u000e\u0002\u0514\u0517\u0003\u0002\u0002\u0002\u0515\u0517\u0005",
    "\u001c\u000f\u0002\u0516\u0512\u0003\u0002\u0002\u0002\u0516\u0515\u0003",
    "\u0002\u0002\u0002\u0517\u05c8\u0003\u0002\u0002\u0002\u0518\u05b9\u0007",
    "\u0007\u0002\u0002\u0519\u051b\u0005~@\u0002\u051a\u051c\u0005p9\u0002",
    "\u051b\u051a\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002",
    "\u051c\u051e\u0003\u0002\u0002\u0002\u051d\u051f\u0005X-\u0002\u051e",
    "\u051d\u0003\u0002\u0002\u0002\u051e\u051f\u0003\u0002\u0002\u0002\u051f",
    "\u0520\u0003\u0002\u0002\u0002\u0520\u0521\u0005\u001a\u000e\u0002\u0521",
    "\u05ba\u0003\u0002\u0002\u0002\u0522\u0539\u0005\u0084C\u0002\u0523",
    "\u0524\u0005~@\u0002\u0524\u0525\u0005\u001c\u000f\u0002\u0525\u053a",
    "\u0003\u0002\u0002\u0002\u0526\u0527\u0007x\u0002\u0002\u0527\u0528",
    "\b.\u0001\u0002\u0528\u0529\u0005\u0080A\u0002\u0529\u052a\u0005\u001c",
    "\u000f\u0002\u052a\u053a\u0003\u0002\u0002\u0002\u052b\u052c\u0007o",
    "\u0002\u0002\u052c\u052d\b.\u0001\u0002\u052d\u052e\u0005\u0080A\u0002",
    "\u052e\u052f\u0005\u001c\u000f\u0002\u052f\u053a\u0003\u0002\u0002\u0002",
    "\u0530\u0531\u0005\u008cG\u0002\u0531\u0532\u0005\u0088E\u0002\u0532",
    "\u053a\u0003\u0002\u0002\u0002\u0533\u0534\u0005\u008aF\u0002\u0534",
    "\u0535\u0005\u0088E\u0002\u0535\u053a\u0003\u0002\u0002\u0002\u0536",
    "\u0537\u0005\u00dep\u0002\u0537\u0538\u0005\u0088E\u0002\u0538\u053a",
    "\u0003\u0002\u0002\u0002\u0539\u0523\u0003\u0002\u0002\u0002\u0539\u0526",
    "\u0003\u0002\u0002\u0002\u0539\u052b\u0003\u0002\u0002\u0002\u0539\u0530",
    "\u0003\u0002\u0002\u0002\u0539\u0533\u0003\u0002\u0002\u0002\u0539\u0536",
    "\u0003\u0002\u0002\u0002\u053a\u05ba\u0003\u0002\u0002\u0002\u053b\u053c",
    "\u0007F\u0002\u0002\u053c\u053d\u00077\u0002\u0002\u053d\u0541\b.\u0001",
    "\u0002\u053e\u053f\u0007o\u0002\u0002\u053f\u0541\b.\u0001\u0002\u0540",
    "\u053b\u0003\u0002\u0002\u0002\u0540\u053e\u0003\u0002\u0002\u0002\u0541",
    "\u056e\u0003\u0002\u0002\u0002\u0542\u0544\u0005~@\u0002\u0543\u0545",
    "\u0005p9\u0002\u0544\u0543\u0003\u0002\u0002\u0002\u0544\u0545\u0003",
    "\u0002\u0002\u0002\u0545\u0547\u0003\u0002\u0002\u0002\u0546\u0548\u0005",
    "X-\u0002\u0547\u0546\u0003\u0002\u0002\u0002\u0547\u0548\u0003\u0002",
    "\u0002\u0002\u0548\u056f\u0003\u0002\u0002\u0002\u0549\u054b\u0005\u0092",
    "J\u0002\u054a\u054c\u0005p9\u0002\u054b\u054a\u0003\u0002\u0002\u0002",
    "\u054b\u054c\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002\u0002\u0002",
    "\u054d\u0551\b.\u0001\u0002\u054e\u0550\u0005\u0016\f\u0002\u054f\u054e",
    "\u0003\u0002\u0002\u0002\u0550\u0553\u0003\u0002\u0002\u0002\u0551\u054f",
    "\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u056f",
    "\u0003\u0002\u0002\u0002\u0553\u0551\u0003\u0002\u0002\u0002\u0554\u0556",
    "\u0005\u0094K\u0002\u0555\u0557\u0005p9\u0002\u0556\u0555\u0003\u0002",
    "\u0002\u0002\u0556\u0557\u0003\u0002\u0002\u0002\u0557\u0558\u0003\u0002",
    "\u0002\u0002\u0558\u055c\b.\u0001\u0002\u0559\u055b\u0005\u0016\f\u0002",
    "\u055a\u0559\u0003\u0002\u0002\u0002\u055b\u055e\u0003\u0002\u0002\u0002",
    "\u055c\u055a\u0003\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002\u0002",
    "\u055d\u056c\u0003\u0002\u0002\u0002\u055e\u055c\u0003\u0002\u0002\u0002",
    "\u055f\u0560\u0007W\u0002\u0002\u0560\u0561\u0007\u0004\u0002\u0002",
    "\u0561\u0565\b.\u0001\u0002\u0562\u0564\u0005P)\u0002\u0563\u0562\u0003",
    "\u0002\u0002\u0002\u0564\u0567\u0003\u0002\u0002\u0002\u0565\u0563\u0003",
    "\u0002\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002\u0566\u0568\u0003",
    "\u0002\u0002\u0002\u0567\u0565\u0003\u0002\u0002\u0002\u0568\u056a\u0007",
    "\u0006\u0002\u0002\u0569\u056b\u0005X-\u0002\u056a\u0569\u0003\u0002",
    "\u0002\u0002\u056a\u056b\u0003\u0002\u0002\u0002\u056b\u056d\u0003\u0002",
    "\u0002\u0002\u056c\u055f\u0003\u0002\u0002\u0002\u056c\u056d\u0003\u0002",
    "\u0002\u0002\u056d\u056f\u0003\u0002\u0002\u0002\u056e\u0542\u0003\u0002",
    "\u0002\u0002\u056e\u0549\u0003\u0002\u0002\u0002\u056e\u0554\u0003\u0002",
    "\u0002\u0002\u056f\u0570\u0003\u0002\u0002\u0002\u0570\u0571\u0005\u001a",
    "\u000e\u0002\u0571\u05ba\u0003\u0002\u0002\u0002\u0572\u0574\u0005\u0092",
    "J\u0002\u0573\u0575\u0005r:\u0002\u0574\u0573\u0003\u0002\u0002\u0002",
    "\u0574\u0575\u0003\u0002\u0002\u0002\u0575\u0576\u0003\u0002\u0002\u0002",
    "\u0576\u057a\b.\u0001\u0002\u0577\u0579\u0005\u0016\f\u0002\u0578\u0577",
    "\u0003\u0002\u0002\u0002\u0579\u057c\u0003\u0002\u0002\u0002\u057a\u0578",
    "\u0003\u0002\u0002\u0002\u057a\u057b\u0003\u0002\u0002\u0002\u057b\u057d",
    "\u0003\u0002\u0002\u0002\u057c\u057a\u0003\u0002\u0002\u0002\u057d\u057e",
    "\u0005\u001a\u000e\u0002\u057e\u05ba\u0003\u0002\u0002\u0002\u057f\u0580",
    "\u0007n\u0002\u0002\u0580\u0581\b.\u0001\u0002\u0581\u0582\u0005\u0094",
    "K\u0002\u0582\u0586\b.\u0001\u0002\u0583\u0585\u0005\u0016\f\u0002\u0584",
    "\u0583\u0003\u0002\u0002\u0002\u0585\u0588\u0003\u0002\u0002\u0002\u0586",
    "\u0584\u0003\u0002\u0002\u0002\u0586\u0587\u0003\u0002\u0002\u0002\u0587",
    "\u0591\u0003\u0002\u0002\u0002\u0588\u0586\u0003\u0002\u0002\u0002\u0589",
    "\u058a\u0005r:\u0002\u058a\u058e\b.\u0001\u0002\u058b\u058d\u0005\u0016",
    "\f\u0002\u058c\u058b\u0003\u0002\u0002\u0002\u058d\u0590\u0003\u0002",
    "\u0002\u0002\u058e\u058c\u0003\u0002\u0002\u0002\u058e\u058f\u0003\u0002",
    "\u0002\u0002\u058f\u0592\u0003\u0002\u0002\u0002\u0590\u058e\u0003\u0002",
    "\u0002\u0002\u0591\u0589\u0003\u0002\u0002\u0002\u0591\u0592\u0003\u0002",
    "\u0002\u0002\u0592\u0593\u0003\u0002\u0002\u0002\u0593\u0594\u0005\u001a",
    "\u000e\u0002\u0594\u05ba\u0003\u0002\u0002\u0002\u0595\u0596\u0005\u0094",
    "K\u0002\u0596\u059a\b.\u0001\u0002\u0597\u0599\u0005\u0016\f\u0002\u0598",
    "\u0597\u0003\u0002\u0002\u0002\u0599\u059c\u0003\u0002\u0002\u0002\u059a",
    "\u0598\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002\u0002\u059b",
    "\u05b5\u0003\u0002\u0002\u0002\u059c\u059a\u0003\u0002\u0002\u0002\u059d",
    "\u059e\u0007W\u0002\u0002\u059e\u059f\u0007\u0004\u0002\u0002\u059f",
    "\u05a3\b.\u0001\u0002\u05a0\u05a2\u0005P)\u0002\u05a1\u05a0\u0003\u0002",
    "\u0002\u0002\u05a2\u05a5\u0003\u0002\u0002\u0002\u05a3\u05a1\u0003\u0002",
    "\u0002\u0002\u05a3\u05a4\u0003\u0002\u0002\u0002\u05a4\u05a6\u0003\u0002",
    "\u0002\u0002\u05a5\u05a3\u0003\u0002\u0002\u0002\u05a6\u05a8\u0007\u0006",
    "\u0002\u0002\u05a7\u05a9\u0005r:\u0002\u05a8\u05a7\u0003\u0002\u0002",
    "\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9\u05ab\u0003\u0002\u0002",
    "\u0002\u05aa\u05ac\u0005X-\u0002\u05ab\u05aa\u0003\u0002\u0002\u0002",
    "\u05ab\u05ac\u0003\u0002\u0002\u0002\u05ac\u05b6\u0003\u0002\u0002\u0002",
    "\u05ad\u05ae\u0005r:\u0002\u05ae\u05b2\b.\u0001\u0002\u05af\u05b1\u0005",
    "\u0016\f\u0002\u05b0\u05af\u0003\u0002\u0002\u0002\u05b1\u05b4\u0003",
    "\u0002\u0002\u0002\u05b2\u05b0\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003",
    "\u0002\u0002\u0002\u05b3\u05b6\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003",
    "\u0002\u0002\u0002\u05b5\u059d\u0003\u0002\u0002\u0002\u05b5\u05ad\u0003",
    "\u0002\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u05b7\u0003",
    "\u0002\u0002\u0002\u05b7\u05b8\u0005\u001a\u000e\u0002\u05b8\u05ba\u0003",
    "\u0002\u0002\u0002\u05b9\u0519\u0003\u0002\u0002\u0002\u05b9\u0522\u0003",
    "\u0002\u0002\u0002\u05b9\u0540\u0003\u0002\u0002\u0002\u05b9\u0572\u0003",
    "\u0002\u0002\u0002\u05b9\u057f\u0003\u0002\u0002\u0002\u05b9\u0595\u0003",
    "\u0002\u0002\u0002\u05ba\u05c8\u0003\u0002\u0002\u0002\u05bb\u05bc\u0007",
    "\u000b\u0002\u0002\u05bc\u05bd\u0005\u00b6\\\u0002\u05bd\u05be\b.\u0001",
    "\u0002\u05be\u05c2\b.\u0001\u0002\u05bf\u05c1\u0005\u0016\f\u0002\u05c0",
    "\u05bf\u0003\u0002\u0002\u0002\u05c1\u05c4\u0003\u0002\u0002\u0002\u05c2",
    "\u05c0\u0003\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002\u0002\u0002\u05c3",
    "\u05c5\u0003\u0002\u0002\u0002\u05c4\u05c2\u0003\u0002\u0002\u0002\u05c5",
    "\u05c6\u0005\u001a\u000e\u0002\u05c6\u05c8\u0003\u0002\u0002\u0002\u05c7",
    "\u0511\u0003\u0002\u0002\u0002\u05c7\u0518\u0003\u0002\u0002\u0002\u05c7",
    "\u05bb\u0003\u0002\u0002\u0002\u05c8[\u0003\u0002\u0002\u0002\u05c9",
    "\u05cb\u0007S\u0002\u0002\u05ca\u05c9\u0003\u0002\u0002\u0002\u05ca",
    "\u05cb\u0003\u0002\u0002\u0002\u05cb\u05cc\u0003\u0002\u0002\u0002\u05cc",
    "\u05cd\u0005\u00e6t\u0002\u05cd\u05ce\b/\u0001\u0002\u05ce\u05cf\u0005",
    "F$\u0002\u05cf]\u0003\u0002\u0002\u0002\u05d0\u05d1\u0007\u0004\u0002",
    "\u0002\u05d1\u05df\b0\u0001\u0002\u05d2\u05d3\u0007\u000e\u0002\u0002",
    "\u05d3\u05d6\b0\u0001\u0002\u05d4\u05d6\u0005`1\u0002\u05d5\u05d2\u0003",
    "\u0002\u0002\u0002\u05d5\u05d4\u0003\u0002\u0002\u0002\u05d6\u05dc\u0003",
    "\u0002\u0002\u0002\u05d7\u05d8\u0007\u0005\u0002\u0002\u05d8\u05d9\b",
    "0\u0001\u0002\u05d9\u05db\u0005`1\u0002\u05da\u05d7\u0003\u0002\u0002",
    "\u0002\u05db\u05de\u0003\u0002\u0002\u0002\u05dc\u05da\u0003\u0002\u0002",
    "\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05e0\u0003\u0002\u0002",
    "\u0002\u05de\u05dc\u0003\u0002\u0002\u0002\u05df\u05d5\u0003\u0002\u0002",
    "\u0002\u05df\u05e0\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002\u0002",
    "\u0002\u05e1\u05e2\u0007\u0006\u0002\u0002\u05e2_\u0003\u0002\u0002",
    "\u0002\u05e3\u05e7\b1\u0001\u0002\u05e4\u05e6\u0005\u0018\r\u0002\u05e5",
    "\u05e4\u0003\u0002\u0002\u0002\u05e6\u05e9\u0003\u0002\u0002\u0002\u05e7",
    "\u05e5\u0003\u0002\u0002\u0002\u05e7\u05e8\u0003\u0002\u0002\u0002\u05e8",
    "\u05ea\u0003\u0002\u0002\u0002\u05e9\u05e7\u0003\u0002\u0002\u0002\u05ea",
    "\u05ec\b1\u0001\u0002\u05eb\u05ed\u0007\u008d\u0002\u0002\u05ec\u05eb",
    "\u0003\u0002\u0002\u0002\u05ec\u05ed\u0003\u0002\u0002\u0002\u05ed\u05ef",
    "\u0003\u0002\u0002\u0002\u05ee\u05f0\u00073\u0002\u0002\u05ef\u05ee",
    "\u0003\u0002\u0002\u0002\u05ef\u05f0\u0003\u0002\u0002\u0002\u05f0\u05f1",
    "\u0003\u0002\u0002\u0002\u05f1\u05f2\u0005b2\u0002\u05f2\u05f3\b1\u0001",
    "\u0002\u05f3a\u0003\u0002\u0002\u0002\u05f4\u05f5\u0005\u00b6\\\u0002",
    "\u05f5\u05fe\b2\u0001\u0002\u05f6\u05f7\u0007*\u0002\u0002\u05f7\u05f8",
    "\u0005\u00e6t\u0002\u05f8\u05f9\b2\u0001\u0002\u05f9\u05ff\u0003\u0002",
    "\u0002\u0002\u05fa\u05fb\u0005\u00e6t\u0002\u05fb\u05fc\b2\u0001\u0002",
    "\u05fc\u05ff\u0003\u0002\u0002\u0002\u05fd\u05ff\b2\u0001\u0002\u05fe",
    "\u05f6\u0003\u0002\u0002\u0002\u05fe\u05fa\u0003\u0002\u0002\u0002\u05fe",
    "\u05fd\u0003\u0002\u0002\u0002\u05ff\u0600\u0003\u0002\u0002\u0002\u0600",
    "\u0610\b2\u0001\u0002\u0601\u0602\b2\u0001\u0002\u0602\u0604\u0005d",
    "3\u0002\u0603\u0605\u0005*\u0016\u0002\u0604\u0603\u0003\u0002\u0002",
    "\u0002\u0604\u0605\u0003\u0002\u0002\u0002\u0605\u0611\u0003\u0002\u0002",
    "\u0002\u0606\u0607\b2\u0001\u0002\u0607\u060e\u0007\u0092\u0002\u0002",
    "\u0608\u060a\u0005d3\u0002\u0609\u060b\u0005*\u0016\u0002\u060a\u0609",
    "\u0003\u0002\u0002\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060f",
    "\u0003\u0002\u0002\u0002\u060c\u060d\u0007\u000e\u0002\u0002\u060d\u060f",
    "\b2\u0001\u0002\u060e\u0608\u0003\u0002\u0002\u0002\u060e\u060c\u0003",
    "\u0002\u0002\u0002\u060f\u0611\u0003\u0002\u0002\u0002\u0610\u0601\u0003",
    "\u0002\u0002\u0002\u0610\u0606\u0003\u0002\u0002\u0002\u0610\u0611\u0003",
    "\u0002\u0002\u0002\u0611\u061c\u0003\u0002\u0002\u0002\u0612\u0613\b",
    "2\u0001\u0002\u0613\u0615\u0005d3\u0002\u0614\u0616\u0005*\u0016\u0002",
    "\u0615\u0614\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002\u0002\u0002",
    "\u0616\u0617\u0003\u0002\u0002\u0002\u0617\u0618\u0007*\u0002\u0002",
    "\u0618\u0619\u0005\u00e6t\u0002\u0619\u061a\b2\u0001\u0002\u061a\u061c",
    "\u0003\u0002\u0002\u0002\u061b\u05f4\u0003\u0002\u0002\u0002\u061b\u0612",
    "\u0003\u0002\u0002\u0002\u061c\u061d\u0003\u0002\u0002\u0002\u061d\u0621",
    "\b2\u0001\u0002\u061e\u0620\u0005\u0014\u000b\u0002\u061f\u061e\u0003",
    "\u0002\u0002\u0002\u0620\u0623\u0003\u0002\u0002\u0002\u0621\u061f\u0003",
    "\u0002\u0002\u0002\u0621\u0622\u0003\u0002\u0002\u0002\u0622\u0645\u0003",
    "\u0002\u0002\u0002\u0623\u0621\u0003\u0002\u0002\u0002\u0624\u0643\u0007",
    "\u0007\u0002\u0002\u0625\u0626\u0007~\u0002\u0002\u0626\u0627\u0007",
    "\u0085\u0002\u0002\u0627\u0628\b2\u0001\u0002\u0628\u0631\u0005\u00de",
    "p\u0002\u0629\u0632\u0005\u0086D\u0002\u062a\u062e\b2\u0001\u0002\u062b",
    "\u062d\u0005\u0016\f\u0002\u062c\u062b\u0003\u0002\u0002\u0002\u062d",
    "\u0630\u0003\u0002\u0002\u0002\u062e\u062c\u0003\u0002\u0002\u0002\u062e",
    "\u062f\u0003\u0002\u0002\u0002\u062f\u0632\u0003\u0002\u0002\u0002\u0630",
    "\u062e\u0003\u0002\u0002\u0002\u0631\u0629\u0003\u0002\u0002\u0002\u0631",
    "\u062a\u0003\u0002\u0002\u0002\u0632\u0644\u0003\u0002\u0002\u0002\u0633",
    "\u0634\u0005\u0092J\u0002\u0634\u0638\b2\u0001\u0002\u0635\u0637\u0005",
    "\u0016\f\u0002\u0636\u0635\u0003\u0002\u0002\u0002\u0637\u063a\u0003",
    "\u0002\u0002\u0002\u0638\u0636\u0003\u0002\u0002\u0002\u0638\u0639\u0003",
    "\u0002\u0002\u0002\u0639\u0644\u0003\u0002\u0002\u0002\u063a\u0638\u0003",
    "\u0002\u0002\u0002\u063b\u063c\u0005\u0094K\u0002\u063c\u0640\b2\u0001",
    "\u0002\u063d\u063f\u0005\u0016\f\u0002\u063e\u063d\u0003\u0002\u0002",
    "\u0002\u063f\u0642\u0003\u0002\u0002\u0002\u0640\u063e\u0003\u0002\u0002",
    "\u0002\u0640\u0641\u0003\u0002\u0002\u0002\u0641\u0644\u0003\u0002\u0002",
    "\u0002\u0642\u0640\u0003\u0002\u0002\u0002\u0643\u0625\u0003\u0002\u0002",
    "\u0002\u0643\u0633\u0003\u0002\u0002\u0002\u0643\u063b\u0003\u0002\u0002",
    "\u0002\u0644\u0646\u0003\u0002\u0002\u0002\u0645\u0624\u0003\u0002\u0002",
    "\u0002\u0645\u0646\u0003\u0002\u0002\u0002\u0646c\u0003\u0002\u0002",
    "\u0002\u0647\u0648\u0007\u0004\u0002\u0002\u0648\u0656\b3\u0001\u0002",
    "\u0649\u064a\u0007\u000e\u0002\u0002\u064a\u064d\b3\u0001\u0002\u064b",
    "\u064d\u0005f4\u0002\u064c\u0649\u0003\u0002\u0002\u0002\u064c\u064b",
    "\u0003\u0002\u0002\u0002\u064d\u0653\u0003\u0002\u0002\u0002\u064e\u064f",
    "\u0007\u0005\u0002\u0002\u064f\u0650\b3\u0001\u0002\u0650\u0652\u0005",
    "f4\u0002\u0651\u064e\u0003\u0002\u0002\u0002\u0652\u0655\u0003\u0002",
    "\u0002\u0002\u0653\u0651\u0003\u0002\u0002\u0002\u0653\u0654\u0003\u0002",
    "\u0002\u0002\u0654\u0657\u0003\u0002\u0002\u0002\u0655\u0653\u0003\u0002",
    "\u0002\u0002\u0656\u064c\u0003\u0002\u0002\u0002\u0656\u0657\u0003\u0002",
    "\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002\u0658\u0659\u0007\u0006",
    "\u0002\u0002\u0659e\u0003\u0002\u0002\u0002\u065a\u065e\b4\u0001\u0002",
    "\u065b\u065d\u0005\u0018\r\u0002\u065c\u065b\u0003\u0002\u0002\u0002",
    "\u065d\u0660\u0003\u0002\u0002\u0002\u065e\u065c\u0003\u0002\u0002\u0002",
    "\u065e\u065f\u0003\u0002\u0002\u0002\u065f\u0661\u0003\u0002\u0002\u0002",
    "\u0660\u065e\u0003\u0002\u0002\u0002\u0661\u0662\u0005b2\u0002\u0662",
    "g\u0003\u0002\u0002\u0002\u0663\u066d\u0007\b\u0002\u0002\u0664\u066a",
    "\u0005j6\u0002\u0665\u0666\u0007\u0005\u0002\u0002\u0666\u0667\b5\u0001",
    "\u0002\u0667\u0669\u0005j6\u0002\u0668\u0665\u0003\u0002\u0002\u0002",
    "\u0669\u066c\u0003\u0002\u0002\u0002\u066a\u0668\u0003\u0002\u0002\u0002",
    "\u066a\u066b\u0003\u0002\u0002\u0002\u066b\u066e\u0003\u0002\u0002\u0002",
    "\u066c\u066a\u0003\u0002\u0002\u0002\u066d\u0664\u0003\u0002\u0002\u0002",
    "\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u066f\u0003\u0002\u0002\u0002",
    "\u066f\u0670\u0007\t\u0002\u0002\u0670i\u0003\u0002\u0002\u0002\u0671",
    "\u0675\b6\u0001\u0002\u0672\u0674\u0005\u0016\f\u0002\u0673\u0672\u0003",
    "\u0002\u0002\u0002\u0674\u0677\u0003\u0002\u0002\u0002\u0675\u0673\u0003",
    "\u0002\u0002\u0002\u0675\u0676\u0003\u0002\u0002\u0002\u0676\u0678\u0003",
    "\u0002\u0002\u0002\u0677\u0675\u0003\u0002\u0002\u0002\u0678\u0679\u0005",
    "\u00e6t\u0002\u0679\u067d\b6\u0001\u0002\u067a\u067c\u0005\u0014\u000b",
    "\u0002\u067b\u067a\u0003\u0002\u0002\u0002\u067c\u067f\u0003\u0002\u0002",
    "\u0002\u067d\u067b\u0003\u0002\u0002\u0002\u067d\u067e\u0003\u0002\u0002",
    "\u0002\u067e\u0680\u0003\u0002\u0002\u0002\u067f\u067d\u0003\u0002\u0002",
    "\u0002\u0680\u0685\u0005x=\u0002\u0681\u0682\u0007P\u0002\u0002\u0682",
    "\u0683\u0005\u00b6\\\u0002\u0683\u0684\b6\u0001\u0002\u0684\u0686\u0003",
    "\u0002\u0002\u0002\u0685\u0681\u0003\u0002\u0002\u0002\u0685\u0686\u0003",
    "\u0002\u0002\u0002\u0686\u0687\u0003\u0002\u0002\u0002\u0687\u068b\b",
    "6\u0001\u0002\u0688\u068a\u0005\u0016\f\u0002\u0689\u0688\u0003\u0002",
    "\u0002\u0002\u068a\u068d\u0003\u0002\u0002\u0002\u068b\u0689\u0003\u0002",
    "\u0002\u0002\u068b\u068c\u0003\u0002\u0002\u0002\u068ck\u0003\u0002",
    "\u0002\u0002\u068d\u068b\u0003\u0002\u0002\u0002\u068e\u0698\u0007\b",
    "\u0002\u0002\u068f\u0695\u0005n8\u0002\u0690\u0691\u0007\u0005\u0002",
    "\u0002\u0691\u0692\b7\u0001\u0002\u0692\u0694\u0005n8\u0002\u0693\u0690",
    "\u0003\u0002\u0002\u0002\u0694\u0697\u0003\u0002\u0002\u0002\u0695\u0693",
    "\u0003\u0002\u0002\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696\u0699",
    "\u0003\u0002\u0002\u0002\u0697\u0695\u0003\u0002\u0002\u0002\u0698\u068f",
    "\u0003\u0002\u0002\u0002\u0698\u0699\u0003\u0002\u0002\u0002\u0699\u069a",
    "\u0003\u0002\u0002\u0002\u069a\u069b\u0007\t\u0002\u0002\u069bm\u0003",
    "\u0002\u0002\u0002\u069c\u06a0\b8\u0001\u0002\u069d\u069f\u0005\u0016",
    "\f\u0002\u069e\u069d\u0003\u0002\u0002\u0002\u069f\u06a2\u0003\u0002",
    "\u0002\u0002\u06a0\u069e\u0003\u0002\u0002\u0002\u06a0\u06a1\u0003\u0002",
    "\u0002\u0002\u06a1\u06a3\u0003\u0002\u0002\u0002\u06a2\u06a0\u0003\u0002",
    "\u0002\u0002\u06a3\u06a4\u0005\u00e6t\u0002\u06a4\u06a8\b8\u0001\u0002",
    "\u06a5\u06a7\u0005\u0014\u000b\u0002\u06a6\u06a5\u0003\u0002\u0002\u0002",
    "\u06a7\u06aa\u0003\u0002\u0002\u0002\u06a8\u06a6\u0003\u0002\u0002\u0002",
    "\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06ab\u0003\u0002\u0002\u0002",
    "\u06aa\u06a8\u0003\u0002\u0002\u0002\u06ab\u06b0\u0005x=\u0002\u06ac",
    "\u06ad\u0007P\u0002\u0002\u06ad\u06ae\u0005\u00b6\\\u0002\u06ae\u06af",
    "\b8\u0001\u0002\u06af\u06b1\u0003\u0002\u0002\u0002\u06b0\u06ac\u0003",
    "\u0002\u0002\u0002\u06b0\u06b1\u0003\u0002\u0002\u0002\u06b1o\u0003",
    "\u0002\u0002\u0002\u06b2\u06b3\u00075\u0002\u0002\u06b3\u06b4\u0007",
    "6\u0002\u0002\u06b4\u06b8\b9\u0001\u0002\u06b5\u06b6\u00076\u0002\u0002",
    "\u06b6\u06b8\b9\u0001\u0002\u06b7\u06b2\u0003\u0002\u0002\u0002\u06b7",
    "\u06b5\u0003\u0002\u0002\u0002\u06b8q\u0003\u0002\u0002\u0002\u06b9",
    "\u06be\u0005p9\u0002\u06ba\u06bb\u0007P\u0002\u0002\u06bb\u06bc\u0005",
    "\u00b6\\\u0002\u06bc\u06bd\b:\u0001\u0002\u06bd\u06bf\u0003\u0002\u0002",
    "\u0002\u06be\u06ba\u0003\u0002\u0002\u0002\u06be\u06bf\u0003\u0002\u0002",
    "\u0002\u06bf\u06cb\u0003\u0002\u0002\u0002\u06c0\u06c1\u0007P\u0002",
    "\u0002\u06c1\u06c2\u0005\u00b6\\\u0002\u06c2\u06c3\b:\u0001\u0002\u06c3",
    "\u06c5\u0003\u0002\u0002\u0002\u06c4\u06c6\u0005p9\u0002\u06c5\u06c4",
    "\u0003\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6\u06cb",
    "\u0003\u0002\u0002\u0002\u06c7\u06c8\u0007\u000b\u0002\u0002\u06c8\u06c9",
    "\b:\u0001\u0002\u06c9\u06cb\u0005\u00b6\\\u0002\u06ca\u06b9\u0003\u0002",
    "\u0002\u0002\u06ca\u06c0\u0003\u0002\u0002\u0002\u06ca\u06c7\u0003\u0002",
    "\u0002\u0002\u06cbs\u0003\u0002\u0002\u0002\u06cc\u06cd\u0007\u0089",
    "\u0002\u0002\u06cd\u06ce\u0005\u00dep\u0002\u06ce\u06d2\b;\u0001\u0002",
    "\u06cf\u06d1\u0005\u0014\u000b\u0002\u06d0\u06cf\u0003\u0002\u0002\u0002",
    "\u06d1\u06d4\u0003\u0002\u0002\u0002\u06d2\u06d0\u0003\u0002\u0002\u0002",
    "\u06d2\u06d3\u0003\u0002\u0002\u0002\u06d3\u06e0\u0003\u0002\u0002\u0002",
    "\u06d4\u06d2\u0003\u0002\u0002\u0002\u06d5\u06e1\u0005l7\u0002\u06d6",
    "\u06d7\t\u0002\u0002\u0002\u06d7\u06d8\u0007|\u0002\u0002\u06d8\u06dd",
    "\u0005n8\u0002\u06d9\u06da\u0007\u0005\u0002\u0002\u06da\u06dc\u0005",
    "n8\u0002\u06db\u06d9\u0003\u0002\u0002\u0002\u06dc\u06df\u0003\u0002",
    "\u0002\u0002\u06dd\u06db\u0003\u0002\u0002\u0002\u06dd\u06de\u0003\u0002",
    "\u0002\u0002\u06de\u06e1\u0003\u0002\u0002\u0002\u06df\u06dd\u0003\u0002",
    "\u0002\u0002\u06e0\u06d5\u0003\u0002\u0002\u0002\u06e0\u06d6\u0003\u0002",
    "\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1\u06e2\u0003\u0002",
    "\u0002\u0002\u06e2\u06e3\u0007*\u0002\u0002\u06e3\u06e4\u0005\u0096",
    "L\u0002\u06e4\u06e5\b;\u0001\u0002\u06e5\u06e6\u0005\u001a\u000e\u0002",
    "\u06e6u\u0003\u0002\u0002\u0002\u06e7\u06e8\u0005\u00dep\u0002\u06e8",
    "\u06e9\b<\u0001\u0002\u06e9w\u0003\u0002\u0002\u0002\u06ea\u0708\u0005",
    "~@\u0002\u06eb\u0705\u0007\u0007\u0002\u0002\u06ec\u06ee\u0005~@\u0002",
    "\u06ed\u06ef\u0005p9\u0002\u06ee\u06ed\u0003\u0002\u0002\u0002\u06ee",
    "\u06ef\u0003\u0002\u0002\u0002\u06ef\u0706\u0003\u0002\u0002\u0002\u06f0",
    "\u0706\u0005\u0082B\u0002\u06f1\u06f3\u0005\u0092J\u0002\u06f2\u06f4",
    "\u0005p9\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003",
    "\u0002\u0002\u0002\u06f4\u0706\u0003\u0002\u0002\u0002\u06f5\u06f7\u0005",
    "\u0094K\u0002\u06f6\u06f8\u0005p9\u0002\u06f7\u06f6\u0003\u0002\u0002",
    "\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u0703\u0003\u0002\u0002",
    "\u0002\u06f9\u06fa\u0007W\u0002\u0002\u06fa\u06fb\u0007\u0004\u0002",
    "\u0002\u06fb\u06ff\b=\u0001\u0002\u06fc\u06fe\u0005P)\u0002\u06fd\u06fc",
    "\u0003\u0002\u0002\u0002\u06fe\u0701\u0003\u0002\u0002\u0002\u06ff\u06fd",
    "\u0003\u0002\u0002\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700\u0702",
    "\u0003\u0002\u0002\u0002\u0701\u06ff\u0003\u0002\u0002\u0002\u0702\u0704",
    "\u0007\u0006\u0002\u0002\u0703\u06f9\u0003\u0002\u0002\u0002\u0703\u0704",
    "\u0003\u0002\u0002\u0002\u0704\u0706\u0003\u0002\u0002\u0002\u0705\u06ec",
    "\u0003\u0002\u0002\u0002\u0705\u06f0\u0003\u0002\u0002\u0002\u0705\u06f1",
    "\u0003\u0002\u0002\u0002\u0705\u06f5\u0003\u0002\u0002\u0002\u0706\u0708",
    "\u0003\u0002\u0002\u0002\u0707\u06ea\u0003\u0002\u0002\u0002\u0707\u06eb",
    "\u0003\u0002\u0002\u0002\u0708y\u0003\u0002\u0002\u0002\u0709\u070a",
    "\u0007\u007f\u0002\u0002\u070a\u0725\b>\u0001\u0002\u070b\u070d\u0005",
    "~@\u0002\u070c\u070e\u0005p9\u0002\u070d\u070c\u0003\u0002\u0002\u0002",
    "\u070d\u070e\u0003\u0002\u0002\u0002\u070e\u0726\u0003\u0002\u0002\u0002",
    "\u070f\u0726\u0005\u0082B\u0002\u0710\u0712\u0005\u0092J\u0002\u0711",
    "\u0713\u0005p9\u0002\u0712\u0711\u0003\u0002\u0002\u0002\u0712\u0713",
    "\u0003\u0002\u0002\u0002\u0713\u0726\u0003\u0002\u0002\u0002\u0714\u0716",
    "\u0005\u0094K\u0002\u0715\u0717\u0005p9\u0002\u0716\u0715\u0003\u0002",
    "\u0002\u0002\u0716\u0717\u0003\u0002\u0002\u0002\u0717\u0723\u0003\u0002",
    "\u0002\u0002\u0718\u0719\u0007W\u0002\u0002\u0719\u071a\u0007\u0004",
    "\u0002\u0002\u071a\u071e\b>\u0001\u0002\u071b\u071d\u0005P)\u0002\u071c",
    "\u071b\u0003\u0002\u0002\u0002\u071d\u0720\u0003\u0002\u0002\u0002\u071e",
    "\u071c\u0003\u0002\u0002\u0002\u071e\u071f\u0003\u0002\u0002\u0002\u071f",
    "\u0721\u0003\u0002\u0002\u0002\u0720\u071e\u0003\u0002\u0002\u0002\u0721",
    "\u0724\u0007\u0006\u0002\u0002\u0722\u0724\u0005X-\u0002\u0723\u0718",
    "\u0003\u0002\u0002\u0002\u0723\u0722\u0003\u0002\u0002\u0002\u0723\u0724",
    "\u0003\u0002\u0002\u0002\u0724\u0726\u0003\u0002\u0002\u0002\u0725\u070b",
    "\u0003\u0002\u0002\u0002\u0725\u070f\u0003\u0002\u0002\u0002\u0725\u0710",
    "\u0003\u0002\u0002\u0002\u0725\u0714\u0003\u0002\u0002\u0002\u0726\u0727",
    "\u0003\u0002\u0002\u0002\u0727\u0728\u0005\u001a\u000e\u0002\u0728{",
    "\u0003\u0002\u0002\u0002\u0729\u072a\u0005~@\u0002\u072a\u072b\u0005",
    "\u001c\u000f\u0002\u072b\u07e8\u0003\u0002\u0002\u0002\u072c\u07e5\u0007",
    "\u0007\u0002\u0002\u072d\u072e\u0005~@\u0002\u072e\u072f\u0005\u001c",
    "\u000f\u0002\u072f\u07e6\u0003\u0002\u0002\u0002\u0730\u0734\u0005\u0084",
    "C\u0002\u0731\u0735\u0005\u008cG\u0002\u0732\u0735\u0005\u008aF\u0002",
    "\u0733\u0735\u0005\u00dep\u0002\u0734\u0731\u0003\u0002\u0002\u0002",
    "\u0734\u0732\u0003\u0002\u0002\u0002\u0734\u0733\u0003\u0002\u0002\u0002",
    "\u0735\u0737\u0003\u0002\u0002\u0002\u0736\u0738\u0005\u0086D\u0002",
    "\u0737\u0736\u0003\u0002\u0002\u0002\u0737\u0738\u0003\u0002\u0002\u0002",
    "\u0738\u0739\u0003\u0002\u0002\u0002\u0739\u073a\u0005\u001a\u000e\u0002",
    "\u073a\u07e6\u0003\u0002\u0002\u0002\u073b\u073c\u0007F\u0002\u0002",
    "\u073c\u073d\u00077\u0002\u0002\u073d\u0741\b?\u0001\u0002\u073e\u073f",
    "\u0007o\u0002\u0002\u073f\u0741\b?\u0001\u0002\u0740\u073b\u0003\u0002",
    "\u0002\u0002\u0740\u073e\u0003\u0002\u0002\u0002\u0741\u076e\u0003\u0002",
    "\u0002\u0002\u0742\u0744\u0005~@\u0002\u0743\u0745\u0005p9\u0002\u0744",
    "\u0743\u0003\u0002\u0002\u0002\u0744\u0745\u0003\u0002\u0002\u0002\u0745",
    "\u0746\u0003\u0002\u0002\u0002\u0746\u0747\u0005\u001c\u000f\u0002\u0747",
    "\u076f\u0003\u0002\u0002\u0002\u0748\u074a\u0005\u0092J\u0002\u0749",
    "\u074b\u0005p9\u0002\u074a\u0749\u0003\u0002\u0002\u0002\u074a\u074b",
    "\u0003\u0002\u0002\u0002\u074b\u074c\u0003\u0002\u0002\u0002\u074c\u0750",
    "\b?\u0001\u0002\u074d\u074f\u0005\u0016\f\u0002\u074e\u074d\u0003\u0002",
    "\u0002\u0002\u074f\u0752\u0003\u0002\u0002\u0002\u0750\u074e\u0003\u0002",
    "\u0002\u0002\u0750\u0751\u0003\u0002\u0002\u0002\u0751\u0753\u0003\u0002",
    "\u0002\u0002\u0752\u0750\u0003\u0002\u0002\u0002\u0753\u0754\u0005\u001a",
    "\u000e\u0002\u0754\u076f\u0003\u0002\u0002\u0002\u0755\u0757\u0005\u0094",
    "K\u0002\u0756\u0758\u0005p9\u0002\u0757\u0756\u0003\u0002\u0002\u0002",
    "\u0757\u0758\u0003\u0002\u0002\u0002\u0758\u0759\u0003\u0002\u0002\u0002",
    "\u0759\u075d\b?\u0001\u0002\u075a\u075c\u0005\u0016\f\u0002\u075b\u075a",
    "\u0003\u0002\u0002\u0002\u075c\u075f\u0003\u0002\u0002\u0002\u075d\u075b",
    "\u0003\u0002\u0002\u0002\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u076c",
    "\u0003\u0002\u0002\u0002\u075f\u075d\u0003\u0002\u0002\u0002\u0760\u0761",
    "\u0007W\u0002\u0002\u0761\u0762\u0007\u0004\u0002\u0002\u0762\u0766",
    "\b?\u0001\u0002\u0763\u0765\u0005P)\u0002\u0764\u0763\u0003\u0002\u0002",
    "\u0002\u0765\u0768\u0003\u0002\u0002\u0002\u0766\u0764\u0003\u0002\u0002",
    "\u0002\u0766\u0767\u0003\u0002\u0002\u0002\u0767\u0769\u0003\u0002\u0002",
    "\u0002\u0768\u0766\u0003\u0002\u0002\u0002\u0769\u076a\u0007\u0006\u0002",
    "\u0002\u076a\u076d\u0005\u001c\u000f\u0002\u076b\u076d\u0005\u001a\u000e",
    "\u0002\u076c\u0760\u0003\u0002\u0002\u0002\u076c\u076b\u0003\u0002\u0002",
    "\u0002\u076d\u076f\u0003\u0002\u0002\u0002\u076e\u0742\u0003\u0002\u0002",
    "\u0002\u076e\u0748\u0003\u0002\u0002\u0002\u076e\u0755\u0003\u0002\u0002",
    "\u0002\u076f\u07e6\u0003\u0002\u0002\u0002\u0770\u0771\u0005\u0092J",
    "\u0002\u0771\u0775\b?\u0001\u0002\u0772\u0774\u0005\u0016\f\u0002\u0773",
    "\u0772\u0003\u0002\u0002\u0002\u0774\u0777\u0003\u0002\u0002\u0002\u0775",
    "\u0773\u0003\u0002\u0002\u0002\u0775\u0776\u0003\u0002\u0002\u0002\u0776",
    "\u0778\u0003\u0002\u0002\u0002\u0777\u0775\u0003\u0002\u0002\u0002\u0778",
    "\u0779\u0005\u001a\u000e\u0002\u0779\u07e6\u0003\u0002\u0002\u0002\u077a",
    "\u077b\u0007n\u0002\u0002\u077b\u077c\b?\u0001\u0002\u077c\u077d\u0005",
    "\u0094K\u0002\u077d\u0781\b?\u0001\u0002\u077e\u0780\u0005\u0016\f\u0002",
    "\u077f\u077e\u0003\u0002\u0002\u0002\u0780\u0783\u0003\u0002\u0002\u0002",
    "\u0781\u077f\u0003\u0002\u0002\u0002\u0781\u0782\u0003\u0002\u0002\u0002",
    "\u0782\u0784\u0003\u0002\u0002\u0002\u0783\u0781\u0003\u0002\u0002\u0002",
    "\u0784\u0785\u0005\u001a\u000e\u0002\u0785\u07e6\u0003\u0002\u0002\u0002",
    "\u0786\u0787\b?\u0001\u0002\u0787\u07e3\u0005\u00dep\u0002\u0788\u0789",
    "\u0007\b\u0002\u0002\u0789\u078a\u0007?\u0002\u0002\u078a\u0791\b?\u0001",
    "\u0002\u078b\u078c\u0007\u0005\u0002\u0002\u078c\u078d\b?\u0001\u0002",
    "\u078d\u078e\u0007?\u0002\u0002\u078e\u0790\b?\u0001\u0002\u078f\u078b",
    "\u0003\u0002\u0002\u0002\u0790\u0793\u0003\u0002\u0002\u0002\u0791\u078f",
    "\u0003\u0002\u0002\u0002\u0791\u0792\u0003\u0002\u0002\u0002\u0792\u0794",
    "\u0003\u0002\u0002\u0002\u0793\u0791\u0003\u0002\u0002\u0002\u0794\u0795",
    "\u0007\t\u0002\u0002\u0795\u0799\b?\u0001\u0002\u0796\u0798\u0005\u0016",
    "\f\u0002\u0797\u0796\u0003\u0002\u0002\u0002\u0798\u079b\u0003\u0002",
    "\u0002\u0002\u0799\u0797\u0003\u0002\u0002\u0002\u0799\u079a\u0003\u0002",
    "\u0002\u0002\u079a\u07a8\u0003\u0002\u0002\u0002\u079b\u0799\u0003\u0002",
    "\u0002\u0002\u079c\u079d\u0007W\u0002\u0002\u079d\u079e\u0007\u0004",
    "\u0002\u0002\u079e\u07a2\b?\u0001\u0002\u079f\u07a1\u0005P)\u0002\u07a0",
    "\u079f\u0003\u0002\u0002\u0002\u07a1\u07a4\u0003\u0002\u0002\u0002\u07a2",
    "\u07a0\u0003\u0002\u0002\u0002\u07a2\u07a3\u0003\u0002\u0002\u0002\u07a3",
    "\u07a5\u0003\u0002\u0002\u0002\u07a4\u07a2\u0003\u0002\u0002\u0002\u07a5",
    "\u07a6\u0007\u0006\u0002\u0002\u07a6\u07a9\u0005\u001c\u000f\u0002\u07a7",
    "\u07a9\u0005\u001a\u000e\u0002\u07a8\u079c\u0003\u0002\u0002\u0002\u07a8",
    "\u07a7\u0003\u0002\u0002\u0002\u07a9\u07e4\u0003\u0002\u0002\u0002\u07aa",
    "\u07ab\u0007\u0007\u0002\u0002\u07ab\u07ac\b?\u0001\u0002\u07ac\u07ad",
    "\u0005\u00dep\u0002\u07ad\u07b1\b?\u0001\u0002\u07ae\u07b0\u0005\u0016",
    "\f\u0002\u07af\u07ae\u0003\u0002\u0002\u0002\u07b0\u07b3\u0003\u0002",
    "\u0002\u0002\u07b1\u07af\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002",
    "\u0002\u0002\u07b2\u07c0\u0003\u0002\u0002\u0002\u07b3\u07b1\u0003\u0002",
    "\u0002\u0002\u07b4\u07b5\u0007W\u0002\u0002\u07b5\u07b6\u0007\u0004",
    "\u0002\u0002\u07b6\u07ba\b?\u0001\u0002\u07b7\u07b9\u0005P)\u0002\u07b8",
    "\u07b7\u0003\u0002\u0002\u0002\u07b9\u07bc\u0003\u0002\u0002\u0002\u07ba",
    "\u07b8\u0003\u0002\u0002\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002\u07bb",
    "\u07bd\u0003\u0002\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002\u07bd",
    "\u07be\u0007\u0006\u0002\u0002\u07be\u07c1\u0005\u001c\u000f\u0002\u07bf",
    "\u07c1\u0005\u001a\u000e\u0002\u07c0\u07b4\u0003\u0002\u0002\u0002\u07c0",
    "\u07bf\u0003\u0002\u0002\u0002\u07c1\u07e4\u0003\u0002\u0002\u0002\u07c2",
    "\u07c6\b?\u0001\u0002\u07c3\u07c5\u0005\u0016\f\u0002\u07c4\u07c3\u0003",
    "\u0002\u0002\u0002\u07c5\u07c8\u0003\u0002\u0002\u0002\u07c6\u07c4\u0003",
    "\u0002\u0002\u0002\u07c6\u07c7\u0003\u0002\u0002\u0002\u07c7\u07d5\u0003",
    "\u0002\u0002\u0002\u07c8\u07c6\u0003\u0002\u0002\u0002\u07c9\u07ca\u0007",
    "W\u0002\u0002\u07ca\u07cb\u0007\u0004\u0002\u0002\u07cb\u07cf\b?\u0001",
    "\u0002\u07cc\u07ce\u0005P)\u0002\u07cd\u07cc\u0003\u0002\u0002\u0002",
    "\u07ce\u07d1\u0003\u0002\u0002\u0002\u07cf\u07cd\u0003\u0002\u0002\u0002",
    "\u07cf\u07d0\u0003\u0002\u0002\u0002\u07d0\u07d2\u0003\u0002\u0002\u0002",
    "\u07d1\u07cf\u0003\u0002\u0002\u0002\u07d2\u07d3\u0007\u0006\u0002\u0002",
    "\u07d3\u07d6\u0005\u001c\u000f\u0002\u07d4\u07d6\u0005\u001a\u000e\u0002",
    "\u07d5\u07c9\u0003\u0002\u0002\u0002\u07d5\u07d4\u0003\u0002\u0002\u0002",
    "\u07d6\u07e4\u0003\u0002\u0002\u0002\u07d7\u07dd\b?\u0001\u0002\u07d8",
    "\u07d9\u0007\u0005\u0002\u0002\u07d9\u07da\b?\u0001\u0002\u07da\u07dc",
    "\u0005v<\u0002\u07db\u07d8\u0003\u0002\u0002\u0002\u07dc\u07df\u0003",
    "\u0002\u0002\u0002\u07dd\u07db\u0003\u0002\u0002\u0002\u07dd\u07de\u0003",
    "\u0002\u0002\u0002\u07de\u07e0\u0003\u0002\u0002\u0002\u07df\u07dd\u0003",
    "\u0002\u0002\u0002\u07e0\u07e1\u0005~@\u0002\u07e1\u07e2\u0005\u001c",
    "\u000f\u0002\u07e2\u07e4\u0003\u0002\u0002\u0002\u07e3\u0788\u0003\u0002",
    "\u0002\u0002\u07e3\u07aa\u0003\u0002\u0002\u0002\u07e3\u07c2\u0003\u0002",
    "\u0002\u0002\u07e3\u07d7\u0003\u0002\u0002\u0002\u07e4\u07e6\u0003\u0002",
    "\u0002\u0002\u07e5\u072d\u0003\u0002\u0002\u0002\u07e5\u0730\u0003\u0002",
    "\u0002\u0002\u07e5\u0740\u0003\u0002\u0002\u0002\u07e5\u0770\u0003\u0002",
    "\u0002\u0002\u07e5\u077a\u0003\u0002\u0002\u0002\u07e5\u0786\u0003\u0002",
    "\u0002\u0002\u07e6\u07e8\u0003\u0002\u0002\u0002\u07e7\u0729\u0003\u0002",
    "\u0002\u0002\u07e7\u072c\u0003\u0002\u0002\u0002\u07e8}\u0003\u0002",
    "\u0002\u0002\u07e9\u07ea\b@\u0001\u0002\u07ea\u07ee\u0007\u0004\u0002",
    "\u0002\u07eb\u07ed\u0005T+\u0002\u07ec\u07eb\u0003\u0002\u0002\u0002",
    "\u07ed\u07f0\u0003\u0002\u0002\u0002\u07ee\u07ec\u0003\u0002\u0002\u0002",
    "\u07ee\u07ef\u0003\u0002\u0002\u0002\u07ef\u07f1\u0003\u0002\u0002\u0002",
    "\u07f0\u07ee\u0003\u0002\u0002\u0002\u07f1\u07f2\u0007\u0006\u0002\u0002",
    "\u07f2\u007f\u0003\u0002\u0002\u0002\u07f3\u07f4\bA\u0001\u0002\u07f4",
    "\u07f8\u0007\u0093\u0002\u0002\u07f5\u07f7\u0005T+\u0002\u07f6\u07f5",
    "\u0003\u0002\u0002\u0002\u07f7\u07fa\u0003\u0002\u0002\u0002\u07f8\u07f6",
    "\u0003\u0002\u0002\u0002\u07f8\u07f9\u0003\u0002\u0002\u0002\u07f9\u07fb",
    "\u0003\u0002\u0002\u0002\u07fa\u07f8\u0003\u0002\u0002\u0002\u07fb\u07fc",
    "\u0007\u0006\u0002\u0002\u07fc\u0081\u0003\u0002\u0002\u0002\u07fd\u07fe",
    "\u0007F\u0002\u0002\u07fe\u07ff\u00077\u0002\u0002\u07ff\u0803\bB\u0001",
    "\u0002\u0800\u0801\u0007o\u0002\u0002\u0801\u0803\bB\u0001\u0002\u0802",
    "\u07fd\u0003\u0002\u0002\u0002\u0802\u0800\u0003\u0002\u0002\u0002\u0803",
    "\u081c\u0003\u0002\u0002\u0002\u0804\u0806\u0005~@\u0002\u0805\u0807",
    "\u0005p9\u0002\u0806\u0805\u0003\u0002\u0002\u0002\u0806\u0807\u0003",
    "\u0002\u0002\u0002\u0807\u081d\u0003\u0002\u0002\u0002\u0808\u080a\u0005",
    "\u0092J\u0002\u0809\u080b\u0005p9\u0002\u080a\u0809\u0003\u0002\u0002",
    "\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b\u081d\u0003\u0002\u0002",
    "\u0002\u080c\u080e\u0005\u0094K\u0002\u080d\u080f\u0005p9\u0002\u080e",
    "\u080d\u0003\u0002\u0002\u0002\u080e\u080f\u0003\u0002\u0002\u0002\u080f",
    "\u081a\u0003\u0002\u0002\u0002\u0810\u0811\u0007W\u0002\u0002\u0811",
    "\u0812\u0007\u0004\u0002\u0002\u0812\u0816\bB\u0001\u0002\u0813\u0815",
    "\u0005P)\u0002\u0814\u0813\u0003\u0002\u0002\u0002\u0815\u0818\u0003",
    "\u0002\u0002\u0002\u0816\u0814\u0003\u0002\u0002\u0002\u0816\u0817\u0003",
    "\u0002\u0002\u0002\u0817\u0819\u0003\u0002\u0002\u0002\u0818\u0816\u0003",
    "\u0002\u0002\u0002\u0819\u081b\u0007\u0006\u0002\u0002\u081a\u0810\u0003",
    "\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002\u0002\u081b\u081d\u0003",
    "\u0002\u0002\u0002\u081c\u0804\u0003\u0002\u0002\u0002\u081c\u0808\u0003",
    "\u0002\u0002\u0002\u081c\u080c\u0003\u0002\u0002\u0002\u081d\u0083\u0003",
    "\u0002\u0002\u0002\u081e\u0820\u0007I\u0002\u0002\u081f\u0821\u0005",
    "\u008eH\u0002\u0820\u081f\u0003\u0002\u0002\u0002\u0820\u0821\u0003",
    "\u0002\u0002\u0002\u0821\u0822\u0003\u0002\u0002\u0002\u0822\u0823\u0007",
    "\u0085\u0002\u0002\u0823\u082b\bC\u0001\u0002\u0824\u0826\u0007L\u0002",
    "\u0002\u0825\u0827\u0005\u008eH\u0002\u0826\u0825\u0003\u0002\u0002",
    "\u0002\u0826\u0827\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002\u0002",
    "\u0002\u0828\u0829\u00077\u0002\u0002\u0829\u082b\bC\u0001\u0002\u082a",
    "\u081e\u0003\u0002\u0002\u0002\u082a\u0824\u0003\u0002\u0002\u0002\u082b",
    "\u082c\u0003\u0002\u0002\u0002\u082c\u082d\bC\u0001\u0002\u082d\u0085",
    "\u0003\u0002\u0002\u0002\u082e\u082f\u0007\u0004\u0002\u0002\u082f\u0839",
    "\bD\u0001\u0002\u0830\u0836\u0005\u0090I\u0002\u0831\u0832\u0007\u0005",
    "\u0002\u0002\u0832\u0833\bD\u0001\u0002\u0833\u0835\u0005\u0090I\u0002",
    "\u0834\u0831\u0003\u0002\u0002\u0002\u0835\u0838\u0003\u0002\u0002\u0002",
    "\u0836\u0834\u0003\u0002\u0002\u0002\u0836\u0837\u0003\u0002\u0002\u0002",
    "\u0837\u083a\u0003\u0002\u0002\u0002\u0838\u0836\u0003\u0002\u0002\u0002",
    "\u0839\u0830\u0003\u0002\u0002\u0002\u0839\u083a\u0003\u0002\u0002\u0002",
    "\u083a\u083b\u0003\u0002\u0002\u0002\u083b\u0841\u0007\u0006\u0002\u0002",
    "\u083c\u083d\u00078\u0002\u0002\u083d\u083e\u0005\u00aeX\u0002\u083e",
    "\u083f\bD\u0001\u0002\u083f\u0841\u0003\u0002\u0002\u0002\u0840\u082e",
    "\u0003\u0002\u0002\u0002\u0840\u083c\u0003\u0002\u0002\u0002\u0841\u0087",
    "\u0003\u0002\u0002\u0002\u0842\u0843\u0007\u0004\u0002\u0002\u0843\u084d",
    "\bE\u0001\u0002\u0844\u084a\u0005\u0090I\u0002\u0845\u0846\u0007\u0005",
    "\u0002\u0002\u0846\u0847\bE\u0001\u0002\u0847\u0849\u0005\u0090I\u0002",
    "\u0848\u0845\u0003\u0002\u0002\u0002\u0849\u084c\u0003\u0002\u0002\u0002",
    "\u084a\u0848\u0003\u0002\u0002\u0002\u084a\u084b\u0003\u0002\u0002\u0002",
    "\u084b\u084e\u0003\u0002\u0002\u0002\u084c\u084a\u0003\u0002\u0002\u0002",
    "\u084d\u0844\u0003\u0002\u0002\u0002\u084d\u084e\u0003\u0002\u0002\u0002",
    "\u084e\u084f\u0003\u0002\u0002\u0002\u084f\u0851\u0007\u0006\u0002\u0002",
    "\u0850\u0852\u0005p9\u0002\u0851\u0850\u0003\u0002\u0002\u0002\u0851",
    "\u0852\u0003\u0002\u0002\u0002\u0852\u0859\u0003\u0002\u0002\u0002\u0853",
    "\u0854\u00078\u0002\u0002\u0854\u0855\u0005\u00aeX\u0002\u0855\u0856",
    "\bE\u0001\u0002\u0856\u0859\u0003\u0002\u0002\u0002\u0857\u0859\u0005",
    "p9\u0002\u0858\u0842\u0003\u0002\u0002\u0002\u0858\u0853\u0003\u0002",
    "\u0002\u0002\u0858\u0857\u0003\u0002\u0002\u0002\u0858\u0859\u0003\u0002",
    "\u0002\u0002\u0859\u085a\u0003\u0002\u0002\u0002\u085a\u085e\bE\u0001",
    "\u0002\u085b\u085d\u0005\u0016\f\u0002\u085c\u085b\u0003\u0002\u0002",
    "\u0002\u085d\u0860\u0003\u0002\u0002\u0002\u085e\u085c\u0003\u0002\u0002",
    "\u0002\u085e\u085f\u0003\u0002\u0002\u0002\u085f\u0861\u0003\u0002\u0002",
    "\u0002\u0860\u085e\u0003\u0002\u0002\u0002\u0861\u0862\u0005\u001a\u000e",
    "\u0002\u0862\u0089\u0003\u0002\u0002\u0002\u0863\u0864\u0007x\u0002",
    "\u0002\u0864\u0865\bF\u0001\u0002\u0865\u0866\u0005\u00dep\u0002\u0866",
    "\u008b\u0003\u0002\u0002\u0002\u0867\u0868\u0007o\u0002\u0002\u0868",
    "\u0869\bG\u0001\u0002\u0869\u086a\u0005\u00dep\u0002\u086a\u008d\u0003",
    "\u0002\u0002\u0002\u086b\u086c\u0007\u000f\u0002\u0002\u086c\u0880\b",
    "H\u0001\u0002\u086d\u086e\u0007?\u0002\u0002\u086e\u086f\u0007\u0005",
    "\u0002\u0002\u086f\u0874\bH\u0001\u0002\u0870\u0871\u0007\u000e\u0002",
    "\u0002\u0871\u0872\u0007\u0005\u0002\u0002\u0872\u0874\bH\u0001\u0002",
    "\u0873\u086d\u0003\u0002\u0002\u0002\u0873\u0870\u0003\u0002\u0002\u0002",
    "\u0873\u0874\u0003\u0002\u0002\u0002\u0874\u0878\u0003\u0002\u0002\u0002",
    "\u0875\u0876\u0007?\u0002\u0002\u0876\u0877\u0007\u0010\u0002\u0002",
    "\u0877\u0879\bH\u0001\u0002\u0878\u0875\u0003\u0002\u0002\u0002\u0878",
    "\u0879\u0003\u0002\u0002\u0002\u0879\u087e\u0003\u0002\u0002\u0002\u087a",
    "\u087b\u0007?\u0002\u0002\u087b\u087f\bH\u0001\u0002\u087c\u087d\u0007",
    "\u000e\u0002\u0002\u087d\u087f\bH\u0001\u0002\u087e\u087a\u0003\u0002",
    "\u0002\u0002\u087e\u087c\u0003\u0002\u0002\u0002\u087f\u0881\u0003\u0002",
    "\u0002\u0002\u0880\u0873\u0003\u0002\u0002\u0002\u0880\u0881\u0003\u0002",
    "\u0002\u0002\u0881\u0882\u0003\u0002\u0002\u0002\u0882\u0883\u0007\u0011",
    "\u0002\u0002\u0883\u008f\u0003\u0002\u0002\u0002\u0884\u0887\u0005\u00de",
    "p\u0002\u0885\u0886\u0007*\u0002\u0002\u0886\u0888\u0005\u00e6t\u0002",
    "\u0887\u0885\u0003\u0002\u0002\u0002\u0887\u0888\u0003\u0002\u0002\u0002",
    "\u0888\u0889\u0003\u0002\u0002\u0002\u0889\u088a\bI\u0001\u0002\u088a",
    "\u0091\u0003\u0002\u0002\u0002\u088b\u088c\u0007\u0086\u0002\u0002\u088c",
    "\u088d\u00077\u0002\u0002\u088d\u088e\bJ\u0001\u0002\u088e\u0892\u0005",
    "\u00dep\u0002\u088f\u0890\u0007\u0007\u0002\u0002\u0890\u0891\bJ\u0001",
    "\u0002\u0891\u0893\u0005\u00dep\u0002\u0892\u088f\u0003\u0002\u0002",
    "\u0002\u0892\u0893\u0003\u0002\u0002\u0002\u0893\u0093\u0003\u0002\u0002",
    "\u0002\u0894\u08a5\u0005\u00dep\u0002\u0895\u0896\u0007\b\u0002\u0002",
    "\u0896\u0897\u0007?\u0002\u0002\u0897\u089e\bK\u0001\u0002\u0898\u0899",
    "\u0007\u0005\u0002\u0002\u0899\u089a\bK\u0001\u0002\u089a\u089b\u0007",
    "?\u0002\u0002\u089b\u089d\bK\u0001\u0002\u089c\u0898\u0003\u0002\u0002",
    "\u0002\u089d\u08a0\u0003\u0002\u0002\u0002\u089e\u089c\u0003\u0002\u0002",
    "\u0002\u089e\u089f\u0003\u0002\u0002\u0002\u089f\u08a1\u0003\u0002\u0002",
    "\u0002\u08a0\u089e\u0003\u0002\u0002\u0002\u08a1\u08a6\u0007\t\u0002",
    "\u0002\u08a2\u08a3\u0007\u0007\u0002\u0002\u08a3\u08a4\bK\u0001\u0002",
    "\u08a4\u08a6\u0005\u00dep\u0002\u08a5\u0895\u0003\u0002\u0002\u0002",
    "\u08a5\u08a2\u0003\u0002\u0002\u0002\u08a5\u08a6\u0003\u0002\u0002\u0002",
    "\u08a6\u0095\u0003\u0002\u0002\u0002\u08a7\u08a8\u0005\u009eP\u0002",
    "\u08a8\u08bc\bL\u0001\u0002\u08a9\u08ab\u0007\u0087\u0002\u0002\u08aa",
    "\u08ac\t\u0003\u0002\u0002\u08ab\u08aa\u0003\u0002\u0002\u0002\u08ab",
    "\u08ac\u0003\u0002\u0002\u0002\u08ac\u08b6\u0003\u0002\u0002\u0002\u08ad",
    "\u08af\u0007[\u0002\u0002\u08ae\u08b0\u0007.\u0002\u0002\u08af\u08ae",
    "\u0003\u0002\u0002\u0002\u08af\u08b0\u0003\u0002\u0002\u0002\u08b0\u08b6",
    "\u0003\u0002\u0002\u0002\u08b1\u08b3\u0007q\u0002\u0002\u08b2\u08b4",
    "\u0007.\u0002\u0002\u08b3\u08b2\u0003\u0002\u0002\u0002\u08b3\u08b4",
    "\u0003\u0002\u0002\u0002\u08b4\u08b6\u0003\u0002\u0002\u0002\u08b5\u08a9",
    "\u0003\u0002\u0002\u0002\u08b5\u08ad\u0003\u0002\u0002\u0002\u08b5\u08b1",
    "\u0003\u0002\u0002\u0002\u08b6\u08b7\u0003\u0002\u0002\u0002\u08b7\u08b8",
    "\u0005\u009eP\u0002\u08b8\u08b9\bL\u0001\u0002\u08b9\u08bb\u0003\u0002",
    "\u0002\u0002\u08ba\u08b5\u0003\u0002\u0002\u0002\u08bb\u08be\u0003\u0002",
    "\u0002\u0002\u08bc\u08ba\u0003\u0002\u0002\u0002\u08bc\u08bd\u0003\u0002",
    "\u0002\u0002\u08bd\u08c2\u0003\u0002\u0002\u0002\u08be\u08bc\u0003\u0002",
    "\u0002\u0002\u08bf\u08c0\u0005\u0098M\u0002\u08c0\u08c1\bL\u0001\u0002",
    "\u08c1\u08c3\u0003\u0002\u0002\u0002\u08c2\u08bf\u0003\u0002\u0002\u0002",
    "\u08c2\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c7\u0003\u0002\u0002\u0002",
    "\u08c4\u08c5\u0005\u009aN\u0002\u08c5\u08c6\bL\u0001\u0002\u08c6\u08c8",
    "\u0003\u0002\u0002\u0002\u08c7\u08c4\u0003\u0002\u0002\u0002\u08c7\u08c8",
    "\u0003\u0002\u0002\u0002\u08c8\u0097\u0003\u0002\u0002\u0002\u08c9\u08ca",
    "\u0007z\u0002\u0002\u08ca\u08cb\u0007+\u0002\u0002\u08cb\u08cc\bM\u0001",
    "\u0002\u08cc\u08cd\u0005\u009cO\u0002\u08cd\u08d4\bM\u0001\u0002\u08ce",
    "\u08cf\u0007\u0005\u0002\u0002\u08cf\u08d0\u0005\u009cO\u0002\u08d0",
    "\u08d1\bM\u0001\u0002\u08d1\u08d3\u0003\u0002\u0002\u0002\u08d2\u08ce",
    "\u0003\u0002\u0002\u0002\u08d3\u08d6\u0003\u0002\u0002\u0002\u08d4\u08d2",
    "\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003\u0002\u0002\u0002\u08d5\u0099",
    "\u0003\u0002\u0002\u0002\u08d6\u08d4\u0003\u0002\u0002\u0002\u08d7\u08d8",
    "\u0007m\u0002\u0002\u08d8\u08dd\bN\u0001\u0002\u08d9\u08da\u0007?\u0002",
    "\u0002\u08da\u08de\bN\u0001\u0002\u08db\u08dc\u00076\u0002\u0002\u08dc",
    "\u08de\bN\u0001\u0002\u08dd\u08d9\u0003\u0002\u0002\u0002\u08dd\u08db",
    "\u0003\u0002\u0002\u0002\u08de\u08e2\u0003\u0002\u0002\u0002\u08df\u08e0",
    "\u0007w\u0002\u0002\u08e0\u08e1\u0007?\u0002\u0002\u08e1\u08e3\bN\u0001",
    "\u0002\u08e2\u08df\u0003\u0002\u0002\u0002\u08e2\u08e3\u0003\u0002\u0002",
    "\u0002\u08e3\u009b\u0003\u0002\u0002\u0002\u08e4\u08e5\u0005\u00b6\\",
    "\u0002\u08e5\u08ea\bO\u0001\u0002\u08e6\u08e7\u0007G\u0002\u0002\u08e7",
    "\u08eb\bO\u0001\u0002\u08e8\u08e9\u0007R\u0002\u0002\u08e9\u08eb\bO",
    "\u0001\u0002\u08ea\u08e6\u0003\u0002\u0002\u0002\u08ea\u08e8\u0003\u0002",
    "\u0002\u0002\u08ea\u08eb\u0003\u0002\u0002\u0002\u08eb\u08ef\u0003\u0002",
    "\u0002\u0002\u08ec\u08ed\u0007v\u0002\u0002\u08ed\u08ee\t\u0004\u0002",
    "\u0002\u08ee\u08f0\bO\u0001\u0002\u08ef\u08ec\u0003\u0002\u0002\u0002",
    "\u08ef\u08f0\u0003\u0002\u0002\u0002\u08f0\u009d\u0003\u0002\u0002\u0002",
    "\u08f1\u08f2\u0005\u00a0Q\u0002\u08f2\u08fc\bP\u0001\u0002\u08f3\u08f5",
    "\u0007e\u0002\u0002\u08f4\u08f6\u0007.\u0002\u0002\u08f5\u08f4\u0003",
    "\u0002\u0002\u0002\u08f5\u08f6\u0003\u0002\u0002\u0002\u08f6\u08f7\u0003",
    "\u0002\u0002\u0002\u08f7\u08f8\u0005\u00a0Q\u0002\u08f8\u08f9\bP\u0001",
    "\u0002\u08f9\u08fb\u0003\u0002\u0002\u0002\u08fa\u08f3\u0003\u0002\u0002",
    "\u0002\u08fb\u08fe\u0003\u0002\u0002\u0002\u08fc\u08fa\u0003\u0002\u0002",
    "\u0002\u08fc\u08fd\u0003\u0002\u0002\u0002\u08fd\u009f\u0003\u0002\u0002",
    "\u0002\u08fe\u08fc\u0003\u0002\u0002\u0002\u08ff\u0900\u0007\b\u0002",
    "\u0002\u0900\u0901\u0005\u0096L\u0002\u0901\u0902\u0007\t\u0002\u0002",
    "\u0902\u0903\bQ\u0001\u0002\u0903\u0950\u0003\u0002\u0002\u0002\u0904",
    "\u0905\u00079\u0002\u0002\u0905\u0932\bQ\u0001\u0002\u0906\u0907\u0007",
    "1\u0002\u0002\u0907\u0912\u0005\u00a2R\u0002\u0908\u0909\u0007s\u0002",
    "\u0002\u0909\u090d\u0007\u0004\u0002\u0002\u090a\u090c\u0005V,\u0002",
    "\u090b\u090a\u0003\u0002\u0002\u0002\u090c\u090f\u0003\u0002\u0002\u0002",
    "\u090d\u090b\u0003\u0002\u0002\u0002\u090d\u090e\u0003\u0002\u0002\u0002",
    "\u090e\u0910\u0003\u0002\u0002\u0002\u090f\u090d\u0003\u0002\u0002\u0002",
    "\u0910\u0911\u0007\u0006\u0002\u0002\u0911\u0913\u0007f\u0002\u0002",
    "\u0912\u0908\u0003\u0002\u0002\u0002\u0912\u0913\u0003\u0002\u0002\u0002",
    "\u0913\u0916\u0003\u0002\u0002\u0002\u0914\u0915\t\u0003\u0002\u0002",
    "\u0915\u0917\bQ\u0001\u0002\u0916\u0914\u0003\u0002\u0002\u0002\u0916",
    "\u0917\u0003\u0002\u0002\u0002\u0917\u0919\u0003\u0002\u0002\u0002\u0918",
    "\u091a\u0005^0\u0002\u0919\u0918\u0003\u0002\u0002\u0002\u0919\u091a",
    "\u0003\u0002\u0002\u0002\u091a\u091c\u0003\u0002\u0002\u0002\u091b\u091d",
    "\u0005*\u0016\u0002\u091c\u091b\u0003\u0002\u0002\u0002\u091c\u091d",
    "\u0003\u0002\u0002\u0002\u091d\u0933\u0003\u0002\u0002\u0002\u091e\u091f",
    "\t\u0003\u0002\u0002\u091f\u0921\bQ\u0001\u0002\u0920\u091e\u0003\u0002",
    "\u0002\u0002\u0920\u0921\u0003\u0002\u0002\u0002\u0921\u0922\u0003\u0002",
    "\u0002\u0002\u0922\u0926\bQ\u0001\u0002\u0923\u0924\u0007\u000e\u0002",
    "\u0002\u0924\u0927\bQ\u0001\u0002\u0925\u0927\u0005`1\u0002\u0926\u0923",
    "\u0003\u0002\u0002\u0002\u0926\u0925\u0003\u0002\u0002\u0002\u0927\u092d",
    "\u0003\u0002\u0002\u0002\u0928\u0929\u0007\u0005\u0002\u0002\u0929\u092a",
    "\bQ\u0001\u0002\u092a\u092c\u0005`1\u0002\u092b\u0928\u0003\u0002\u0002",
    "\u0002\u092c\u092f\u0003\u0002\u0002\u0002\u092d\u092b\u0003\u0002\u0002",
    "\u0002\u092d\u092e\u0003\u0002\u0002\u0002\u092e\u0930\u0003\u0002\u0002",
    "\u0002\u092f\u092d\u0003\u0002\u0002\u0002\u0930\u0931\u00071\u0002",
    "\u0002\u0931\u0933\u0005\u00a2R\u0002\u0932\u0906\u0003\u0002\u0002",
    "\u0002\u0932\u0920\u0003\u0002\u0002\u0002\u0933\u0938\u0003\u0002\u0002",
    "\u0002\u0934\u0935\u0007=\u0002\u0002\u0935\u0936\u0005\u00aeX\u0002",
    "\u0936\u0937\bQ\u0001\u0002\u0937\u0939\u0003\u0002\u0002\u0002\u0938",
    "\u0934\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002\u0002\u0939",
    "\u0947\u0003\u0002\u0002\u0002\u093a\u093b\u0007a\u0002\u0002\u093b",
    "\u093c\u0007+\u0002\u0002\u093c\u093d\u0005\u00b6\\\u0002\u093d\u0944",
    "\bQ\u0001\u0002\u093e\u093f\u0007\u0005\u0002\u0002\u093f\u0940\u0005",
    "\u00b6\\\u0002\u0940\u0941\bQ\u0001\u0002\u0941\u0943\u0003\u0002\u0002",
    "\u0002\u0942\u093e\u0003\u0002\u0002\u0002\u0943\u0946\u0003\u0002\u0002",
    "\u0002\u0944\u0942\u0003\u0002\u0002\u0002\u0944\u0945\u0003\u0002\u0002",
    "\u0002\u0945\u0948\u0003\u0002\u0002\u0002\u0946\u0944\u0003\u0002\u0002",
    "\u0002\u0947\u093a\u0003\u0002\u0002\u0002\u0947\u0948\u0003\u0002\u0002",
    "\u0002\u0948\u094d\u0003\u0002\u0002\u0002\u0949\u094a\u0007b\u0002",
    "\u0002\u094a\u094b\u0005\u00aeX\u0002\u094b\u094c\bQ\u0001\u0002\u094c",
    "\u094e\u0003\u0002\u0002\u0002\u094d\u0949\u0003\u0002\u0002\u0002\u094d",
    "\u094e\u0003\u0002\u0002\u0002\u094e\u0950\u0003\u0002\u0002\u0002\u094f",
    "\u08ff\u0003\u0002\u0002\u0002\u094f\u0904\u0003\u0002\u0002\u0002\u0950",
    "\u00a1\u0003\u0002\u0002\u0002\u0951\u0952\u0005\u00a4S\u0002\u0952",
    "\u095c\bR\u0001\u0002\u0953\u0958\bR\u0001\u0002\u0954\u0955\u0007\u0005",
    "\u0002\u0002\u0955\u0956\u0005\u00a4S\u0002\u0956\u0957\bR\u0001\u0002",
    "\u0957\u0959\u0003\u0002\u0002\u0002\u0958\u0954\u0003\u0002\u0002\u0002",
    "\u0959\u095a\u0003\u0002\u0002\u0002\u095a\u0958\u0003\u0002\u0002\u0002",
    "\u095a\u095b\u0003\u0002\u0002\u0002\u095b\u095d\u0003\u0002\u0002\u0002",
    "\u095c\u0953\u0003\u0002\u0002\u0002\u095c\u095d\u0003\u0002\u0002\u0002",
    "\u095d\u00a3\u0003\u0002\u0002\u0002\u095e\u095f\u0005\u00aaV\u0002",
    "\u095f\u096f\bS\u0001\u0002\u0960\u0961\u0005\u00a6T\u0002\u0961\u0962",
    "\bS\u0001\u0002\u0962\u0963\u0005\u00a4S\u0002\u0963\u0964\bS\u0001",
    "\u0002\u0964\u0965\u00078\u0002\u0002\u0965\u0966\u0005\u00aeX\u0002",
    "\u0966\u0967\bS\u0001\u0002\u0967\u096e\u0003\u0002\u0002\u0002\u0968",
    "\u0969\u0007N\u0002\u0002\u0969\u096a\u0007h\u0002\u0002\u096a\u096b",
    "\u0005\u00aaV\u0002\u096b\u096c\bS\u0001\u0002\u096c\u096e\u0003\u0002",
    "\u0002\u0002\u096d\u0960\u0003\u0002\u0002\u0002\u096d\u0968\u0003\u0002",
    "\u0002\u0002\u096e\u0971\u0003\u0002\u0002\u0002\u096f\u096d\u0003\u0002",
    "\u0002\u0002\u096f\u0970\u0003\u0002\u0002\u0002\u0970\u00a5\u0003\u0002",
    "\u0002\u0002\u0971\u096f\u0003\u0002\u0002\u0002\u0972\u0973\u0007h",
    "\u0002\u0002\u0973\u0996\bT\u0001\u0002\u0974\u0976\u0007d\u0002\u0002",
    "\u0975\u0977\u0005\u00a8U\u0002\u0976\u0975\u0003\u0002\u0002\u0002",
    "\u0976\u0977\u0003\u0002\u0002\u0002\u0977\u0978\u0003\u0002\u0002\u0002",
    "\u0978\u0979\u0007h\u0002\u0002\u0979\u0996\bT\u0001\u0002\u097a\u097c",
    "\u0007k\u0002\u0002\u097b\u097d\u0007{\u0002\u0002\u097c\u097b\u0003",
    "\u0002\u0002\u0002\u097c\u097d\u0003\u0002\u0002\u0002\u097d\u097f\u0003",
    "\u0002\u0002\u0002\u097e\u0980\u0005\u00a8U\u0002\u097f\u097e\u0003",
    "\u0002\u0002\u0002\u097f\u0980\u0003\u0002\u0002\u0002\u0980\u0981\u0003",
    "\u0002\u0002\u0002\u0981\u0982\u0007h\u0002\u0002\u0982\u0996\bT\u0001",
    "\u0002\u0983\u0985\u0007\u0080\u0002\u0002\u0984\u0986\u0007{\u0002",
    "\u0002\u0985\u0984\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002\u0002",
    "\u0002\u0986\u0988\u0003\u0002\u0002\u0002\u0987\u0989\u0005\u00a8U",
    "\u0002\u0988\u0987\u0003\u0002\u0002\u0002\u0988\u0989\u0003\u0002\u0002",
    "\u0002\u0989\u098a\u0003\u0002\u0002\u0002\u098a\u098b\u0007h\u0002",
    "\u0002\u098b\u0996\bT\u0001\u0002\u098c\u098e\u0007_\u0002\u0002\u098d",
    "\u098f\u0007{\u0002\u0002\u098e\u098d\u0003\u0002\u0002\u0002\u098e",
    "\u098f\u0003\u0002\u0002\u0002\u098f\u0991\u0003\u0002\u0002\u0002\u0990",
    "\u0992\u0005\u00a8U\u0002\u0991\u0990\u0003\u0002\u0002\u0002\u0991",
    "\u0992\u0003\u0002\u0002\u0002\u0992\u0993\u0003\u0002\u0002\u0002\u0993",
    "\u0994\u0007h\u0002\u0002\u0994\u0996\bT\u0001\u0002\u0995\u0972\u0003",
    "\u0002\u0002\u0002\u0995\u0974\u0003\u0002\u0002\u0002\u0995\u097a\u0003",
    "\u0002\u0002\u0002\u0995\u0983\u0003\u0002\u0002\u0002\u0995\u098c\u0003",
    "\u0002\u0002\u0002\u0996\u0997\u0003\u0002\u0002\u0002\u0997\u0998\b",
    "T\u0001\u0002\u0998\u00a7\u0003\u0002\u0002\u0002\u0999\u099b\u0007",
    "Z\u0002\u0002\u099a\u0999\u0003\u0002\u0002\u0002\u099a\u099b\u0003",
    "\u0002\u0002\u0002\u099b\u099c\u0003\u0002\u0002\u0002\u099c\u099d\u0007",
    "x\u0002\u0002\u099d\u09a1\bU\u0001\u0002\u099e\u099f\u0007o\u0002\u0002",
    "\u099f\u09a1\bU\u0001\u0002\u09a0\u099a\u0003\u0002\u0002\u0002\u09a0",
    "\u099e\u0003\u0002\u0002\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002\u09a2",
    "\u09aa\u0007\u0085\u0002\u0002\u09a3\u09a5\u0007Z\u0002\u0002\u09a4",
    "\u09a3\u0003\u0002\u0002\u0002\u09a4\u09a5\u0003\u0002\u0002\u0002\u09a5",
    "\u09a6\u0003\u0002\u0002\u0002\u09a6\u09a7\u0007x\u0002\u0002\u09a7",
    "\u09ab\bU\u0001\u0002\u09a8\u09a9\u0007o\u0002\u0002\u09a9\u09ab\bU",
    "\u0001\u0002\u09aa\u09a4\u0003\u0002\u0002\u0002\u09aa\u09a8\u0003\u0002",
    "\u0002\u0002\u09ab\u00a9\u0003\u0002\u0002\u0002\u09ac\u09ad\bV\u0001",
    "\u0002\u09ad\u09b1\u0005\u00acW\u0002\u09ae\u09af\u0007\u0007\u0002",
    "\u0002\u09af\u09b0\bV\u0001\u0002\u09b0\u09b2\u0005\u00acW\u0002\u09b1",
    "\u09ae\u0003\u0002\u0002\u0002\u09b1\u09b2\u0003\u0002\u0002\u0002\u09b2",
    "\u09ba\u0003\u0002\u0002\u0002\u09b3\u09b4\u0007*\u0002\u0002\u09b4",
    "\u09b5\u0005\u00e6t\u0002\u09b5\u09b6\bV\u0001\u0002\u09b6\u09bb\u0003",
    "\u0002\u0002\u0002\u09b7\u09b8\u0005\u00e4s\u0002\u09b8\u09b9\bV\u0001",
    "\u0002\u09b9\u09bb\u0003\u0002\u0002\u0002\u09ba\u09b3\u0003\u0002\u0002",
    "\u0002\u09ba\u09b7\u0003\u0002\u0002\u0002\u09ba\u09bb\u0003\u0002\u0002",
    "\u0002\u09bb\u09d0\u0003\u0002\u0002\u0002\u09bc\u09cd\u0007\b\u0002",
    "\u0002\u09bd\u09be\u0005\u0096L\u0002\u09be\u09bf\u0007\t\u0002\u0002",
    "\u09bf\u09c7\bV\u0001\u0002\u09c0\u09c1\u0007*\u0002\u0002\u09c1\u09c2",
    "\u0005\u00e6t\u0002\u09c2\u09c3\bV\u0001\u0002\u09c3\u09c8\u0003\u0002",
    "\u0002\u0002\u09c4\u09c5\u0005\u00e4s\u0002\u09c5\u09c6\bV\u0001\u0002",
    "\u09c6\u09c8\u0003\u0002\u0002\u0002\u09c7\u09c0\u0003\u0002\u0002\u0002",
    "\u09c7\u09c4\u0003\u0002\u0002\u0002\u09c8\u09ce\u0003\u0002\u0002\u0002",
    "\u09c9\u09ca\u0005\u00a4S\u0002\u09ca\u09cb\u0007\t\u0002\u0002\u09cb",
    "\u09cc\bV\u0001\u0002\u09cc\u09ce\u0003\u0002\u0002\u0002\u09cd\u09bd",
    "\u0003\u0002\u0002\u0002\u09cd\u09c9\u0003\u0002\u0002\u0002\u09ce\u09d0",
    "\u0003\u0002\u0002\u0002\u09cf\u09ac\u0003\u0002\u0002\u0002\u09cf\u09bc",
    "\u0003\u0002\u0002\u0002\u09d0\u00ab\u0003\u0002\u0002\u0002\u09d1\u09d2",
    "\u0005\u00e6t\u0002\u09d2\u09d8\bW\u0001\u0002\u09d3\u09d5\u0005\u00c2",
    "b\u0002\u09d4\u09d6\u0005\u00ccg\u0002\u09d5\u09d4\u0003\u0002\u0002",
    "\u0002\u09d5\u09d6\u0003\u0002\u0002\u0002\u09d6\u09d9\u0003\u0002\u0002",
    "\u0002\u09d7\u09d9\u0005\u00ccg\u0002\u09d8\u09d3\u0003\u0002\u0002",
    "\u0002\u09d8\u09d7\u0003\u0002\u0002\u0002\u09d8\u09d9\u0003\u0002\u0002",
    "\u0002\u09d9\u09e6\u0003\u0002\u0002\u0002\u09da\u09db\u0007\u0012\u0002",
    "\u0002\u09db\u09dc\u0005\u00e6t\u0002\u09dc\u09e2\bW\u0001\u0002\u09dd",
    "\u09df\u0005\u00c2b\u0002\u09de\u09e0\u0005\u00ccg\u0002\u09df\u09de",
    "\u0003\u0002\u0002\u0002\u09df\u09e0\u0003\u0002\u0002\u0002\u09e0\u09e3",
    "\u0003\u0002\u0002\u0002\u09e1\u09e3\u0005\u00ccg\u0002\u09e2\u09dd",
    "\u0003\u0002\u0002\u0002\u09e2\u09e1\u0003\u0002\u0002\u0002\u09e2\u09e3",
    "\u0003\u0002\u0002\u0002\u09e3\u09e5\u0003\u0002\u0002\u0002\u09e4\u09da",
    "\u0003\u0002\u0002\u0002\u09e5\u09e8\u0003\u0002\u0002\u0002\u09e6\u09e4",
    "\u0003\u0002\u0002\u0002\u09e6\u09e7\u0003\u0002\u0002\u0002\u09e7\u00ad",
    "\u0003\u0002\u0002\u0002\u09e8\u09e6\u0003\u0002\u0002\u0002\u09e9\u09ea",
    "\u0005\u00b0Y\u0002\u09ea\u09f1\bX\u0001\u0002\u09eb\u09ec\u0007y\u0002",
    "\u0002\u09ec\u09ed\u0005\u00b0Y\u0002\u09ed\u09ee\bX\u0001\u0002\u09ee",
    "\u09f0\u0003\u0002\u0002\u0002\u09ef\u09eb\u0003\u0002\u0002\u0002\u09f0",
    "\u09f3\u0003\u0002\u0002\u0002\u09f1\u09ef\u0003\u0002\u0002\u0002\u09f1",
    "\u09f2\u0003\u0002\u0002\u0002\u09f2\u00af\u0003\u0002\u0002\u0002\u09f3",
    "\u09f1\u0003\u0002\u0002\u0002\u09f4\u09f5\u0005\u00b2Z\u0002\u09f5",
    "\u09fc\bY\u0001\u0002\u09f6\u09f7\u0007C\u0002\u0002\u09f7\u09f8\u0005",
    "\u00b2Z\u0002\u09f8\u09f9\bY\u0001\u0002\u09f9\u09fb\u0003\u0002\u0002",
    "\u0002\u09fa\u09f6\u0003\u0002\u0002\u0002\u09fb\u09fe\u0003\u0002\u0002",
    "\u0002\u09fc\u09fa\u0003\u0002\u0002\u0002\u09fc\u09fd\u0003\u0002\u0002",
    "\u0002\u09fd\u00b1\u0003\u0002\u0002\u0002\u09fe\u09fc\u0003\u0002\u0002",
    "\u0002\u09ff\u0a00\u00075\u0002\u0002\u0a00\u0a01\u0005\u00b2Z\u0002",
    "\u0a01\u0a02\bZ\u0001\u0002\u0a02\u0a29\u0003\u0002\u0002\u0002\u0a03",
    "\u0a0e\u0007/\u0002\u0002\u0a04\u0a05\u0007\b\u0002\u0002\u0a05\u0a06",
    "\u0005\u0096L\u0002\u0a06\u0a07\u0007\t\u0002\u0002\u0a07\u0a08\bZ\u0001",
    "\u0002\u0a08\u0a0f\u0003\u0002\u0002\u0002\u0a09\u0a0a\t\u0005\u0002",
    "\u0002\u0a0a\u0a0f\bZ\u0001\u0002\u0a0b\u0a0c\u0005\u00c0a\u0002\u0a0c",
    "\u0a0d\bZ\u0001\u0002\u0a0d\u0a0f\u0003\u0002\u0002\u0002\u0a0e\u0a04",
    "\u0003\u0002\u0002\u0002\u0a0e\u0a09\u0003\u0002\u0002\u0002\u0a0e\u0a0b",
    "\u0003\u0002\u0002\u0002\u0a0f\u0a29\u0003\u0002\u0002\u0002\u0a10\u0a26",
    "\u0005\u00b6\\\u0002\u0a11\u0a12\t\u0006\u0002\u0002\u0a12\u0a15\bZ",
    "\u0001\u0002\u0a13\u0a14\t\u0007\u0002\u0002\u0a14\u0a16\bZ\u0001\u0002",
    "\u0a15\u0a13\u0003\u0002\u0002\u0002\u0a15\u0a16\u0003\u0002\u0002\u0002",
    "\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17\u0a18\u0005\u00b6\\\u0002",
    "\u0a18\u0a19\bZ\u0001\u0002\u0a19\u0a27\u0003\u0002\u0002\u0002\u0a1a",
    "\u0a1e\u0007g\u0002\u0002\u0a1b\u0a1c\u00075\u0002\u0002\u0a1c\u0a1f",
    "\u00076\u0002\u0002\u0a1d\u0a1f\u00076\u0002\u0002\u0a1e\u0a1b\u0003",
    "\u0002\u0002\u0002\u0a1e\u0a1d\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0003",
    "\u0002\u0002\u0002\u0a20\u0a27\bZ\u0001\u0002\u0a21\u0a22\bZ\u0001\u0002",
    "\u0a22\u0a23\u00075\u0002\u0002\u0a23\u0a27\u0005\u00b4[\u0002\u0a24",
    "\u0a25\bZ\u0001\u0002\u0a25\u0a27\u0005\u00b4[\u0002\u0a26\u0a11\u0003",
    "\u0002\u0002\u0002\u0a26\u0a1a\u0003\u0002\u0002\u0002\u0a26\u0a21\u0003",
    "\u0002\u0002\u0002\u0a26\u0a24\u0003\u0002\u0002\u0002\u0a26\u0a27\u0003",
    "\u0002\u0002\u0002\u0a27\u0a29\u0003\u0002\u0002\u0002\u0a28\u09ff\u0003",
    "\u0002\u0002\u0002\u0a28\u0a03\u0003\u0002\u0002\u0002\u0a28\u0a10\u0003",
    "\u0002\u0002\u0002\u0a29\u00b3\u0003\u0002\u0002\u0002\u0a2a\u0a2b\u0007",
    "2\u0002\u0002\u0a2b\u0a2c\u0005\u00b6\\\u0002\u0a2c\u0a2d\b[\u0001\u0002",
    "\u0a2d\u0a3f\u0003\u0002\u0002\u0002\u0a2e\u0a2f\u0007J\u0002\u0002",
    "\u0a2f\u0a30\u0005\u00b6\\\u0002\u0a30\u0a31\b[\u0001\u0002\u0a31\u0a32",
    "\u0007C\u0002\u0002\u0a32\u0a33\u0005\u00b6\\\u0002\u0a33\u0a34\b[\u0001",
    "\u0002\u0a34\u0a3f\u0003\u0002\u0002\u0002\u0a35\u0a36\u0007l\u0002",
    "\u0002\u0a36\u0a37\u0005\u00b6\\\u0002\u0a37\u0a3c\b[\u0001\u0002\u0a38",
    "\u0a39\u0007Y\u0002\u0002\u0a39\u0a3a\u0005\u00b6\\\u0002\u0a3a\u0a3b",
    "\b[\u0001\u0002\u0a3b\u0a3d\u0003\u0002\u0002\u0002\u0a3c\u0a38\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d\u0a3f\u0003",
    "\u0002\u0002\u0002\u0a3e\u0a2a\u0003\u0002\u0002\u0002\u0a3e\u0a2e\u0003",
    "\u0002\u0002\u0002\u0a3e\u0a35\u0003\u0002\u0002\u0002\u0a3f\u00b5\u0003",
    "\u0002\u0002\u0002\u0a40\u0a41\u0005\u00b8]\u0002\u0a41\u0a48\b\\\u0001",
    "\u0002\u0a42\u0a43\u0007\u001a\u0002\u0002\u0a43\u0a44\u0005\u00b8]",
    "\u0002\u0a44\u0a45\b\\\u0001\u0002\u0a45\u0a47\u0003\u0002\u0002\u0002",
    "\u0a46\u0a42\u0003\u0002\u0002\u0002\u0a47\u0a4a\u0003\u0002\u0002\u0002",
    "\u0a48\u0a46\u0003\u0002\u0002\u0002\u0a48\u0a49\u0003\u0002\u0002\u0002",
    "\u0a49\u00b7\u0003\u0002\u0002\u0002\u0a4a\u0a48\u0003\u0002\u0002\u0002",
    "\u0a4b\u0a4c\u0005\u00ba^\u0002\u0a4c\u0a53\b]\u0001\u0002\u0a4d\u0a4e",
    "\t\b\u0002\u0002\u0a4e\u0a4f\u0005\u00ba^\u0002\u0a4f\u0a50\b]\u0001",
    "\u0002\u0a50\u0a52\u0003\u0002\u0002\u0002\u0a51\u0a4d\u0003\u0002\u0002",
    "\u0002\u0a52\u0a55\u0003\u0002\u0002\u0002\u0a53\u0a51\u0003\u0002\u0002",
    "\u0002\u0a53\u0a54\u0003\u0002\u0002\u0002\u0a54\u00b9\u0003\u0002\u0002",
    "\u0002\u0a55\u0a53\u0003\u0002\u0002\u0002\u0a56\u0a57\u0005\u00bc_",
    "\u0002\u0a57\u0a5e\b^\u0001\u0002\u0a58\u0a59\t\t\u0002\u0002\u0a59",
    "\u0a5a\u0005\u00bc_\u0002\u0a5a\u0a5b\b^\u0001\u0002\u0a5b\u0a5d\u0003",
    "\u0002\u0002\u0002\u0a5c\u0a58\u0003\u0002\u0002\u0002\u0a5d\u0a60\u0003",
    "\u0002\u0002\u0002\u0a5e\u0a5c\u0003\u0002\u0002\u0002\u0a5e\u0a5f\u0003",
    "\u0002\u0002\u0002\u0a5f\u00bb\u0003\u0002\u0002\u0002\u0a60\u0a5e\u0003",
    "\u0002\u0002\u0002\u0a61\u0a62\t\b\u0002\u0002\u0a62\u0a63\u0005\u00bc",
    "_\u0002\u0a63\u0a64\b_\u0001\u0002\u0a64\u0ab7\u0003\u0002\u0002\u0002",
    "\u0a65\u0a66\u0005\u00dco\u0002\u0a66\u0a67\b_\u0001\u0002\u0a67\u0ab5",
    "\u0003\u0002\u0002\u0002\u0a68\u0a69\u0005\u00be`\u0002\u0a69\u0a6a",
    "\b_\u0001\u0002\u0a6a\u0ab5\u0003\u0002\u0002\u0002\u0a6b\u0a6c\u0007",
    ",\u0002\u0002\u0a6c\u0a83\b_\u0001\u0002\u0a6d\u0a6e\u0005\u00b6\\\u0002",
    "\u0a6e\u0a75\b_\u0001\u0002\u0a6f\u0a70\u0007;\u0002\u0002\u0a70\u0a71",
    "\u0005\u00b6\\\u0002\u0a71\u0a72\u0007\u0083\u0002\u0002\u0a72\u0a73",
    "\u0005\u00b6\\\u0002\u0a73\u0a74\b_\u0001\u0002\u0a74\u0a76\u0003\u0002",
    "\u0002\u0002\u0a75\u0a6f\u0003\u0002\u0002\u0002\u0a76\u0a77\u0003\u0002",
    "\u0002\u0002\u0a77\u0a75\u0003\u0002\u0002\u0002\u0a77\u0a78\u0003\u0002",
    "\u0002\u0002\u0a78\u0a84\u0003\u0002\u0002\u0002\u0a79\u0a7a\u0007;",
    "\u0002\u0002\u0a7a\u0a7b\u0005\u00aeX\u0002\u0a7b\u0a7c\u0007\u0083",
    "\u0002\u0002\u0a7c\u0a7d\u0005\u00b6\\\u0002\u0a7d\u0a7e\b_\u0001\u0002",
    "\u0a7e\u0a80\u0003\u0002\u0002\u0002\u0a7f\u0a79\u0003\u0002\u0002\u0002",
    "\u0a80\u0a81\u0003\u0002\u0002\u0002\u0a81\u0a7f\u0003\u0002\u0002\u0002",
    "\u0a81\u0a82\u0003\u0002\u0002\u0002\u0a82\u0a84\u0003\u0002\u0002\u0002",
    "\u0a83\u0a6d\u0003\u0002\u0002\u0002\u0a83\u0a7f\u0003\u0002\u0002\u0002",
    "\u0a84\u0a89\u0003\u0002\u0002\u0002\u0a85\u0a86\u0007T\u0002\u0002",
    "\u0a86\u0a87\u0005\u00b6\\\u0002\u0a87\u0a88\b_\u0001\u0002\u0a88\u0a8a",
    "\u0003\u0002\u0002\u0002\u0a89\u0a85\u0003\u0002\u0002\u0002\u0a89\u0a8a",
    "\u0003\u0002\u0002\u0002\u0a8a\u0a8b\u0003\u0002\u0002\u0002\u0a8b\u0a8c",
    "\u0007U\u0002\u0002\u0a8c\u0ab5\u0003\u0002\u0002\u0002\u0a8d\u0a8e",
    "\u00074\u0002\u0002\u0a8e\u0a8f\u0005\u00c0a\u0002\u0a8f\u0a90\b_\u0001",
    "\u0002\u0a90\u0ab5\u0003\u0002\u0002\u0002\u0a91\u0a92\u0005\u00c0a",
    "\u0002\u0a92\u0a93\b_\u0001\u0002\u0a93\u0ab5\u0003\u0002\u0002\u0002",
    "\u0a94\u0a9a\u0007\u0007\u0002\u0002\u0a95\u0a96\u0005\u00c0a\u0002",
    "\u0a96\u0a97\b_\u0001\u0002\u0a97\u0a9b\u0003\u0002\u0002\u0002\u0a98",
    "\u0a99\u0007?\u0002\u0002\u0a99\u0a9b\b_\u0001\u0002\u0a9a\u0a95\u0003",
    "\u0002\u0002\u0002\u0a9a\u0a98\u0003\u0002\u0002\u0002\u0a9b\u0ab5\u0003",
    "\u0002\u0002\u0002\u0a9c\u0a9d\t\u0005\u0002\u0002\u0a9d\u0ab5\b_\u0001",
    "\u0002\u0a9e\u0ab2\u0007\b\u0002\u0002\u0a9f\u0aa0\u0005\u0096L\u0002",
    "\u0aa0\u0aa1\u0007\t\u0002\u0002\u0aa1\u0aa2\b_\u0001\u0002\u0aa2\u0ab3",
    "\u0003\u0002\u0002\u0002\u0aa3\u0aa4\u0005\u00aeX\u0002\u0aa4\u0aac",
    "\b_\u0001\u0002\u0aa5\u0aa6\u0007\u0005\u0002\u0002\u0aa6\u0aa7\b_\u0001",
    "\u0002\u0aa7\u0aa8\u0005\u00b6\\\u0002\u0aa8\u0aa9\b_\u0001\u0002\u0aa9",
    "\u0aab\u0003\u0002\u0002\u0002\u0aaa\u0aa5\u0003\u0002\u0002\u0002\u0aab",
    "\u0aae\u0003\u0002\u0002\u0002\u0aac\u0aaa\u0003\u0002\u0002\u0002\u0aac",
    "\u0aad\u0003\u0002\u0002\u0002\u0aad\u0aaf\u0003\u0002\u0002\u0002\u0aae",
    "\u0aac\u0003\u0002\u0002\u0002\u0aaf\u0ab0\u0007\t\u0002\u0002\u0ab0",
    "\u0ab1\b_\u0001\u0002\u0ab1\u0ab3\u0003\u0002\u0002\u0002\u0ab2\u0a9f",
    "\u0003\u0002\u0002\u0002\u0ab2\u0aa3\u0003\u0002\u0002\u0002\u0ab3\u0ab5",
    "\u0003\u0002\u0002\u0002\u0ab4\u0a65\u0003\u0002\u0002\u0002\u0ab4\u0a68",
    "\u0003\u0002\u0002\u0002\u0ab4\u0a6b\u0003\u0002\u0002\u0002\u0ab4\u0a8d",
    "\u0003\u0002\u0002\u0002\u0ab4\u0a91\u0003\u0002\u0002\u0002\u0ab4\u0a94",
    "\u0003\u0002\u0002\u0002\u0ab4\u0a9c\u0003\u0002\u0002\u0002\u0ab4\u0a9e",
    "\u0003\u0002\u0002\u0002\u0ab5\u0ab7\u0003\u0002\u0002\u0002\u0ab6\u0a61",
    "\u0003\u0002\u0002\u0002\u0ab6\u0ab4\u0003\u0002\u0002\u0002\u0ab7\u00bd",
    "\u0003\u0002\u0002\u0002\u0ab8\u0ab9\u0007<\u0002\u0002\u0ab9\u0aba",
    "\u0007\b\u0002\u0002\u0aba\u0acf\b`\u0001\u0002\u0abb\u0abc\t\n\u0002",
    "\u0002\u0abc\u0ac0\b`\u0001\u0002\u0abd\u0abe\u0005\u00b6\\\u0002\u0abe",
    "\u0abf\b`\u0001\u0002\u0abf\u0ac1\u0003\u0002\u0002\u0002\u0ac0\u0abd",
    "\u0003\u0002\u0002\u0002\u0ac0\u0ac1\u0003\u0002\u0002\u0002\u0ac1\u0ac2",
    "\u0003\u0002\u0002\u0002\u0ac2\u0ac3\u00071\u0002\u0002\u0ac3\u0ac4",
    "\u0005\u00b6\\\u0002\u0ac4\u0ac5\b`\u0001\u0002\u0ac5\u0ad0\u0003\u0002",
    "\u0002\u0002\u0ac6\u0acd\u0005\u00b6\\\u0002\u0ac7\u0ac8\b`\u0001\u0002",
    "\u0ac8\u0ac9\u00071\u0002\u0002\u0ac9\u0aca\u0005\u00b6\\\u0002\u0aca",
    "\u0acb\b`\u0001\u0002\u0acb\u0ace\u0003\u0002\u0002\u0002\u0acc\u0ace",
    "\b`\u0001\u0002\u0acd\u0ac7\u0003\u0002\u0002\u0002\u0acd\u0acc\u0003",
    "\u0002\u0002\u0002\u0ace\u0ad0\u0003\u0002\u0002\u0002\u0acf\u0abb\u0003",
    "\u0002\u0002\u0002\u0acf\u0ac6\u0003\u0002\u0002\u0002\u0ad0\u0ad1\u0003",
    "\u0002\u0002\u0002\u0ad1\u0ad2\u0007\t\u0002\u0002\u0ad2\u0ae6\u0003",
    "\u0002\u0002\u0002\u0ad3\u0ad4\u00070\u0002\u0002\u0ad4\u0ad5\u0007",
    "\b\u0002\u0002\u0ad5\u0ad6\b`\u0001\u0002\u0ad6\u0ad7\t\u000b\u0002",
    "\u0002\u0ad7\u0ad8\u00071\u0002\u0002\u0ad8\u0ad9\u0005\u00b6\\\u0002",
    "\u0ad9\u0ada\b`\u0001\u0002\u0ada\u0adb\u0007\t\u0002\u0002\u0adb\u0ae6",
    "\u0003\u0002\u0002\u0002\u0adc\u0add\u0007-\u0002\u0002\u0add\u0ade",
    "\u0007\b\u0002\u0002\u0ade\u0adf\b`\u0001\u0002\u0adf\u0ae0\u0005\u00b6",
    "\\\u0002\u0ae0\u0ae1\u0007*\u0002\u0002\u0ae1\u0ae2\u0005\u0094K\u0002",
    "\u0ae2\u0ae3\b`\u0001\u0002\u0ae3\u0ae4\u0007\t\u0002\u0002\u0ae4\u0ae6",
    "\u0003\u0002\u0002\u0002\u0ae5\u0ab8\u0003\u0002\u0002\u0002\u0ae5\u0ad3",
    "\u0003\u0002\u0002\u0002\u0ae5\u0adc\u0003\u0002\u0002\u0002\u0ae6\u00bf",
    "\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0005\u00e6t\u0002\u0ae8\u0aee",
    "\ba\u0001\u0002\u0ae9\u0aeb\u0005\u00c4c\u0002\u0aea\u0aec\u0005\u00cc",
    "g\u0002\u0aeb\u0aea\u0003\u0002\u0002\u0002\u0aeb\u0aec\u0003\u0002",
    "\u0002\u0002\u0aec\u0aef\u0003\u0002\u0002\u0002\u0aed\u0aef\u0005\u00cc",
    "g\u0002\u0aee\u0ae9\u0003\u0002\u0002\u0002\u0aee\u0aed\u0003\u0002",
    "\u0002\u0002\u0aee\u0aef\u0003\u0002\u0002\u0002\u0aef\u0afc\u0003\u0002",
    "\u0002\u0002\u0af0\u0af1\u0007\u0012\u0002\u0002\u0af1\u0af2\u0005\u00e6",
    "t\u0002\u0af2\u0af8\ba\u0001\u0002\u0af3\u0af5\u0005\u00c4c\u0002\u0af4",
    "\u0af6\u0005\u00ccg\u0002\u0af5\u0af4\u0003\u0002\u0002\u0002\u0af5",
    "\u0af6\u0003\u0002\u0002\u0002\u0af6\u0af9\u0003\u0002\u0002\u0002\u0af7",
    "\u0af9\u0005\u00ccg\u0002\u0af8\u0af3\u0003\u0002\u0002\u0002\u0af8",
    "\u0af7\u0003\u0002\u0002\u0002\u0af8\u0af9\u0003\u0002\u0002\u0002\u0af9",
    "\u0afb\u0003\u0002\u0002\u0002\u0afa\u0af0\u0003\u0002\u0002\u0002\u0afb",
    "\u0afe\u0003\u0002\u0002\u0002\u0afc\u0afa\u0003\u0002\u0002\u0002\u0afc",
    "\u0afd\u0003\u0002\u0002\u0002\u0afd\u00c1\u0003\u0002\u0002\u0002\u0afe",
    "\u0afc\u0003\u0002\u0002\u0002\u0aff\u0b00\u0007\b\u0002\u0002\u0b00",
    "\u0b06\u0005\u00c6d\u0002\u0b01\u0b02\u0007\u0005\u0002\u0002\u0b02",
    "\u0b03\bb\u0001\u0002\u0b03\u0b05\u0005\u00c6d\u0002\u0b04\u0b01\u0003",
    "\u0002\u0002\u0002\u0b05\u0b08\u0003\u0002\u0002\u0002\u0b06\u0b04\u0003",
    "\u0002\u0002\u0002\u0b06\u0b07\u0003\u0002\u0002\u0002\u0b07\u0b09\u0003",
    "\u0002\u0002\u0002\u0b08\u0b06\u0003\u0002\u0002\u0002\u0b09\u0b0a\u0007",
    "\t\u0002\u0002\u0b0a\u00c3\u0003\u0002\u0002\u0002\u0b0b\u0b0c\u0007",
    "\b\u0002\u0002\u0b0c\u0b3f\bc\u0001\u0002\u0b0d\u0b13\u0005\u00c6d\u0002",
    "\u0b0e\u0b0f\u0007\u0005\u0002\u0002\u0b0f\u0b10\bc\u0001\u0002\u0b10",
    "\u0b12\u0005\u00c6d\u0002\u0b11\u0b0e\u0003\u0002\u0002\u0002\u0b12",
    "\u0b15\u0003\u0002\u0002\u0002\u0b13\u0b11\u0003\u0002\u0002\u0002\u0b13",
    "\u0b14\u0003\u0002\u0002\u0002\u0b14\u0b40\u0003\u0002\u0002\u0002\u0b15",
    "\u0b13\u0003\u0002\u0002\u0002\u0b16\u0b17\bc\u0001\u0002\u0b17\u0b1d",
    "\u0005\u00c8e\u0002\u0b18\u0b19\u0007\u0005\u0002\u0002\u0b19\u0b1a",
    "\bc\u0001\u0002\u0b1a\u0b1c\u0005\u00c8e\u0002\u0b1b\u0b18\u0003\u0002",
    "\u0002\u0002\u0b1c\u0b1f\u0003\u0002\u0002\u0002\u0b1d\u0b1b\u0003\u0002",
    "\u0002\u0002\u0b1d\u0b1e\u0003\u0002\u0002\u0002\u0b1e\u0b40\u0003\u0002",
    "\u0002\u0002\u0b1f\u0b1d\u0003\u0002\u0002\u0002\u0b20\u0b21\bc\u0001",
    "\u0002\u0b21\u0b27\u0005\u00caf\u0002\u0b22\u0b23\u0007\u0005\u0002",
    "\u0002\u0b23\u0b24\bc\u0001\u0002\u0b24\u0b26\u0005\u00caf\u0002\u0b25",
    "\u0b22\u0003\u0002\u0002\u0002\u0b26\u0b29\u0003\u0002\u0002\u0002\u0b27",
    "\u0b25\u0003\u0002\u0002\u0002\u0b27\u0b28\u0003\u0002\u0002\u0002\u0b28",
    "\u0b40\u0003\u0002\u0002\u0002\u0b29\u0b27\u0003\u0002\u0002\u0002\u0b2a",
    "\u0b2b\u0007(\u0002\u0002\u0b2b\u0b2c\bc\u0001\u0002\u0b2c\u0b2d\u0005",
    "\u00b6\\\u0002\u0b2d\u0b2e\bc\u0001\u0002\u0b2e\u0b40\u0003\u0002\u0002",
    "\u0002\u0b2f\u0b30\u0007.\u0002\u0002\u0b30\u0b31\bc\u0001\u0002\u0b31",
    "\u0b32\u0005\u00b6\\\u0002\u0b32\u0b39\bc\u0001\u0002\u0b33\u0b34\u0007",
    "\u0005\u0002\u0002\u0b34\u0b35\u0005\u00b6\\\u0002\u0b35\u0b36\bc\u0001",
    "\u0002\u0b36\u0b38\u0003\u0002\u0002\u0002\u0b37\u0b33\u0003\u0002\u0002",
    "\u0002\u0b38\u0b3b\u0003\u0002\u0002\u0002\u0b39\u0b37\u0003\u0002\u0002",
    "\u0002\u0b39\u0b3a\u0003\u0002\u0002\u0002\u0b3a\u0b40\u0003\u0002\u0002",
    "\u0002\u0b3b\u0b39\u0003\u0002\u0002\u0002\u0b3c\u0b3d\u0007\u000e\u0002",
    "\u0002\u0b3d\u0b40\bc\u0001\u0002\u0b3e\u0b40\bc\u0001\u0002\u0b3f\u0b0d",
    "\u0003\u0002\u0002\u0002\u0b3f\u0b16\u0003\u0002\u0002\u0002\u0b3f\u0b20",
    "\u0003\u0002\u0002\u0002\u0b3f\u0b2a\u0003\u0002\u0002\u0002\u0b3f\u0b2f",
    "\u0003\u0002\u0002\u0002\u0b3f\u0b3c\u0003\u0002\u0002\u0002\u0b3f\u0b3e",
    "\u0003\u0002\u0002\u0002\u0b40\u0b41\u0003\u0002\u0002\u0002\u0b41\u0b42",
    "\u0007\t\u0002\u0002\u0b42\u00c5\u0003\u0002\u0002\u0002\u0b43\u0b44",
    "\u0005\u00e6t\u0002\u0b44\u0b45\u0007\u0007\u0002\u0002\u0b45\u0b46",
    "\u0005\u00b6\\\u0002\u0b46\u0b47\bd\u0001\u0002\u0b47\u00c7\u0003\u0002",
    "\u0002\u0002\u0b48\u0b49\u0005\u00e6t\u0002\u0b49\u0b4a\u0007\u001c",
    "\u0002\u0002\u0b4a\u0b4b\u0005\u00b6\\\u0002\u0b4b\u0b4c\be\u0001\u0002",
    "\u0b4c\u00c9\u0003\u0002\u0002\u0002\u0b4d\u0b4e\u0007\u0091\u0002\u0002",
    "\u0b4e\u0b53\bf\u0001\u0002\u0b4f\u0b50\u0005\u00b6\\\u0002\u0b50\u0b51",
    "\bf\u0001\u0002\u0b51\u0b53\u0003\u0002\u0002\u0002\u0b52\u0b4d\u0003",
    "\u0002\u0002\u0002\u0b52\u0b4f\u0003\u0002\u0002\u0002\u0b53\u00cb\u0003",
    "\u0002\u0002\u0002\u0b54\u0b56\u0007\u000f\u0002\u0002\u0b55\u0b57\u0005",
    "\u00ceh\u0002\u0b56\u0b55\u0003\u0002\u0002\u0002\u0b56\u0b57\u0003",
    "\u0002\u0002\u0002\u0b57\u0b58\u0003\u0002\u0002\u0002\u0b58\u0b59\u0005",
    "\u00d0i\u0002\u0b59\u0b5a\u0005\u00aeX\u0002\u0b5a\u0b5b\bg\u0001\u0002",
    "\u0b5b\u0b5c\u0007\u0011\u0002\u0002\u0b5c\u00cd\u0003\u0002\u0002\u0002",
    "\u0b5d\u0b5e\bh\u0001\u0002\u0b5e\u0b5f\u0007?\u0002\u0002\u0b5f\u0b60",
    "\u0007\u0007\u0002\u0002\u0b60\u0b61\bh\u0001\u0002\u0b61\u00cf\u0003",
    "\u0002\u0002\u0002\u0b62\u0b63\bi\u0001\u0002\u0b63\u0b64\u0007=\u0002",
    "\u0002\u0b64\u00d1\u0003\u0002\u0002\u0002\u0b65\u0b66\bj\u0001\u0002",
    "\u0b66\u0b67\u0007\u0004\u0002\u0002\u0b67\u0b68\bj\u0001\u0002\u0b68",
    "\u0b6e\u0005\u00d6l\u0002\u0b69\u0b6a\u0007\u0005\u0002\u0002\u0b6a",
    "\u0b6b\bj\u0001\u0002\u0b6b\u0b6d\u0005\u00d6l\u0002\u0b6c\u0b69\u0003",
    "\u0002\u0002\u0002\u0b6d\u0b70\u0003\u0002\u0002\u0002\u0b6e\u0b6c\u0003",
    "\u0002\u0002\u0002\u0b6e\u0b6f\u0003\u0002\u0002\u0002\u0b6f\u0b71\u0003",
    "\u0002\u0002\u0002\u0b70\u0b6e\u0003\u0002\u0002\u0002\u0b71\u0b72\u0007",
    "\u0006\u0002\u0002\u0b72\u0b97\u0003\u0002\u0002\u0002\u0b73\u0b74\b",
    "j\u0001\u0002\u0b74\u0b8a\u0007\u000f\u0002\u0002\u0b75\u0b76\u0005",
    "\u00d8m\u0002\u0b76\u0b77\bj\u0001\u0002\u0b77\u0b7b\u0003\u0002\u0002",
    "\u0002\u0b78\u0b79\u0007\u001d\u0002\u0002\u0b79\u0b7b\bj\u0001\u0002",
    "\u0b7a\u0b75\u0003\u0002\u0002\u0002\u0b7a\u0b78\u0003\u0002\u0002\u0002",
    "\u0b7b\u0b87\u0003\u0002\u0002\u0002\u0b7c\u0b7d\u0007\u0005\u0002\u0002",
    "\u0b7d\u0b83\bj\u0001\u0002\u0b7e\u0b7f\u0005\u00d8m\u0002\u0b7f\u0b80",
    "\bj\u0001\u0002\u0b80\u0b84\u0003\u0002\u0002\u0002\u0b81\u0b82\u0007",
    "\u001d\u0002\u0002\u0b82\u0b84\bj\u0001\u0002\u0b83\u0b7e\u0003\u0002",
    "\u0002\u0002\u0b83\u0b81\u0003\u0002\u0002\u0002\u0b84\u0b86\u0003\u0002",
    "\u0002\u0002\u0b85\u0b7c\u0003\u0002\u0002\u0002\u0b86\u0b89\u0003\u0002",
    "\u0002\u0002\u0b87\u0b85\u0003\u0002\u0002\u0002\u0b87\u0b88\u0003\u0002",
    "\u0002\u0002\u0b88\u0b8b\u0003\u0002\u0002\u0002\u0b89\u0b87\u0003\u0002",
    "\u0002\u0002\u0b8a\u0b7a\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0003\u0002",
    "\u0002\u0002\u0b8b\u0b8c\u0003\u0002\u0002\u0002\u0b8c\u0b97\u0007\u0011",
    "\u0002\u0002\u0b8d\u0b8e\u0005\u00dco\u0002\u0b8e\u0b8f\bj\u0001\u0002",
    "\u0b8f\u0b97\u0003\u0002\u0002\u0002\u0b90\u0b93\u0007\f\u0002\u0002",
    "\u0b91\u0b93\u0007\r\u0002\u0002\u0b92\u0b90\u0003\u0002\u0002\u0002",
    "\u0b92\u0b91\u0003\u0002\u0002\u0002\u0b93\u0b94\u0003\u0002\u0002\u0002",
    "\u0b94\u0b95\u0007?\u0002\u0002\u0b95\u0b97\bj\u0001\u0002\u0b96\u0b65",
    "\u0003\u0002\u0002\u0002\u0b96\u0b73\u0003\u0002\u0002\u0002\u0b96\u0b8d",
    "\u0003\u0002\u0002\u0002\u0b96\u0b92\u0003\u0002\u0002\u0002\u0b97\u00d3",
    "\u0003\u0002\u0002\u0002\u0b98\u0b99\u0005\u00d2j\u0002\u0b99\u0b9a",
    "\bk\u0001\u0002\u0b9a\u0ba4\u0003\u0002\u0002\u0002\u0b9b\u0b9d\bk\u0001",
    "\u0002\u0b9c\u0b9e\u0007\n\u0002\u0002\u0b9d\u0b9c\u0003\u0002\u0002",
    "\u0002\u0b9d\u0b9e\u0003\u0002\u0002\u0002\u0b9e\u0b9f\u0003\u0002\u0002",
    "\u0002\u0b9f\u0ba1\u0005\u00e0q\u0002\u0ba0\u0ba2\u0005\u00e2r\u0002",
    "\u0ba1\u0ba0\u0003\u0002\u0002\u0002\u0ba1\u0ba2\u0003\u0002\u0002\u0002",
    "\u0ba2\u0ba4\u0003\u0002\u0002\u0002\u0ba3\u0b98\u0003\u0002\u0002\u0002",
    "\u0ba3\u0b9b\u0003\u0002\u0002\u0002\u0ba4\u00d5\u0003\u0002\u0002\u0002",
    "\u0ba5\u0ba7\u0007\n\u0002\u0002\u0ba6\u0ba5\u0003\u0002\u0002\u0002",
    "\u0ba6\u0ba7\u0003\u0002\u0002\u0002\u0ba7\u0ba8\u0003\u0002\u0002\u0002",
    "\u0ba8\u0bae\u0005\u00e0q\u0002\u0ba9\u0baa\u0007\u001e\u0002\u0002",
    "\u0baa\u0bab\bl\u0001\u0002\u0bab\u0bac\u0005\u00e6t\u0002\u0bac\u0bad",
    "\bl\u0001\u0002\u0bad\u0baf\u0003\u0002\u0002\u0002\u0bae\u0ba9\u0003",
    "\u0002\u0002\u0002\u0bae\u0baf\u0003\u0002\u0002\u0002\u0baf\u0bb3\u0003",
    "\u0002\u0002\u0002\u0bb0\u0bb1\u0007\u0007\u0002\u0002\u0bb1\u0bb2\b",
    "l\u0001\u0002\u0bb2\u0bb4\u0005\u00d4k\u0002\u0bb3\u0bb0\u0003\u0002",
    "\u0002\u0002\u0bb3\u0bb4\u0003\u0002\u0002\u0002\u0bb4\u0bb5\u0003\u0002",
    "\u0002\u0002\u0bb5\u0bb6\bl\u0001\u0002\u0bb6\u00d7\u0003\u0002\u0002",
    "\u0002\u0bb7\u0bb8\bm\u0001\u0002\u0bb8\u0bb9\u0007\u0004\u0002\u0002",
    "\u0bb9\u0bba\bm\u0001\u0002\u0bba\u0bc0\u0005\u00dan\u0002\u0bbb\u0bbc",
    "\u0007\u0005\u0002\u0002\u0bbc\u0bbd\bm\u0001\u0002\u0bbd\u0bbf\u0005",
    "\u00dan\u0002\u0bbe\u0bbb\u0003\u0002\u0002\u0002\u0bbf\u0bc2\u0003",
    "\u0002\u0002\u0002\u0bc0\u0bbe\u0003\u0002\u0002\u0002\u0bc0\u0bc1\u0003",
    "\u0002\u0002\u0002\u0bc1\u0bc3\u0003\u0002\u0002\u0002\u0bc2\u0bc0\u0003",
    "\u0002\u0002\u0002\u0bc3\u0bc4\u0007\u0006\u0002\u0002\u0bc4\u0bec\u0003",
    "\u0002\u0002\u0002\u0bc5\u0bc6\bm\u0001\u0002\u0bc6\u0bd3\u0007\u000f",
    "\u0002\u0002\u0bc7\u0bc8\u0005\u00d8m\u0002\u0bc8\u0bd0\bm\u0001\u0002",
    "\u0bc9\u0bca\u0007\u0005\u0002\u0002\u0bca\u0bcb\bm\u0001\u0002\u0bcb",
    "\u0bcc\u0005\u00d8m\u0002\u0bcc\u0bcd\bm\u0001\u0002\u0bcd\u0bcf\u0003",
    "\u0002\u0002\u0002\u0bce\u0bc9\u0003\u0002\u0002\u0002\u0bcf\u0bd2\u0003",
    "\u0002\u0002\u0002\u0bd0\u0bce\u0003\u0002\u0002\u0002\u0bd0\u0bd1\u0003",
    "\u0002\u0002\u0002\u0bd1\u0bd4\u0003\u0002\u0002\u0002\u0bd2\u0bd0\u0003",
    "\u0002\u0002\u0002\u0bd3\u0bc7\u0003\u0002\u0002\u0002\u0bd3\u0bd4\u0003",
    "\u0002\u0002\u0002\u0bd4\u0bd5\u0003\u0002\u0002\u0002\u0bd5\u0bec\u0007",
    "\u0011\u0002\u0002\u0bd6\u0bd7\u0005\u00dco\u0002\u0bd7\u0bd8\bm\u0001",
    "\u0002\u0bd8\u0bec\u0003\u0002\u0002\u0002\u0bd9\u0bdc\u0007\f\u0002",
    "\u0002\u0bda\u0bdc\u0007\r\u0002\u0002\u0bdb\u0bd9\u0003\u0002\u0002",
    "\u0002\u0bdb\u0bda\u0003\u0002\u0002\u0002\u0bdc\u0bdd\u0003\u0002\u0002",
    "\u0002\u0bdd\u0bde\u0007?\u0002\u0002\u0bde\u0bec\bm\u0001\u0002\u0bdf",
    "\u0be1\bm\u0001\u0002\u0be0\u0be2\u0007\n\u0002\u0002\u0be1\u0be0\u0003",
    "\u0002\u0002\u0002\u0be1\u0be2\u0003\u0002\u0002\u0002\u0be2\u0be3\u0003",
    "\u0002\u0002\u0002\u0be3\u0be9\u0005\u00e0q\u0002\u0be4\u0be5\u0007",
    "\u001e\u0002\u0002\u0be5\u0be6\bm\u0001\u0002\u0be6\u0be7\u0005\u00e6",
    "t\u0002\u0be7\u0be8\bm\u0001\u0002\u0be8\u0bea\u0003\u0002\u0002\u0002",
    "\u0be9\u0be4\u0003\u0002\u0002\u0002\u0be9\u0bea\u0003\u0002\u0002\u0002",
    "\u0bea\u0bec\u0003\u0002\u0002\u0002\u0beb\u0bb7\u0003\u0002\u0002\u0002",
    "\u0beb\u0bc5\u0003\u0002\u0002\u0002\u0beb\u0bd6\u0003\u0002\u0002\u0002",
    "\u0beb\u0bdb\u0003\u0002\u0002\u0002\u0beb\u0bdf\u0003\u0002\u0002\u0002",
    "\u0bec\u00d9\u0003\u0002\u0002\u0002\u0bed\u0bef\u0007\n\u0002\u0002",
    "\u0bee\u0bed\u0003\u0002\u0002\u0002\u0bee\u0bef\u0003\u0002\u0002\u0002",
    "\u0bef\u0bf0\u0003\u0002\u0002\u0002\u0bf0\u0bf3\u0005\u00e0q\u0002",
    "\u0bf1\u0bf2\u0007\u0007\u0002\u0002\u0bf2\u0bf4\u0005\u00d8m\u0002",
    "\u0bf3\u0bf1\u0003\u0002\u0002\u0002\u0bf3\u0bf4\u0003\u0002\u0002\u0002",
    "\u0bf4\u0bf5\u0003\u0002\u0002\u0002\u0bf5\u0bf6\bn\u0001\u0002\u0bf6",
    "\u00db\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0007\u001e\u0002\u0002\u0bf8",
    "\u0bf9\u0005\u00e6t\u0002\u0bf9\u0bfa\bo\u0001\u0002\u0bfa\u0c06\u0003",
    "\u0002\u0002\u0002\u0bfb\u0bfc\u00076\u0002\u0002\u0bfc\u0c06\bo\u0001",
    "\u0002\u0bfd\u0bfe\u0007\'\u0002\u0002\u0bfe\u0c06\bo\u0001\u0002\u0bff",
    "\u0c00\u0007?\u0002\u0002\u0c00\u0c06\bo\u0001\u0002\u0c01\u0c02\u0007",
    "#\u0002\u0002\u0c02\u0c06\bo\u0001\u0002\u0c03\u0c04\u0007$\u0002\u0002",
    "\u0c04\u0c06\bo\u0001\u0002\u0c05\u0bf7\u0003\u0002\u0002\u0002\u0c05",
    "\u0bfb\u0003\u0002\u0002\u0002\u0c05\u0bfd\u0003\u0002\u0002\u0002\u0c05",
    "\u0bff\u0003\u0002\u0002\u0002\u0c05\u0c01\u0003\u0002\u0002\u0002\u0c05",
    "\u0c03\u0003\u0002\u0002\u0002\u0c06\u00dd\u0003\u0002\u0002\u0002\u0c07",
    "\u0c08\u0005\u00e6t\u0002\u0c08\u0c0f\bp\u0001\u0002\u0c09\u0c0a\u0007",
    "\u0012\u0002\u0002\u0c0a\u0c0b\u0005\u00e6t\u0002\u0c0b\u0c0c\bp\u0001",
    "\u0002\u0c0c\u0c0e\u0003\u0002\u0002\u0002\u0c0d\u0c09\u0003\u0002\u0002",
    "\u0002\u0c0e\u0c11\u0003\u0002\u0002\u0002\u0c0f\u0c0d\u0003\u0002\u0002",
    "\u0002\u0c0f\u0c10\u0003\u0002\u0002\u0002\u0c10\u00df\u0003\u0002\u0002",
    "\u0002\u0c11\u0c0f\u0003\u0002\u0002\u0002\u0c12\u0c13\u0005\u00e6t",
    "\u0002\u0c13\u0c1d\bq\u0001\u0002\u0c14\u0c16\u0007\u0012\u0002\u0002",
    "\u0c15\u0c17\u0007\n\u0002\u0002\u0c16\u0c15\u0003\u0002\u0002\u0002",
    "\u0c16\u0c17\u0003\u0002\u0002\u0002\u0c17\u0c18\u0003\u0002\u0002\u0002",
    "\u0c18\u0c19\u0005\u00e6t\u0002\u0c19\u0c1a\bq\u0001\u0002\u0c1a\u0c1c",
    "\u0003\u0002\u0002\u0002\u0c1b\u0c14\u0003\u0002\u0002\u0002\u0c1c\u0c1f",
    "\u0003\u0002\u0002\u0002\u0c1d\u0c1b\u0003\u0002\u0002\u0002\u0c1d\u0c1e",
    "\u0003\u0002\u0002\u0002\u0c1e\u00e1\u0003\u0002\u0002\u0002\u0c1f\u0c1d",
    "\u0003\u0002\u0002\u0002\u0c20\u0c21\u0007\u001e\u0002\u0002\u0c21\u0c22",
    "\br\u0001\u0002\u0c22\u0c23\u0005\u00e6t\u0002\u0c23\u0c24\br\u0001",
    "\u0002\u0c24\u00e3\u0003\u0002\u0002\u0002\u0c25\u0c26\u0007\u008b\u0002",
    "\u0002\u0c26\u00e5\u0003\u0002\u0002\u0002\u0c27\u0c28\t\f\u0002\u0002",
    "\u0c28\u00e7\u0003\u0002\u0002\u0002\u01a3\u00eb\u00f1\u00f3\u00f9\u00fb",
    "\u00fe\u0119\u011e\u0128\u012f\u0131\u013c\u0142\u0149\u0153\u015d\u0161",
    "\u0168\u016f\u0171\u017d\u0187\u0190\u0192\u0194\u0196\u019b\u019f\u01a5",
    "\u01a9\u01b3\u01bd\u01c2\u01c6\u01cd\u01d4\u01da\u01de\u01e4\u01ea\u01f1",
    "\u01f7\u01ff\u0203\u020c\u020f\u0216\u021f\u0223\u022e\u0234\u023e\u0242",
    "\u0246\u0248\u0251\u0257\u025a\u025d\u0263\u026f\u0272\u0278\u027d\u0282",
    "\u028c\u029c\u02a3\u02a9\u02ad\u02b3\u02bc\u02c0\u02c8\u02ce\u02d5\u02db",
    "\u02e6\u02e9\u02f1\u02f5\u02fd\u0303\u0309\u0312\u0318\u0320\u0326\u032e",
    "\u0334\u033c\u0342\u034a\u0359\u0363\u0367\u0370\u0372\u0377\u037a\u0381",
    "\u038b\u038e\u0390\u0397\u03a0\u03a4\u03ae\u03c3\u03d1\u03db\u03e1\u03e7",
    "\u03ee\u03f4\u03f6\u03fc\u0402\u0409\u0412\u0416\u041e\u042a\u0433\u0439",
    "\u0440\u0446\u044c\u0454\u045b\u0461\u0467\u046f\u0479\u047e\u0485\u048b",
    "\u0491\u0499\u04a0\u04a8\u04b2\u04b6\u04bc\u04bf\u04c7\u04cd\u04d3\u04df",
    "\u04e2\u04e9\u04eb\u04f1\u04f8\u04fe\u0501\u0504\u0507\u050e\u0516\u051b",
    "\u051e\u0539\u0540\u0544\u0547\u054b\u0551\u0556\u055c\u0565\u056a\u056c",
    "\u056e\u0574\u057a\u0586\u058e\u0591\u059a\u05a3\u05a8\u05ab\u05b2\u05b5",
    "\u05b9\u05c2\u05c7\u05ca\u05d5\u05dc\u05df\u05e7\u05ec\u05ef\u05fe\u0604",
    "\u060a\u060e\u0610\u0615\u061b\u0621\u062e\u0631\u0638\u0640\u0643\u0645",
    "\u064c\u0653\u0656\u065e\u066a\u066d\u0675\u067d\u0685\u068b\u0695\u0698",
    "\u06a0\u06a8\u06b0\u06b7\u06be\u06c5\u06ca\u06d2\u06dd\u06e0\u06ee\u06f3",
    "\u06f7\u06ff\u0703\u0705\u0707\u070d\u0712\u0716\u071e\u0723\u0725\u0734",
    "\u0737\u0740\u0744\u074a\u0750\u0757\u075d\u0766\u076c\u076e\u0775\u0781",
    "\u0791\u0799\u07a2\u07a8\u07b1\u07ba\u07c0\u07c6\u07cf\u07d5\u07dd\u07e3",
    "\u07e5\u07e7\u07ee\u07f8\u0802\u0806\u080a\u080e\u0816\u081a\u081c\u0820",
    "\u0826\u082a\u0836\u0839\u0840\u084a\u084d\u0851\u0858\u085e\u0873\u0878",
    "\u087e\u0880\u0887\u0892\u089e\u08a5\u08ab\u08af\u08b3\u08b5\u08bc\u08c2",
    "\u08c7\u08d4\u08dd\u08e2\u08ea\u08ef\u08f5\u08fc\u090d\u0912\u0916\u0919",
    "\u091c\u0920\u0926\u092d\u0932\u0938\u0944\u0947\u094d\u094f\u095a\u095c",
    "\u096d\u096f\u0976\u097c\u097f\u0985\u0988\u098e\u0991\u0995\u099a\u09a0",
    "\u09a4\u09aa\u09b1\u09ba\u09c7\u09cd\u09cf\u09d5\u09d8\u09df\u09e2\u09e6",
    "\u09f1\u09fc\u0a0e\u0a15\u0a1e\u0a26\u0a28\u0a3c\u0a3e\u0a48\u0a53\u0a5e",
    "\u0a77\u0a81\u0a83\u0a89\u0a9a\u0aac\u0ab2\u0ab4\u0ab6\u0ac0\u0acd\u0acf",
    "\u0ae5\u0aeb\u0aee\u0af5\u0af8\u0afc\u0b06\u0b13\u0b1d\u0b27\u0b39\u0b3f",
    "\u0b52\u0b56\u0b6e\u0b7a\u0b83\u0b87\u0b8a\u0b92\u0b96\u0b9d\u0ba1\u0ba3",
    "\u0ba6\u0bae\u0bb3\u0bc0\u0bd0\u0bd3\u0bdb\u0be1\u0be9\u0beb\u0bee\u0bf3",
    "\u0c05\u0c0f\u0c16\u0c1d"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'{'", "','", "'}'", "':'", "'('", "')'", 
                     "'@'", "'='", "'+'", "'-'", "'*'", "'['", "'..'", "']'", 
                     "'.'", "'?'", "'<>'", "'>'", "'>='", "'<'", "'<='", 
                     "'!='", "'||'", "'/'", "'=>'", "'...'", "'#'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, "WhiteSpace", "DocComment", "Comment", 
                      "LineComment", "String", "QuotedLiteral", "UnterminatedLiteral", 
                      "UnterminatedDelimitedIdentifier", "Boolean", "ALL", 
                      "ANY", "AS", "BY", "CASE", "CAST", "DISTINCT", "EXISTS", 
                      "EXTRACT", "FROM", "IN", "KEY", "NEW", "NOT", "NULL", 
                      "OF", "ON", "SELECT", "SOME", "WHEN", "TRIM", "WHERE", 
                      "WITH", "Number", "ABSTRACT", "ACTION", "ACTIONS", 
                      "AND", "ANNOTATE", "ANNOTATION", "ARRAY", "ASC", "ASPECT", 
                      "ASSOCIATION", "BETWEEN", "BOTH", "COMPOSITION", "CONTEXT", 
                      "CROSS", "DAY", "DEFAULT", "DEFINE", "DESC", "ELEMENT", 
                      "ELSE", "END", "ENTITY", "ENUM", "EVENT", "ESCAPE", 
                      "EXACT", "EXCEPT", "EXCLUDING", "EXTEND", "FIRST", 
                      "FULL", "FUNCTION", "GROUP", "HAVING", "HOUR", "INNER", 
                      "INTERSECT", "INTO", "IS", "JOIN", "LAST", "LEADING", 
                      "LEFT", "LIKE", "LIMIT", "LOCALIZED", "MANY", "MASKED", 
                      "MINUS", "MINUTE", "MIXIN", "MONTH", "NAMESPACE", 
                      "NULLS", "OFFSET", "ONE", "OR", "ORDER", "OUTER", 
                      "PARAMETERS", "PROJECTION", "REDIRECTED", "RETURNS", 
                      "RIGHT", "SECOND", "SERVICE", "THEN", "TRAILING", 
                      "TO", "TYPE", "UNION", "USING", "VIEW", "YEAR", "Identifier", 
                      "IllegalToken", "VIRTUAL", "HelperToken1", "HelperToken2", 
                      "HideAlternatives", "GenericArgFull", "DOTbeforeBRACE", 
                      "COMPOSITIONofBRACE" ];

var ruleNames =  [ "start", "queryEOF", "conditionEOF", "namespaceDeclaration", 
                   "usingDeclaration", "innerUsing", "externalPath", "annotationAssignment_1", 
                   "annotationAssignment_paren", "annotationAssignment_fix", 
                   "annotationAssignment_ll1", "annotationAssignment_atn", 
                   "requiredSemi", "optionalSemi", "artifactDef", "contextDef", 
                   "extendContext", "entityDef", "projectionSpec", "projectionClauses", 
                   "excludingClause", "projectionExclusion", "extendEntity", 
                   "extendForEntity", "extendProjection", "actionFunctionDef", 
                   "actionFunctionMainDef", "eventDef", "aspectDef", "typeDef", 
                   "extendType", "extendAspect", "annotationDef", "extendArtifact", 
                   "extendWithOptElements", "annotateArtifact", "annotateElement", 
                   "annotateAction", "annotateParam", "enumSymbolDef", "elementDefOrExtend", 
                   "elementDef", "mixinElementDef", "misplacedAnnotations", 
                   "elementDefInner", "extendElement", "bracedSelectItemListDef", 
                   "selectItemDef", "selectItemDefBody", "selectItemInlineList", 
                   "selectItemInlineDef", "parameterListDef", "parameterDef", 
                   "entityParameters", "entityParameterDef", "nullability", 
                   "elementProperties", "viewDef", "includeRef", "typeSpec", 
                   "returnTypeSpec", "typeSpecSemi", "typeStruct", "typeCompoStruct", 
                   "typeArray", "typeAssociationBase", "typeAssociationCont", 
                   "typeAssociationElementCont", "typeToOne", "typeToMany", 
                   "cardinality", "foreignKey", "typeTypeOf", "typeRefOptArgs", 
                   "queryExpression", "orderByClause", "limitClause", "orderBySpec", 
                   "queryTerm", "queryPrimary", "querySource", "tableExpression", 
                   "joinOp", "joinCardinality", "tableTerm", "fromPath", 
                   "condition", "conditionAnd", "conditionTerm", "predicate", 
                   "expression", "expressionSum", "expressionFactor", "expressionTerm", 
                   "specialFunction", "valuePath", "fromArguments", "pathArguments", 
                   "namedExpression", "arrowedExpression", "funcExpression", 
                   "cardinalityAndFilter", "optionalCardinality", "optionalWhereForFilter", 
                   "annoValueBase", "annoValue", "namedValue", "arrayValue", 
                   "namedValueInArray", "literalValue", "simplePath", "annotationPath", 
                   "annotationPathVariant", "identNoKeyword", "ident" ];

function languageParser (input) {
	genericAntlrParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

languageParser.prototype = Object.create(genericAntlrParser.prototype);
languageParser.prototype.constructor = languageParser;

Object.defineProperty(languageParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

languageParser.EOF = antlr4.Token.EOF;
languageParser.T__0 = 1;
languageParser.T__1 = 2;
languageParser.T__2 = 3;
languageParser.T__3 = 4;
languageParser.T__4 = 5;
languageParser.T__5 = 6;
languageParser.T__6 = 7;
languageParser.T__7 = 8;
languageParser.T__8 = 9;
languageParser.T__9 = 10;
languageParser.T__10 = 11;
languageParser.T__11 = 12;
languageParser.T__12 = 13;
languageParser.T__13 = 14;
languageParser.T__14 = 15;
languageParser.T__15 = 16;
languageParser.T__16 = 17;
languageParser.T__17 = 18;
languageParser.T__18 = 19;
languageParser.T__19 = 20;
languageParser.T__20 = 21;
languageParser.T__21 = 22;
languageParser.T__22 = 23;
languageParser.T__23 = 24;
languageParser.T__24 = 25;
languageParser.T__25 = 26;
languageParser.T__26 = 27;
languageParser.T__27 = 28;
languageParser.WhiteSpace = 29;
languageParser.DocComment = 30;
languageParser.Comment = 31;
languageParser.LineComment = 32;
languageParser.String = 33;
languageParser.QuotedLiteral = 34;
languageParser.UnterminatedLiteral = 35;
languageParser.UnterminatedDelimitedIdentifier = 36;
languageParser.Boolean = 37;
languageParser.ALL = 38;
languageParser.ANY = 39;
languageParser.AS = 40;
languageParser.BY = 41;
languageParser.CASE = 42;
languageParser.CAST = 43;
languageParser.DISTINCT = 44;
languageParser.EXISTS = 45;
languageParser.EXTRACT = 46;
languageParser.FROM = 47;
languageParser.IN = 48;
languageParser.KEY = 49;
languageParser.NEW = 50;
languageParser.NOT = 51;
languageParser.NULL = 52;
languageParser.OF = 53;
languageParser.ON = 54;
languageParser.SELECT = 55;
languageParser.SOME = 56;
languageParser.WHEN = 57;
languageParser.TRIM = 58;
languageParser.WHERE = 59;
languageParser.WITH = 60;
languageParser.Number = 61;
languageParser.ABSTRACT = 62;
languageParser.ACTION = 63;
languageParser.ACTIONS = 64;
languageParser.AND = 65;
languageParser.ANNOTATE = 66;
languageParser.ANNOTATION = 67;
languageParser.ARRAY = 68;
languageParser.ASC = 69;
languageParser.ASPECT = 70;
languageParser.ASSOCIATION = 71;
languageParser.BETWEEN = 72;
languageParser.BOTH = 73;
languageParser.COMPOSITION = 74;
languageParser.CONTEXT = 75;
languageParser.CROSS = 76;
languageParser.DAY = 77;
languageParser.DEFAULT = 78;
languageParser.DEFINE = 79;
languageParser.DESC = 80;
languageParser.ELEMENT = 81;
languageParser.ELSE = 82;
languageParser.END = 83;
languageParser.ENTITY = 84;
languageParser.ENUM = 85;
languageParser.EVENT = 86;
languageParser.ESCAPE = 87;
languageParser.EXACT = 88;
languageParser.EXCEPT = 89;
languageParser.EXCLUDING = 90;
languageParser.EXTEND = 91;
languageParser.FIRST = 92;
languageParser.FULL = 93;
languageParser.FUNCTION = 94;
languageParser.GROUP = 95;
languageParser.HAVING = 96;
languageParser.HOUR = 97;
languageParser.INNER = 98;
languageParser.INTERSECT = 99;
languageParser.INTO = 100;
languageParser.IS = 101;
languageParser.JOIN = 102;
languageParser.LAST = 103;
languageParser.LEADING = 104;
languageParser.LEFT = 105;
languageParser.LIKE = 106;
languageParser.LIMIT = 107;
languageParser.LOCALIZED = 108;
languageParser.MANY = 109;
languageParser.MASKED = 110;
languageParser.MINUS = 111;
languageParser.MINUTE = 112;
languageParser.MIXIN = 113;
languageParser.MONTH = 114;
languageParser.NAMESPACE = 115;
languageParser.NULLS = 116;
languageParser.OFFSET = 117;
languageParser.ONE = 118;
languageParser.OR = 119;
languageParser.ORDER = 120;
languageParser.OUTER = 121;
languageParser.PARAMETERS = 122;
languageParser.PROJECTION = 123;
languageParser.REDIRECTED = 124;
languageParser.RETURNS = 125;
languageParser.RIGHT = 126;
languageParser.SECOND = 127;
languageParser.SERVICE = 128;
languageParser.THEN = 129;
languageParser.TRAILING = 130;
languageParser.TO = 131;
languageParser.TYPE = 132;
languageParser.UNION = 133;
languageParser.USING = 134;
languageParser.VIEW = 135;
languageParser.YEAR = 136;
languageParser.Identifier = 137;
languageParser.IllegalToken = 138;
languageParser.VIRTUAL = 139;
languageParser.HelperToken1 = 140;
languageParser.HelperToken2 = 141;
languageParser.HideAlternatives = 142;
languageParser.GenericArgFull = 143;
languageParser.DOTbeforeBRACE = 144;
languageParser.COMPOSITIONofBRACE = 145;

languageParser.RULE_start = 0;
languageParser.RULE_queryEOF = 1;
languageParser.RULE_conditionEOF = 2;
languageParser.RULE_namespaceDeclaration = 3;
languageParser.RULE_usingDeclaration = 4;
languageParser.RULE_innerUsing = 5;
languageParser.RULE_externalPath = 6;
languageParser.RULE_annotationAssignment_1 = 7;
languageParser.RULE_annotationAssignment_paren = 8;
languageParser.RULE_annotationAssignment_fix = 9;
languageParser.RULE_annotationAssignment_ll1 = 10;
languageParser.RULE_annotationAssignment_atn = 11;
languageParser.RULE_requiredSemi = 12;
languageParser.RULE_optionalSemi = 13;
languageParser.RULE_artifactDef = 14;
languageParser.RULE_contextDef = 15;
languageParser.RULE_extendContext = 16;
languageParser.RULE_entityDef = 17;
languageParser.RULE_projectionSpec = 18;
languageParser.RULE_projectionClauses = 19;
languageParser.RULE_excludingClause = 20;
languageParser.RULE_projectionExclusion = 21;
languageParser.RULE_extendEntity = 22;
languageParser.RULE_extendForEntity = 23;
languageParser.RULE_extendProjection = 24;
languageParser.RULE_actionFunctionDef = 25;
languageParser.RULE_actionFunctionMainDef = 26;
languageParser.RULE_eventDef = 27;
languageParser.RULE_aspectDef = 28;
languageParser.RULE_typeDef = 29;
languageParser.RULE_extendType = 30;
languageParser.RULE_extendAspect = 31;
languageParser.RULE_annotationDef = 32;
languageParser.RULE_extendArtifact = 33;
languageParser.RULE_extendWithOptElements = 34;
languageParser.RULE_annotateArtifact = 35;
languageParser.RULE_annotateElement = 36;
languageParser.RULE_annotateAction = 37;
languageParser.RULE_annotateParam = 38;
languageParser.RULE_enumSymbolDef = 39;
languageParser.RULE_elementDefOrExtend = 40;
languageParser.RULE_elementDef = 41;
languageParser.RULE_mixinElementDef = 42;
languageParser.RULE_misplacedAnnotations = 43;
languageParser.RULE_elementDefInner = 44;
languageParser.RULE_extendElement = 45;
languageParser.RULE_bracedSelectItemListDef = 46;
languageParser.RULE_selectItemDef = 47;
languageParser.RULE_selectItemDefBody = 48;
languageParser.RULE_selectItemInlineList = 49;
languageParser.RULE_selectItemInlineDef = 50;
languageParser.RULE_parameterListDef = 51;
languageParser.RULE_parameterDef = 52;
languageParser.RULE_entityParameters = 53;
languageParser.RULE_entityParameterDef = 54;
languageParser.RULE_nullability = 55;
languageParser.RULE_elementProperties = 56;
languageParser.RULE_viewDef = 57;
languageParser.RULE_includeRef = 58;
languageParser.RULE_typeSpec = 59;
languageParser.RULE_returnTypeSpec = 60;
languageParser.RULE_typeSpecSemi = 61;
languageParser.RULE_typeStruct = 62;
languageParser.RULE_typeCompoStruct = 63;
languageParser.RULE_typeArray = 64;
languageParser.RULE_typeAssociationBase = 65;
languageParser.RULE_typeAssociationCont = 66;
languageParser.RULE_typeAssociationElementCont = 67;
languageParser.RULE_typeToOne = 68;
languageParser.RULE_typeToMany = 69;
languageParser.RULE_cardinality = 70;
languageParser.RULE_foreignKey = 71;
languageParser.RULE_typeTypeOf = 72;
languageParser.RULE_typeRefOptArgs = 73;
languageParser.RULE_queryExpression = 74;
languageParser.RULE_orderByClause = 75;
languageParser.RULE_limitClause = 76;
languageParser.RULE_orderBySpec = 77;
languageParser.RULE_queryTerm = 78;
languageParser.RULE_queryPrimary = 79;
languageParser.RULE_querySource = 80;
languageParser.RULE_tableExpression = 81;
languageParser.RULE_joinOp = 82;
languageParser.RULE_joinCardinality = 83;
languageParser.RULE_tableTerm = 84;
languageParser.RULE_fromPath = 85;
languageParser.RULE_condition = 86;
languageParser.RULE_conditionAnd = 87;
languageParser.RULE_conditionTerm = 88;
languageParser.RULE_predicate = 89;
languageParser.RULE_expression = 90;
languageParser.RULE_expressionSum = 91;
languageParser.RULE_expressionFactor = 92;
languageParser.RULE_expressionTerm = 93;
languageParser.RULE_specialFunction = 94;
languageParser.RULE_valuePath = 95;
languageParser.RULE_fromArguments = 96;
languageParser.RULE_pathArguments = 97;
languageParser.RULE_namedExpression = 98;
languageParser.RULE_arrowedExpression = 99;
languageParser.RULE_funcExpression = 100;
languageParser.RULE_cardinalityAndFilter = 101;
languageParser.RULE_optionalCardinality = 102;
languageParser.RULE_optionalWhereForFilter = 103;
languageParser.RULE_annoValueBase = 104;
languageParser.RULE_annoValue = 105;
languageParser.RULE_namedValue = 106;
languageParser.RULE_arrayValue = 107;
languageParser.RULE_namedValueInArray = 108;
languageParser.RULE_literalValue = 109;
languageParser.RULE_simplePath = 110;
languageParser.RULE_annotationPath = 111;
languageParser.RULE_annotationPathVariant = 112;
languageParser.RULE_identNoKeyword = 113;
languageParser.RULE_ident = 114;


function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_start;
    this.source = { kind: 'source' }
    this._sync = 'recover'
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

StartContext.prototype.usingDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingDeclarationContext);
    } else {
        return this.getTypedRuleContext(UsingDeclarationContext,i);
    }
};

StartContext.prototype.namespaceDeclaration = function() {
    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
};

StartContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.StartContext = StartContext;

languageParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, languageParser.RULE_start);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.USING) {
            this.state = 230;
            this.usingDeclaration(localctx.source);
            this.state = 235;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 252;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.NAMESPACE:
        	this.state = 236;
        	this.namespaceDeclaration(localctx.source);
        	this.state = 241;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.EXTEND - 62)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.SERVICE - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
        	    this.state = 239;
        	    this._errHandler.sync(this);
        	    switch(this._input.LA(1)) {
        	    case languageParser.USING:
        	        this.state = 237;
        	        this.usingDeclaration(localctx.source);
        	        break;
        	    case languageParser.T__7:
        	    case languageParser.ABSTRACT:
        	    case languageParser.ACTION:
        	    case languageParser.ANNOTATE:
        	    case languageParser.ANNOTATION:
        	    case languageParser.ASPECT:
        	    case languageParser.CONTEXT:
        	    case languageParser.DEFINE:
        	    case languageParser.ENTITY:
        	    case languageParser.EVENT:
        	    case languageParser.EXTEND:
        	    case languageParser.FUNCTION:
        	    case languageParser.SERVICE:
        	    case languageParser.TYPE:
        	    case languageParser.VIEW:
        	    case languageParser.HideAlternatives:
        	        this.state = 238;
        	        this.artifactDef(localctx.source);
        	        break;
        	    default:
        	        throw new antlr4.error.NoViableAltException(this);
        	    }
        	    this.state = 243;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXTEND:
        case languageParser.FUNCTION:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.VIEW:
        case languageParser.HideAlternatives:
        	this.state = 244;
        	this.artifactDef(localctx.source);
        	this.state = 249;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.EXTEND - 62)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.SERVICE - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.USING - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
        	    this.state = 247;
        	    this._errHandler.sync(this);
        	    switch(this._input.LA(1)) {
        	    case languageParser.USING:
        	        this.state = 245;
        	        this.usingDeclaration(localctx.source);
        	        break;
        	    case languageParser.T__7:
        	    case languageParser.ABSTRACT:
        	    case languageParser.ACTION:
        	    case languageParser.ANNOTATE:
        	    case languageParser.ANNOTATION:
        	    case languageParser.ASPECT:
        	    case languageParser.CONTEXT:
        	    case languageParser.DEFINE:
        	    case languageParser.ENTITY:
        	    case languageParser.EVENT:
        	    case languageParser.EXTEND:
        	    case languageParser.FUNCTION:
        	    case languageParser.SERVICE:
        	    case languageParser.TYPE:
        	    case languageParser.VIEW:
        	    case languageParser.HideAlternatives:
        	        this.state = 246;
        	        this.artifactDef(localctx.source);
        	        break;
        	    default:
        	        throw new antlr4.error.NoViableAltException(this);
        	    }
        	    this.state = 251;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.EOF:
        	break;
        default:
        	break;
        }
        this.state = 254;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryEOFContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryEOF;
    this.query = null
    this.q = null; // QueryExpressionContext
    return this;
}

QueryEOFContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryEOFContext.prototype.constructor = QueryEOFContext;

QueryEOFContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

QueryEOFContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};




languageParser.QueryEOFContext = QueryEOFContext;

languageParser.prototype.queryEOF = function() {

    var localctx = new QueryEOFContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, languageParser.RULE_queryEOF);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        localctx.q = this.queryExpression();
         localctx.query =  localctx.q.query 
        this.state = 258;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionEOFContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionEOF;
    this.cond = null
    this.c = null; // ConditionContext
    return this;
}

ConditionEOFContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionEOFContext.prototype.constructor = ConditionEOFContext;

ConditionEOFContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

ConditionEOFContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};




languageParser.ConditionEOFContext = ConditionEOFContext;

languageParser.prototype.conditionEOF = function() {

    var localctx = new ConditionEOFContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, languageParser.RULE_conditionEOF);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        localctx.c = this.condition();
         localctx.cond =  localctx.c.cond 
        this.state = 262;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamespaceDeclarationContext(parser, parent, invokingState, source) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namespaceDeclaration;
    this.source = null
    this.decl = {}
    this.source = source || null;
    return this;
}

NamespaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceDeclarationContext.prototype.constructor = NamespaceDeclarationContext;

NamespaceDeclarationContext.prototype.NAMESPACE = function() {
    return this.getToken(languageParser.NAMESPACE, 0);
};

NamespaceDeclarationContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.NamespaceDeclarationContext = NamespaceDeclarationContext;

languageParser.prototype.namespaceDeclaration = function(source) {

    var localctx = new NamespaceDeclarationContext(this, this._ctx, this.state, source);
    this.enterRule(localctx, 6, languageParser.RULE_namespaceDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 264;
        this.match(languageParser.NAMESPACE);
        this.state = 265;
        this.simplePath( localctx.decl, 'Namespace' );
        this.state = 266;
        this.match(languageParser.T__0);
        this._ctx.stop = this._input.LT(-1);
         localctx.source.namespace = this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingDeclarationContext(parser, parent, invokingState, source) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_usingDeclaration;
    this.source = null
    this.decl = null
    this.str = null; // Token
    this.path = null; // ExternalPathContext
    this.name = null; // IdentContext
    this.source = source || null;
    return this;
}

UsingDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingDeclarationContext.prototype.constructor = UsingDeclarationContext;

UsingDeclarationContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

UsingDeclarationContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

UsingDeclarationContext.prototype.innerUsing = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InnerUsingContext);
    } else {
        return this.getTypedRuleContext(InnerUsingContext,i);
    }
};

UsingDeclarationContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

UsingDeclarationContext.prototype.externalPath = function() {
    return this.getTypedRuleContext(ExternalPathContext,0);
};

UsingDeclarationContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

UsingDeclarationContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.UsingDeclarationContext = UsingDeclarationContext;

languageParser.prototype.usingDeclaration = function(source) {

    var localctx = new UsingDeclarationContext(this, this._ctx, this.state, source);
    this.enterRule(localctx, 8, languageParser.RULE_usingDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(languageParser.USING);
        this.state = 303;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.FROM:
            this.state = 269;
            this.match(languageParser.FROM);
            this.state = 270;
            localctx.str = this.match(languageParser.String);

                     if (!localctx.source.dependencies) localctx.source.dependencies = [];
                     localctx.source.dependencies.push( this.quotedLiteral( localctx.str, 'string' ) );
                  
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.state = 272;
            localctx.path = this.externalPath();
             localctx.decl =  this.addItem( localctx.source, 'usings', 'using', [], { extern: localctx.path.extern } ) 
            this.state = 279;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 274;
                this.match(languageParser.AS);
                this.state = 275;
                localctx.name = this.ident('Using');
                 localctx.decl.name = localctx.name.id; 
                break;
            case languageParser.T__0:
            case languageParser.FROM:
                 this.classifyImplicitName( 'Using' ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FROM) {
                this.state = 281;
                this.match(languageParser.FROM);
                this.state = 282;
                localctx.str = this.match(languageParser.String);

                          if (!localctx.source.dependencies) localctx.source.dependencies = [];
                          localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) );
                        
            }

            break;
        case languageParser.T__1:
             localctx.decl =  this.addItem( localctx.source, 'usings', 'using', [] ) 
            this.state = 287;
            this.match(languageParser.T__1);
            this.state = 288;
            this.innerUsing( localctx.decl );
            this.state = 294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 289;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 291;
                this.innerUsing( localctx.decl );
                this.state = 296;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 297;
            this.match(languageParser.T__3);
            this.state = 301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FROM) {
                this.state = 298;
                this.match(languageParser.FROM);
                this.state = 299;
                localctx.str = this.match(languageParser.String);

                          if (!localctx.source.dependencies) localctx.source.dependencies = [];
                          localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) );
                        
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 305;
        this.match(languageParser.T__0);
        this._ctx.stop = this._input.LT(-1);
         if (localctx.decl) this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InnerUsingContext(parser, parent, invokingState, using) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_innerUsing;
    this.using = null
    this.decl = null
    this.path = null; // ExternalPathContext
    this.name = null; // IdentContext
    this.using = using || null;
    return this;
}

InnerUsingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerUsingContext.prototype.constructor = InnerUsingContext;

InnerUsingContext.prototype.externalPath = function() {
    return this.getTypedRuleContext(ExternalPathContext,0);
};

InnerUsingContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

InnerUsingContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.InnerUsingContext = InnerUsingContext;

languageParser.prototype.innerUsing = function(using) {

    var localctx = new InnerUsingContext(this, this._ctx, this.state, using);
    this.enterRule(localctx, 10, languageParser.RULE_innerUsing);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 307;
        localctx.path = this.externalPath();
         localctx.decl =  this.addItem( localctx.using, 'usings', 'using', null, { extern: localctx.path.extern } ) 
        this.state = 314;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.AS:
            this.state = 309;
            this.match(languageParser.AS);
            this.state = 310;
            localctx.name = this.ident('Using');
             localctx.decl.name = localctx.name.id; 
            break;
        case languageParser.T__2:
        case languageParser.T__3:
             this.classifyImplicitName( 'Using' ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.decl) this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExternalPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_externalPath;
    this.extern = {}
    return this;
}

ExternalPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalPathContext.prototype.constructor = ExternalPathContext;

ExternalPathContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.ExternalPathContext = ExternalPathContext;

languageParser.prototype.externalPath = function() {

    var localctx = new ExternalPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, languageParser.RULE_externalPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.simplePath( localctx.extern, 'global' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_1Context(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_1;
    this.annos = null
    this.assignment = { name: {} }
    this.val = null; // AnnoValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_1Context.prototype.constructor = AnnotationAssignment_1Context;

AnnotationAssignment_1Context.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnotationAssignment_1Context.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};

AnnotationAssignment_1Context.prototype.annoValue = function() {
    return this.getTypedRuleContext(AnnoValueContext,0);
};




languageParser.AnnotationAssignment_1Context = AnnotationAssignment_1Context;

languageParser.prototype.annotationAssignment_1 = function(annos) {

    var localctx = new AnnotationAssignment_1Context(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 14, languageParser.RULE_annotationAssignment_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.annotationPath( localctx.assignment.name, 'anno' );
        this.state = 320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__27) {
            this.state = 319;
            this.annotationPathVariant( localctx.assignment.name );
        }

        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 322;
            this.match(languageParser.T__4);
             this.meltKeywordToIdentifier(true); 
            this.state = 324;
            localctx.val = this.annoValue();
             localctx.assignment.value = localctx.val.val; 
        }

        this._ctx.stop = this._input.LT(-1);
         localctx.annos.push( this.attachLocation(localctx.assignment) ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_parenContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_paren;
    this.annos = null
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_parenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_parenContext.prototype.constructor = AnnotationAssignment_parenContext;

AnnotationAssignment_parenContext.prototype.annotationAssignment_1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_1Context,i);
    }
};




languageParser.AnnotationAssignment_parenContext = AnnotationAssignment_parenContext;

languageParser.prototype.annotationAssignment_paren = function(annos) {

    var localctx = new AnnotationAssignment_parenContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 16, languageParser.RULE_annotationAssignment_paren);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(languageParser.T__5);

              this.meltKeywordToIdentifier();
              if (this.isStraightBefore(')')) {
                this.warning( 'syntax-anno-useless',
                              this.tokenLocation( this._input.LT(-2), this.getCurrentToken() ),
                              { code: '@()' },
                              'Ignored useless $(CODE)' );
                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
                return localctx;
              }
            
        this.state = 331;
        this.annotationAssignment_1( localctx.annos );
        this.state = 337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 332;
            this.match(languageParser.T__2);

                    this.meltKeywordToIdentifier();
                    if (this.isStraightBefore(')')) break; // allow ',' before ')'
                  
            this.state = 334;
            this.annotationAssignment_1( localctx.annos );
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 340;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_fixContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_fix;
    this.annos = null
    this.assignment = null
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_fixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_fixContext.prototype.constructor = AnnotationAssignment_fixContext;

AnnotationAssignment_fixContext.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_fixContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnotationAssignment_fixContext.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};




languageParser.AnnotationAssignment_fixContext = AnnotationAssignment_fixContext;

languageParser.prototype.annotationAssignment_fix = function(annos) {

    var localctx = new AnnotationAssignment_fixContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 18, languageParser.RULE_annotationAssignment_fix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this.match(languageParser.T__7);
        this.state = 351;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.state = 343;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 345;
            this.annotationPath( localctx.assignment.name, 'anno' );
            this.state = 347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__27) {
                this.state = 346;
                this.annotationPathVariant( localctx.assignment.name );
            }


                    var t = this.getCurrentToken();
                    if (t.text === ':')
                      this.warning( 'syntax-anno-short', localctx.assignment.name.location,
                                    { code: '@(...)' },
                                    'Better use $(CODE) for annotation assignments here' );
                  
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.assignment) {
            localctx.annos.push( this.attachLocation(localctx.assignment) );
            this.docComment( localctx.annos );
          }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_ll1Context(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_ll1;
    this.annos = null
    this.assignment = null
    this.val = null; // AnnoValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_ll1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_ll1Context.prototype.constructor = AnnotationAssignment_ll1Context;

AnnotationAssignment_ll1Context.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_ll1Context.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnotationAssignment_ll1Context.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};

AnnotationAssignment_ll1Context.prototype.annoValue = function() {
    return this.getTypedRuleContext(AnnoValueContext,0);
};




languageParser.AnnotationAssignment_ll1Context = AnnotationAssignment_ll1Context;

languageParser.prototype.annotationAssignment_ll1 = function(annos) {

    var localctx = new AnnotationAssignment_ll1Context(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 20, languageParser.RULE_annotationAssignment_ll1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.match(languageParser.T__7);
        this.state = 367;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.state = 354;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 356;
            this.annotationPath( localctx.assignment.name, 'anno' );
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__27) {
                this.state = 357;
                this.annotationPathVariant( localctx.assignment.name );
            }

            this.state = 365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__4) {
                this.state = 360;
                this.match(languageParser.T__4);
                 this.meltKeywordToIdentifier(true); 
                this.state = 362;
                localctx.val = this.annoValue();
                 localctx.assignment.value = localctx.val.val; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.assignment) {
            localctx.annos.push( this.attachLocation(localctx.assignment) );
            this.docComment( localctx.annos );
          }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationAssignment_atnContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_atn;
    this.annos = null
    this.assignment = null
    this.variant = null; // IdentContext
    this.val = null; // AnnoValueBaseContext
    this.at = null; // Token
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_atnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_atnContext.prototype.constructor = AnnotationAssignment_atnContext;

AnnotationAssignment_atnContext.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_atnContext.prototype.annotationPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationPathContext);
    } else {
        return this.getTypedRuleContext(AnnotationPathContext,i);
    }
};

AnnotationAssignment_atnContext.prototype.HelperToken1 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.HelperToken1);
    } else {
        return this.getToken(languageParser.HelperToken1, i);
    }
};


AnnotationAssignment_atnContext.prototype.HelperToken2 = function() {
    return this.getToken(languageParser.HelperToken2, 0);
};

AnnotationAssignment_atnContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

AnnotationAssignment_atnContext.prototype.annoValueBase = function() {
    return this.getTypedRuleContext(AnnoValueBaseContext,0);
};




languageParser.AnnotationAssignment_atnContext = AnnotationAssignment_atnContext;

languageParser.prototype.annotationAssignment_atn = function(annos) {

    var localctx = new AnnotationAssignment_atnContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 22, languageParser.RULE_annotationAssignment_atn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.match(languageParser.T__7);
        this.state = 404;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.state = 370;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 372;
            this.annotationPath( localctx.assignment.name, 'anno' );
             this.setLocalToken( '#', 'HelperToken1', null, true ); 
            this.state = 379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HelperToken1) {
                this.state = 374;
                this.match(languageParser.HelperToken1);
                 this.meltKeywordToIdentifier(); 
                this.state = 376;
                localctx.variant = this.ident('variant');
                 localctx.assignment.name.variant = localctx.variant.id; 
            }

             this.setLocalToken( ':', 'HelperToken2', null, true ); 
            this.state = 402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HelperToken2) {
                this.state = 382;
                this.match(languageParser.HelperToken2);
                 this.meltKeywordToIdentifier(true); 
                this.state = 400;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__12:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.NULL:
                case languageParser.Number:
                    this.state = 384;
                    localctx.val = this.annoValueBase();
                     localctx.assignment.value = localctx.val.val; 
                    break;
                case languageParser.T__7:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                     localctx.assignment.value = {}; 
                    this.state = 389;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.T__7) {
                        this.state = 388;
                        localctx.at = this.match(languageParser.T__7);
                    }

                    this.state = 391;
                    this.annotationPath( localctx.assignment.value, 'ref', localctx.at );
                     this.setLocalToken( '#', 'HelperToken1', null, true ); 
                    this.state = 398;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.HelperToken1) {
                        this.state = 393;
                        this.match(languageParser.HelperToken1);
                         this.meltKeywordToIdentifier(); 
                        this.state = 395;
                        localctx.variant = this.ident('variant');
                         localctx.assignment.value.variant = localctx.variant.id; 
                    }

                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.assignment) {
            localctx.annos.push( this.attachLocation(localctx.assignment) );
            this.docComment( localctx.annos );
          }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequiredSemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_requiredSemi;
    return this;
}

RequiredSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredSemiContext.prototype.constructor = RequiredSemiContext;





languageParser.RequiredSemiContext = RequiredSemiContext;

languageParser.prototype.requiredSemi = function() {

    var localctx = new RequiredSemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, languageParser.RULE_requiredSemi);
    try {
        this.state = 409;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 406;
            this.match(languageParser.T__0);
            break;
        case languageParser.T__3:
            this.enterOuterAlt(localctx, 2);
             return localctx; 
            this.state = 408;
            this.match(languageParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalSemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalSemi;
    return this;
}

OptionalSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalSemiContext.prototype.constructor = OptionalSemiContext;





languageParser.OptionalSemiContext = OptionalSemiContext;

languageParser.prototype.optionalSemi = function() {

    var localctx = new OptionalSemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, languageParser.RULE_optionalSemi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.noAssignmentInSameLine(); 
        this.state = 413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__0) {
            this.state = 412;
            this.match(languageParser.T__0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArtifactDefContext(parser, parent, invokingState, outer, defOnly) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_artifactDef;
    this.outer = null
    this.defOnly = false
    this.annos = []
    this.extend = null; // Token
    this.annotate = null; // Token
    this.outer = outer || null;
    this.defOnly = defOnly || null;
    return this;
}

ArtifactDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArtifactDefContext.prototype.constructor = ArtifactDefContext;

ArtifactDefContext.prototype.annotateArtifact = function() {
    return this.getTypedRuleContext(AnnotateArtifactContext,0);
};

ArtifactDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ArtifactDefContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

ArtifactDefContext.prototype.ANNOTATE = function() {
    return this.getToken(languageParser.ANNOTATE, 0);
};

ArtifactDefContext.prototype.contextDef = function() {
    return this.getTypedRuleContext(ContextDefContext,0);
};

ArtifactDefContext.prototype.entityDef = function() {
    return this.getTypedRuleContext(EntityDefContext,0);
};

ArtifactDefContext.prototype.typeDef = function() {
    return this.getTypedRuleContext(TypeDefContext,0);
};

ArtifactDefContext.prototype.aspectDef = function() {
    return this.getTypedRuleContext(AspectDefContext,0);
};

ArtifactDefContext.prototype.annotationDef = function() {
    return this.getTypedRuleContext(AnnotationDefContext,0);
};

ArtifactDefContext.prototype.viewDef = function() {
    return this.getTypedRuleContext(ViewDefContext,0);
};

ArtifactDefContext.prototype.eventDef = function() {
    return this.getTypedRuleContext(EventDefContext,0);
};

ArtifactDefContext.prototype.actionFunctionMainDef = function() {
    return this.getTypedRuleContext(ActionFunctionMainDefContext,0);
};

ArtifactDefContext.prototype.extendContext = function() {
    return this.getTypedRuleContext(ExtendContextContext,0);
};

ArtifactDefContext.prototype.extendEntity = function() {
    return this.getTypedRuleContext(ExtendEntityContext,0);
};

ArtifactDefContext.prototype.extendProjection = function() {
    return this.getTypedRuleContext(ExtendProjectionContext,0);
};

ArtifactDefContext.prototype.extendType = function() {
    return this.getTypedRuleContext(ExtendTypeContext,0);
};

ArtifactDefContext.prototype.extendAspect = function() {
    return this.getTypedRuleContext(ExtendAspectContext,0);
};

ArtifactDefContext.prototype.extendArtifact = function() {
    return this.getTypedRuleContext(ExtendArtifactContext,0);
};

ArtifactDefContext.prototype.DEFINE = function() {
    return this.getToken(languageParser.DEFINE, 0);
};




languageParser.ArtifactDefContext = ArtifactDefContext;

languageParser.prototype.artifactDef = function(outer, defOnly) {

    var localctx = new ArtifactDefContext(this, this._ctx, this.state, outer, defOnly);
    this.enterRule(localctx, 28, languageParser.RULE_artifactDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 419;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 416;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 448;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.FUNCTION:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.VIEW:
        case languageParser.HideAlternatives:
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DEFINE) {
                this.state = 422;
                this.match(languageParser.DEFINE);
            }

            this.state = 433;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.CONTEXT:
            case languageParser.SERVICE:
                this.state = 425;
                this.contextDef( localctx.outer, this.startLocation(), localctx.annos, defOnly );
                break;
            case languageParser.ENTITY:
                this.state = 426;
                this.entityDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.TYPE:
                this.state = 427;
                this.typeDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.ABSTRACT:
            case languageParser.ASPECT:
            case languageParser.HideAlternatives:
                this.state = 428;
                this.aspectDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.ANNOTATION:
                this.state = 429;
                this.annotationDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.VIEW:
                this.state = 430;
                this.viewDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.EVENT:
                this.state = 431;
                this.eventDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            case languageParser.ACTION:
            case languageParser.FUNCTION:
                this.state = 432;
                this.actionFunctionMainDef( localctx.outer, this.startLocation(), localctx.annos );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.EXTEND:
            this.state = 435;
            localctx.extend = this.match(languageParser.EXTEND);
             if (defOnly) // this is a syntax restriction which is ensured in CSN in
                                 // another way
                      this.error( 'syntax-extend-context', localctx.extend,
                                  { code: 'EXTEND artifact', kind: defOnly },
                                  'No $(CODE) within $(KIND) extensions' ); 
            this.state = 443;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            switch(la_) {
            case 1:
                this.state = 437;
                this.extendContext( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 2:
                this.state = 438;
                this.extendEntity( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 3:
                this.state = 439;
                this.extendProjection( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 4:
                this.state = 440;
                this.extendType( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 5:
                this.state = 441;
                this.extendAspect( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 6:
                this.state = 442;
                this.extendArtifact( localctx.outer, this.startLocation(), localctx.annos );
                break;

            }
            break;
        case languageParser.ANNOTATE:
            this.state = 445;
            localctx.annotate = this.match(languageParser.ANNOTATE);
             if (defOnly) // this is a syntax restriction which is ensured in CSN in
                                 // another way
                      this.error( 'syntax-extend-context', localctx.annotate,
                                  { code: 'ANNOTATE artifact', kind: defOnly },
                                  'No $(CODE) within $(KIND) extensions' );
                    this.meltKeywordToIdentifier();
                  
            this.state = 447;
            this.annotateArtifact( localctx.outer, this.startLocation(), localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContextDefContext(parser, parent, invokingState, outer, loc, annos, defOnly) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_contextDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.defOnly = false
    this.art = null
    this.name = {}
    this.service = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    this.defOnly = defOnly || null;
    return this;
}

ContextDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContextDefContext.prototype.constructor = ContextDefContext;

ContextDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ContextDefContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

ContextDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ContextDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ContextDefContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

ContextDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ContextDefContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.ContextDefContext = ContextDefContext;

languageParser.prototype.contextDef = function(outer, loc, annos, defOnly) {

    var localctx = new ContextDefContext(this, this._ctx, this.state, outer, loc, annos, defOnly);
    this.enterRule(localctx, 30, languageParser.RULE_contextDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.CONTEXT:
            this.state = 450;
            this.match(languageParser.CONTEXT);
            break;
        case languageParser.SERVICE:
            this.state = 451;
            localctx.service = this.match(languageParser.SERVICE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 454;
        this.simplePath( localctx.name, localctx.service ? 'Service' : 'Context' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', localctx.service ? 'service' : 'context', localctx.name, localctx.annos,
                                  {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 456;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 462;
            this.match(languageParser.T__1);
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.EXTEND - 62)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.SERVICE - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
                this.state = 463;
                this.artifactDef( localctx.art, defOnly, true );
                this.state = 468;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 469;
            this.match(languageParser.T__3);
            this.state = 470;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 471;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendContextContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendContext;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.service = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendContextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendContextContext.prototype.constructor = ExtendContextContext;

ExtendContextContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendContextContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

ExtendContextContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendContextContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendContextContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

ExtendContextContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendContextContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendContextContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.ExtendContextContext = ExtendContextContext;

languageParser.prototype.extendContext = function(outer, loc, annos) {

    var localctx = new ExtendContextContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 32, languageParser.RULE_extendContext);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.CONTEXT:
            this.state = 474;
            this.match(languageParser.CONTEXT);
            break;
        case languageParser.SERVICE:
            this.state = 475;
            localctx.service = this.match(languageParser.SERVICE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 478;
        this.simplePath( localctx.name, localctx.service ? 'Service' : 'Context' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: localctx.service ? 'service' : 'context' },
                                   localctx.loc )  
        this.state = 482;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 480;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

         this.docComment( localctx.annos ); 
        this.state = 488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 485;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 501;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 491;
            this.match(languageParser.T__1);
            this.state = 495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.EXTEND - 62)))) !== 0) || _la===languageParser.FUNCTION || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.SERVICE - 128)) | (1 << (languageParser.TYPE - 128)) | (1 << (languageParser.VIEW - 128)) | (1 << (languageParser.HideAlternatives - 128)))) !== 0)) {
                this.state = 492;
                this.artifactDef( localctx.art, localctx.service ? 'SERVICE' : 'CONTEXT', true );
                this.state = 497;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 498;
            this.match(languageParser.T__3);
            this.state = 499;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 500;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntityDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.qe = null; // QueryExpressionContext
    this.qp = null; // ProjectionSpecContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

EntityDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityDefContext.prototype.constructor = EntityDefContext;

EntityDefContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

EntityDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

EntityDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

EntityDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

EntityDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EntityDefContext.prototype.entityParameters = function() {
    return this.getTypedRuleContext(EntityParametersContext,0);
};

EntityDefContext.prototype.projectionClauses = function() {
    return this.getTypedRuleContext(ProjectionClausesContext,0);
};

EntityDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

EntityDefContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};

EntityDefContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

EntityDefContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

EntityDefContext.prototype.projectionSpec = function() {
    return this.getTypedRuleContext(ProjectionSpecContext,0);
};

EntityDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EntityDefContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.EntityDefContext = EntityDefContext;

languageParser.prototype.entityDef = function(outer, loc, annos) {

    var localctx = new EntityDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 34, languageParser.RULE_entityDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.match(languageParser.ENTITY);
        this.state = 504;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'entity', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 506;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__5) {
            this.state = 512;
            this.entityParameters( localctx.art );
        }

        this.state = 582;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
        case languageParser.T__4:
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__4) {
                this.state = 515;
                this.match(languageParser.T__4);
                this.state = 516;
                this.includeRef( localctx.art );
                this.state = 522;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 517;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore('{')) break; 
                    this.state = 519;
                    this.includeRef( localctx.art );
                    this.state = 524;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 527;
            this.match(languageParser.T__1);
             localctx.art.elements = Object.create(null); 
            this.state = 532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
                this.state = 529;
                this.elementDef( localctx.art );
                this.state = 534;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 535;
            this.match(languageParser.T__3);
            this.state = 545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 536;
                this.match(languageParser.ACTIONS);
                this.state = 537;
                this.match(languageParser.T__1);
                this.state = 541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 538;
                    this.actionFunctionDef( localctx.art );
                    this.state = 543;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 544;
                this.match(languageParser.T__3);
            }

            this.state = 547;
            this.optionalSemi();
            break;
        case languageParser.AS:
            this.state = 548;
            this.match(languageParser.AS);
            this.state = 580;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__5:
            case languageParser.SELECT:
                this.state = 549;
                localctx.qe = this.queryExpression();
                 localctx.art.query = localctx.qe.query; localctx.art['$'+'syntax'] = 'entity' 
                this.state = 562;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ACTIONS:
                    this.state = 551;
                    this.match(languageParser.ACTIONS);
                    this.state = 552;
                    this.match(languageParser.T__1);
                    this.state = 556;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                        this.state = 553;
                        this.actionFunctionDef( localctx.art );
                        this.state = 558;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 559;
                    this.match(languageParser.T__3);
                    this.state = 560;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 561;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case languageParser.PROJECTION:
                this.state = 564;
                localctx.qp = this.projectionSpec();
                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
                this.state = 566;
                this.projectionClauses( localctx.qp.query );
                this.state = 576;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ACTIONS) {
                    this.state = 567;
                    this.match(languageParser.ACTIONS);
                    this.state = 568;
                    this.match(languageParser.T__1);
                    this.state = 572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                        this.state = 569;
                        this.actionFunctionDef( localctx.art );
                        this.state = 574;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 575;
                    this.match(languageParser.T__3);
                }

                this.state = 578;
                this.optionalSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionSpec;
    this.query = null
    this.src = null
    this.proj = null; // Token
    this.aliasName = null; // IdentContext
    return this;
}

ProjectionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionSpecContext.prototype.constructor = ProjectionSpecContext;

ProjectionSpecContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

ProjectionSpecContext.prototype.fromPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromPathContext);
    } else {
        return this.getTypedRuleContext(FromPathContext,i);
    }
};

ProjectionSpecContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

ProjectionSpecContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ProjectionSpecContext.prototype.bracedSelectItemListDef = function() {
    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
};

ProjectionSpecContext.prototype.excludingClause = function() {
    return this.getTypedRuleContext(ExcludingClauseContext,0);
};

ProjectionSpecContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ProjectionSpecContext = ProjectionSpecContext;

languageParser.prototype.projectionSpec = function() {

    var localctx = new ProjectionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, languageParser.RULE_projectionSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 584;
        localctx.proj = this.match(languageParser.PROJECTION);
        this.state = 585;
        this.match(languageParser.ON);

              localctx.src =  { path: [], scope: 0 }
              localctx.query =  { op: this.tokenLocation( localctx.proj, undefined, 'SELECT' ), from: localctx.src, location: this.startLocation() }
            
        this.state = 587;
        this.fromPath( localctx.src, 'artref');
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 588;
            this.match(languageParser.T__4);
             localctx.src.scope = localctx.src.path.length; 
            this.state = 590;
            this.fromPath( localctx.src, 'ref');
        }

        this.state = 597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 593;
            this.match(languageParser.AS);
            this.state = 594;
            localctx.aliasName = this.ident('FromAlias');
             localctx.src.name = localctx.aliasName.id 
        }

        this.state = 600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__1) {
            this.state = 599;
            this.bracedSelectItemListDef( localctx.query );
        }

        this.state = 603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.EXCLUDING) {
            this.state = 602;
            this.excludingClause( localctx.query );
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionClausesContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionClauses;
    this.query = null
    this.cond = null; // ConditionContext
    this.e1 = null; // ExpressionContext
    this.en = null; // ExpressionContext
    this.having = null; // ConditionContext
    this.ob = null; // OrderByClauseContext
    this.lc = null; // LimitClauseContext
    this.query = query || null;
    return this;
}

ProjectionClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionClausesContext.prototype.constructor = ProjectionClausesContext;

ProjectionClausesContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};

ProjectionClausesContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

ProjectionClausesContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

ProjectionClausesContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

ProjectionClausesContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

ProjectionClausesContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ProjectionClausesContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

ProjectionClausesContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};




languageParser.ProjectionClausesContext = ProjectionClausesContext;

languageParser.prototype.projectionClauses = function(query) {

    var localctx = new ProjectionClausesContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 38, languageParser.RULE_projectionClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WHERE) {
            this.state = 605;
            this.match(languageParser.WHERE);
            this.state = 606;
            localctx.cond = this.condition();
             localctx.query.where = localctx.cond.cond; 
        }

        this.state = 624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.GROUP) {
            this.state = 611;
            this.match(languageParser.GROUP);
            this.state = 612;
            this.match(languageParser.BY);
            this.state = 613;
            localctx.e1 = this.expression();
             localctx.query.groupBy = [ localctx.e1.expr ]; 
            this.state = 621;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 615;
                this.match(languageParser.T__2);
                this.state = 616;
                localctx.en = this.expression();
                 localctx.query.groupBy.push( localctx.en.expr ); 
                this.state = 623;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.HAVING) {
            this.state = 626;
            this.match(languageParser.HAVING);
            this.state = 627;
            localctx.having = this.condition();
             localctx.query.having = localctx.having.cond; 
        }

        this.state = 635;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ORDER) {
            this.state = 632;
            localctx.ob = this.orderByClause( localctx.query );
             localctx.query =  localctx.ob.query 
        }

        this.state = 640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.LIMIT) {
            this.state = 637;
            localctx.lc = this.limitClause( localctx.query );
             localctx.query =  localctx.lc.query 
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExcludingClauseContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_excludingClause;
    this.query = null
    this.query = query || null;
    return this;
}

ExcludingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExcludingClauseContext.prototype.constructor = ExcludingClauseContext;

ExcludingClauseContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

ExcludingClauseContext.prototype.projectionExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionExclusionContext);
    } else {
        return this.getTypedRuleContext(ProjectionExclusionContext,i);
    }
};




languageParser.ExcludingClauseContext = ExcludingClauseContext;

languageParser.prototype.excludingClause = function(query) {

    var localctx = new ExcludingClauseContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 40, languageParser.RULE_excludingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.match(languageParser.EXCLUDING);
        this.state = 643;
        this.match(languageParser.T__1);
        this.state = 644;
        this.projectionExclusion( localctx.query );
        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 645;
            this.match(languageParser.T__2);
             if (this.isStraightBefore("}")) break; 
            this.state = 647;
            this.projectionExclusion( localctx.query );
            this.state = 652;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 653;
        this.match(languageParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionExclusionContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionExclusion;
    this.outer = null
    this.art = null
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ProjectionExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionExclusionContext.prototype.constructor = ProjectionExclusionContext;

ProjectionExclusionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ProjectionExclusionContext = ProjectionExclusionContext;

languageParser.prototype.projectionExclusion = function(outer) {

    var localctx = new ProjectionExclusionContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 42, languageParser.RULE_projectionExclusion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        localctx.name = this.ident('ref');
         localctx.art =  this.addDef( localctx.outer, 'excludingDict', '', localctx.name.id ) 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendEntityContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendEntity;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendEntityContext.prototype.constructor = ExtendEntityContext;

ExtendEntityContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

ExtendEntityContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendEntityContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendEntityContext.prototype.extendForEntity = function() {
    return this.getTypedRuleContext(ExtendForEntityContext,0);
};

ExtendEntityContext.prototype.includeRef = function() {
    return this.getTypedRuleContext(IncludeRefContext,0);
};

ExtendEntityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendEntityContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ExtendEntityContext = ExtendEntityContext;

languageParser.prototype.extendEntity = function(outer, loc, annos) {

    var localctx = new ExtendEntityContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 44, languageParser.RULE_extendEntity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(languageParser.ENTITY);
        this.state = 659;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'entity' }, localctx.loc )  
        this.state = 683;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.WITH:
            this.state = 661;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); this.docComment( localctx.annos ); 
            this.state = 666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 663;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 673;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            switch(la_) {
            case 1:
                this.state = 669;
                this.includeRef( localctx.art );
                this.state = 670;
                this.requiredSemi();
                break;

            case 2:
                this.state = 672;
                this.extendForEntity( localctx.art );
                break;

            }
            break;
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__3:
        case languageParser.T__7:
        case languageParser.ACTIONS:
             this.docComment( localctx.annos ); 
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 676;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 681;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 682;
            this.extendForEntity( localctx.art );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendForEntityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendForEntity;
    this.art = null
    this.art = art || null;
    return this;
}

ExtendForEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendForEntityContext.prototype.constructor = ExtendForEntityContext;

ExtendForEntityContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendForEntityContext.prototype.elementDefOrExtend = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefOrExtendContext);
    } else {
        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
    }
};

ExtendForEntityContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

ExtendForEntityContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};

ExtendForEntityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};




languageParser.ExtendForEntityContext = ExtendForEntityContext;

languageParser.prototype.extendForEntity = function(art) {

    var localctx = new ExtendForEntityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 46, languageParser.RULE_extendForEntity);
    var _la = 0; // Token type
    try {
        this.state = 716;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 685;
            this.match(languageParser.T__1);
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
                this.state = 686;
                this.elementDefOrExtend( localctx.art );
                this.state = 691;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 692;
            this.match(languageParser.T__3);
            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 693;
                this.match(languageParser.ACTIONS);
                this.state = 694;
                this.match(languageParser.T__1);
                this.state = 698;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 695;
                    this.actionFunctionDef( localctx.art );
                    this.state = 700;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 701;
                this.match(languageParser.T__3);
            }

            this.state = 704;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.enterOuterAlt(localctx, 2);
            this.state = 705;
            this.match(languageParser.ACTIONS);
            this.state = 706;
            this.match(languageParser.T__1);
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 707;
                this.actionFunctionDef( localctx.art );
                this.state = 712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 713;
            this.match(languageParser.T__3);
            this.state = 714;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.enterOuterAlt(localctx, 3);
            this.state = 715;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendProjectionContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendProjection;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.expected = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendProjectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendProjectionContext.prototype.constructor = ExtendProjectionContext;

ExtendProjectionContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

ExtendProjectionContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendProjectionContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

ExtendProjectionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendProjectionContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendProjectionContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendProjectionContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};

ExtendProjectionContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.ExtendProjectionContext = ExtendProjectionContext;

languageParser.prototype.extendProjection = function(outer, loc, annos) {

    var localctx = new ExtendProjectionContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 48, languageParser.RULE_extendProjection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        localctx.expected = this.match(languageParser.PROJECTION);
        this.state = 719;
        this.simplePath( localctx.name, 'Extend' );

              localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'entity' }, // or 'projection'?
                                   localctx.loc )  
        this.state = 723;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 721;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

         this.docComment( localctx.annos ); 
        this.state = 729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 726;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 769;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 732;
            this.match(languageParser.T__1);
             localctx.art.columns = []; 
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.EXTRACT - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.TRIM - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.AND - 65)) | (1 << (languageParser.ANNOTATE - 65)) | (1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.BOTH - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.DAY - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)) | (1 << (languageParser.HAVING - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HOUR - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEADING - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MINUTE - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.MONTH - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.SECOND - 97)) | (1 << (languageParser.SERVICE - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TRAILING - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.YEAR - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                this.state = 734;
                this.selectItemDef( localctx.art.columns );
                this.state = 740;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 735;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore("}")) break; 
                    this.state = 737;
                    this.selectItemDef( localctx.art.columns );
                    this.state = 742;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 745;
            this.match(languageParser.T__3);
            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 746;
                this.match(languageParser.ACTIONS);
                this.state = 747;
                this.match(languageParser.T__1);
                this.state = 751;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 748;
                    this.actionFunctionDef( localctx.art );
                    this.state = 753;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 754;
                this.match(languageParser.T__3);
            }

            this.state = 757;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.state = 758;
            this.match(languageParser.ACTIONS);
            this.state = 759;
            this.match(languageParser.T__1);
            this.state = 763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 760;
                this.actionFunctionDef( localctx.art );
                this.state = 765;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 766;
            this.match(languageParser.T__3);
            this.state = 767;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 768;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionFunctionDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_actionFunctionDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ActionFunctionDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionFunctionDefContext.prototype.constructor = ActionFunctionDefContext;

ActionFunctionDefContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

ActionFunctionDefContext.prototype.parameterListDef = function() {
    return this.getTypedRuleContext(ParameterListDefContext,0);
};

ActionFunctionDefContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};

ActionFunctionDefContext.prototype.returnTypeSpec = function() {
    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
};

ActionFunctionDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ActionFunctionDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ActionFunctionDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ActionFunctionDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.ActionFunctionDefContext = ActionFunctionDefContext;

languageParser.prototype.actionFunctionDef = function(outer) {

    var localctx = new ActionFunctionDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 50, languageParser.RULE_actionFunctionDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 772;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 804;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ACTION:
            this.state = 778;
            this.match(languageParser.ACTION);
            this.state = 779;
            localctx.name = this.ident('BoundAction');
             localctx.art =  this.addDef( localctx.outer, 'actions', 'action', localctx.name.id, localctx.annos )
                    this.docComment( localctx.annos ); 
            this.state = 784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 781;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 786;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 787;
            this.parameterListDef( localctx.art );
            this.state = 790;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 788;
                this.returnTypeSpec( localctx.art, localctx.annos );
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 789;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUNCTION:
            this.state = 792;
            this.match(languageParser.FUNCTION);
            this.state = 793;
            localctx.name = this.ident('BoundAction');
             localctx.art =  this.addDef( localctx.outer, 'actions', 'function', localctx.name.id, localctx.annos )
                    this.docComment( localctx.annos ); 
            this.state = 798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 795;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 800;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 801;
            this.parameterListDef( localctx.art );
            this.state = 802;
            this.returnTypeSpec( localctx.art, localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActionFunctionMainDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_actionFunctionMainDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ActionFunctionMainDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionFunctionMainDefContext.prototype.constructor = ActionFunctionMainDefContext;

ActionFunctionMainDefContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

ActionFunctionMainDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ActionFunctionMainDefContext.prototype.parameterListDef = function() {
    return this.getTypedRuleContext(ParameterListDefContext,0);
};

ActionFunctionMainDefContext.prototype.returnTypeSpec = function() {
    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
};

ActionFunctionMainDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ActionFunctionMainDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ActionFunctionMainDefContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};




languageParser.ActionFunctionMainDefContext = ActionFunctionMainDefContext;

languageParser.prototype.actionFunctionMainDef = function(outer, loc, annos) {

    var localctx = new ActionFunctionMainDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 52, languageParser.RULE_actionFunctionMainDef);
    var _la = 0; // Token type
    try {
        this.state = 832;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ACTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 806;
            this.match(languageParser.ACTION);
            this.state = 807;
            this.simplePath( localctx.name, 'Action' );
             localctx.art =  this.addDef( localctx.outer, 'artifacts', 'action', localctx.name, localctx.annos, {}, localctx.loc )
                  this.docComment( localctx.annos ); 
            this.state = 812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 809;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 814;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 815;
            this.parameterListDef( localctx.art );
            this.state = 818;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 816;
                this.returnTypeSpec( localctx.art, localctx.annos );
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 817;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUNCTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 820;
            this.match(languageParser.FUNCTION);
            this.state = 821;
            this.simplePath( localctx.name, 'Action' );
             localctx.art =  this.addDef( localctx.outer, 'artifacts', 'function', localctx.name, localctx.annos, {}, localctx.loc )
                  this.docComment( localctx.annos ); 
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 823;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 828;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 829;
            this.parameterListDef( localctx.art );
            this.state = 830;
            this.returnTypeSpec( localctx.art, localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EventDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_eventDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.qp = null; // ProjectionSpecContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

EventDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefContext.prototype.constructor = EventDefContext;

EventDefContext.prototype.EVENT = function() {
    return this.getToken(languageParser.EVENT, 0);
};

EventDefContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

EventDefContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

EventDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

EventDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EventDefContext.prototype.projectionSpec = function() {
    return this.getTypedRuleContext(ProjectionSpecContext,0);
};

EventDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EventDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

EventDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.EventDefContext = EventDefContext;

languageParser.prototype.eventDef = function(outer, loc, annos) {

    var localctx = new EventDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 54, languageParser.RULE_eventDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        this.match(languageParser.EVENT);
        this.state = 835;
        this.simplePath( localctx.name, 'Event' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'event', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 840;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 837;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 842;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 880;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 843;
            this.typeStruct( localctx.art );
            this.state = 844;
            this.optionalSemi();
            break;
        case languageParser.T__4:
            this.state = 846;
            this.match(languageParser.T__4);
            this.state = 878;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            switch(la_) {
            case 1:
                 localctx.art.type = {}; 
                this.state = 848;
                this.simplePath( localctx.art.type, 'artref' );
                this.state = 869;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__2:
                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
                    this.state = 855;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 850;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('{')) break; 
                        this.state = 852;
                        this.includeRef( localctx.art );
                        this.state = 857;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 858;
                    this.typeStruct( localctx.art );
                    this.state = 859;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                case languageParser.T__7:
                     this.docComment( localctx.annos ); 
                    this.state = 865;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 862;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 867;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 868;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 2:
                this.state = 871;
                this.typeStruct( localctx.art );
                this.state = 872;
                this.optionalSemi();
                break;

            case 3:
                this.state = 874;
                localctx.qp = this.projectionSpec();
                 localctx.art.query = localctx.qp.query; localctx.art['$'+'syntax'] = 'projection'; 
                this.state = 876;
                this.optionalSemi();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AspectDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_aspectDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.abs = null; // Token
    this.ent = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AspectDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AspectDefContext.prototype.constructor = AspectDefContext;

AspectDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AspectDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AspectDefContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

AspectDefContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

AspectDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

AspectDefContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

AspectDefContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

AspectDefContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};

AspectDefContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};

AspectDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

AspectDefContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.AspectDefContext = AspectDefContext;

languageParser.prototype.aspectDef = function(outer, loc, annos) {

    var localctx = new AspectDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 56, languageParser.RULE_aspectDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ASPECT:
            this.state = 882;
            this.match(languageParser.ASPECT);
            break;
        case languageParser.ABSTRACT:
        case languageParser.HideAlternatives:
            this.state = 885;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ABSTRACT:
                this.state = 883;
                localctx.abs = this.match(languageParser.ABSTRACT);
                break;
            case languageParser.HideAlternatives:
                this.state = 884;
                this.match(languageParser.HideAlternatives);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 887;
            localctx.ent = this.match(languageParser.ENTITY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 890;
        this.simplePath( localctx.name, 'Type' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'aspect', localctx.name, localctx.annos, {}, localctx.loc )
              // backends do not like ['$'+'syntax']: (localctx.ent ? 'entity' : 'aspect')
              if (localctx.ent)
                this.warning( 'syntax-deprecated-abstract', this.tokenLocation( localctx.abs, localctx.ent ), {},
                              'Abstract entity definitions are deprecated; use aspect definitions instead' );
              this.docComment( localctx.annos ); 
        this.state = 895;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 892;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 897;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 898;
            this.match(languageParser.T__4);
            this.state = 908;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 899;
                this.includeRef( localctx.art );
                this.state = 905;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 900;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore('{')) break; 
                    this.state = 902;
                    this.includeRef( localctx.art );
                    this.state = 907;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

        }

        this.state = 912;
        this.match(languageParser.T__1);
         localctx.art.elements = Object.create(null); 

        this.state = 917;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
            this.state = 914;
            this.elementDef( localctx.art );
            this.state = 919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 920;
        this.match(languageParser.T__3);
        this.state = 930;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ACTIONS) {
            this.state = 921;
            this.match(languageParser.ACTIONS);
            this.state = 922;
            this.match(languageParser.T__1);
            this.state = 926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 923;
                this.actionFunctionDef( localctx.art );
                this.state = 928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 929;
            this.match(languageParser.T__3);
        }

        this.state = 932;
        this.optionalSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

TypeDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefContext.prototype.constructor = TypeDefContext;

TypeDefContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TypeDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeDefContext.prototype.typeSpecSemi = function() {
    return this.getTypedRuleContext(TypeSpecSemiContext,0);
};

TypeDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.TypeDefContext = TypeDefContext;

languageParser.prototype.typeDef = function(outer, loc, annos) {

    var localctx = new TypeDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 58, languageParser.RULE_typeDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 934;
        this.match(languageParser.TYPE);
        this.state = 935;
        this.simplePath( localctx.name, 'Type' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'type', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 937;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 943;
        this.typeSpecSemi( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendTypeContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendType;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendTypeContext.prototype.constructor = ExtendTypeContext;

ExtendTypeContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

ExtendTypeContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendTypeContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendTypeContext = ExtendTypeContext;

languageParser.prototype.extendType = function(outer, loc, annos) {

    var localctx = new ExtendTypeContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 60, languageParser.RULE_extendType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.match(languageParser.TYPE);
        this.state = 946;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'type' },
                                   localctx.loc )  
        this.state = 948;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendAspectContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendAspect;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendAspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendAspectContext.prototype.constructor = ExtendAspectContext;

ExtendAspectContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

ExtendAspectContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendAspectContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendAspectContext = ExtendAspectContext;

languageParser.prototype.extendAspect = function(outer, loc, annos) {

    var localctx = new ExtendAspectContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 62, languageParser.RULE_extendAspect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 950;
        this.match(languageParser.ASPECT);
        this.state = 951;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'aspect' },
                                   localctx.loc )  
        this.state = 953;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.annotation = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AnnotationDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationDefContext.prototype.constructor = AnnotationDefContext;

AnnotationDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationDefContext.prototype.typeSpecSemi = function() {
    return this.getTypedRuleContext(TypeSpecSemiContext,0);
};

AnnotationDefContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

AnnotationDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.AnnotationDefContext = AnnotationDefContext;

languageParser.prototype.annotationDef = function(outer, loc, annos) {

    var localctx = new AnnotationDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 64, languageParser.RULE_annotationDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        localctx.annotation = this.match(languageParser.ANNOTATION);
        this.state = 956;
        this.simplePath( localctx.name, 'AnnoDef' );
         if (localctx.outer.kind !== 'source') { // this is a syntax restriction to avoid confusion
                this.error( 'syntax-no-inner-vocabulary', localctx.annotation, {},
                            'Annotation definitions can\'t be defined inside contexts or services' );
                localctx.art =  {} }
              else
                localctx.art =  this.addDef( localctx.outer, 'vocabularies', 'annotation', localctx.name, localctx.annos, {}, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 958;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 964;
        this.typeSpecSemi( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendArtifactContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendArtifact;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendArtifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendArtifactContext.prototype.constructor = ExtendArtifactContext;

ExtendArtifactContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendArtifactContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendArtifactContext = ExtendArtifactContext;

languageParser.prototype.extendArtifact = function(outer, loc, annos) {

    var localctx = new ExtendArtifactContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 66, languageParser.RULE_extendArtifact);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 966;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name }, localctx.loc )  
        this.state = 968;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendWithOptElementsContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendWithOptElements;
    this.art = null
    this.annos = null
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

ExtendWithOptElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendWithOptElementsContext.prototype.constructor = ExtendWithOptElementsContext;

ExtendWithOptElementsContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendWithOptElementsContext.prototype.includeRef = function() {
    return this.getTypedRuleContext(IncludeRefContext,0);
};

ExtendWithOptElementsContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendWithOptElementsContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendWithOptElementsContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendWithOptElementsContext.prototype.elementDefOrExtend = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefOrExtendContext);
    } else {
        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
    }
};




languageParser.ExtendWithOptElementsContext = ExtendWithOptElementsContext;

languageParser.prototype.extendWithOptElements = function(art, annos) {

    var localctx = new ExtendWithOptElementsContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 68, languageParser.RULE_extendWithOptElements);
    var _la = 0; // Token type
    try {
        this.state = 1012;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.WITH:
            this.enterOuterAlt(localctx, 1);
            this.state = 970;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); this.docComment( localctx.annos ); 
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 972;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 977;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 991;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 978;
                this.includeRef( localctx.art );
                this.state = 979;
                this.requiredSemi();
                break;
            case languageParser.T__1:
                this.state = 981;
                this.match(languageParser.T__1);
                this.state = 985;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
                    this.state = 982;
                    this.elementDefOrExtend( localctx.art );
                    this.state = 987;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 988;
                this.match(languageParser.T__3);
                this.state = 989;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 990;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__3:
        case languageParser.T__7:
            this.enterOuterAlt(localctx, 2);
             this.docComment( localctx.annos ); 
            this.state = 997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 994;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 999;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1010;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__1:
                this.state = 1000;
                this.match(languageParser.T__1);
                this.state = 1004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
                    this.state = 1001;
                    this.elementDefOrExtend( localctx.art );
                    this.state = 1006;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1007;
                this.match(languageParser.T__3);
                this.state = 1008;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 1009;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateArtifactContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateArtifact;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AnnotateArtifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateArtifactContext.prototype.constructor = AnnotateArtifactContext;

AnnotateArtifactContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotateArtifactContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateArtifactContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

AnnotateArtifactContext.prototype.annotateParam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateParamContext);
    } else {
        return this.getTypedRuleContext(AnnotateParamContext,i);
    }
};

AnnotateArtifactContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

AnnotateArtifactContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateArtifactContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

AnnotateArtifactContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateArtifactContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};

AnnotateArtifactContext.prototype.annotateAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateActionContext);
    } else {
        return this.getTypedRuleContext(AnnotateActionContext,i);
    }
};




languageParser.AnnotateArtifactContext = AnnotateArtifactContext;

languageParser.prototype.annotateArtifact = function(outer, loc, annos) {

    var localctx = new AnnotateArtifactContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 70, languageParser.RULE_annotateArtifact);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1014;
        this.simplePath( localctx.name, 'Annotate' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'annotate', localctx.annos, { name: localctx.name }, localctx.loc ) 
        this.state = 1018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 1016;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

         this.docComment( localctx.annos ); 
        this.state = 1024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1021;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1092;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1027;
            this.match(languageParser.T__1);
            this.state = 1031;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 1028;
                this.annotateElement( localctx.art );
                this.state = 1033;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1034;
            this.match(languageParser.T__3);
            this.state = 1044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 1035;
                this.match(languageParser.ACTIONS);
                this.state = 1036;
                this.match(languageParser.T__1);
                this.state = 1040;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                    this.state = 1037;
                    this.annotateAction( localctx.art );
                    this.state = 1042;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1043;
                this.match(languageParser.T__3);
            }

            this.state = 1046;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.state = 1047;
            this.match(languageParser.ACTIONS);
            this.state = 1048;
            this.match(languageParser.T__1);
            this.state = 1052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 1049;
                this.annotateAction( localctx.art );
                this.state = 1054;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1055;
            this.match(languageParser.T__3);
            this.state = 1056;
            this.optionalSemi();
            break;
        case languageParser.T__5:
            this.state = 1057;
            this.match(languageParser.T__5);
            this.state = 1058;
            this.annotateParam( localctx.art );
            this.state = 1064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1059;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1061;
                this.annotateParam( localctx.art );
                this.state = 1066;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1067;
            this.match(languageParser.T__6);
            this.state = 1079;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 1068;
                this.match(languageParser.RETURNS);
                this.state = 1069;
                this.match(languageParser.T__1);
                this.state = 1073;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                    this.state = 1070;
                    this.annotateElement( localctx.art );
                    this.state = 1075;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1076;
                this.match(languageParser.T__3);
                this.state = 1077;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 1078;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.RETURNS:
            this.state = 1081;
            this.match(languageParser.RETURNS);
            this.state = 1082;
            this.match(languageParser.T__1);
            this.state = 1086;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 1083;
                this.annotateElement( localctx.art );
                this.state = 1088;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1089;
            this.match(languageParser.T__3);
            this.state = 1090;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1091;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateElementContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateElement;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateElementContext.prototype.constructor = AnnotateElementContext;

AnnotateElementContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateElementContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateElementContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateElementContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateElementContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};




languageParser.AnnotateElementContext = AnnotateElementContext;

languageParser.prototype.annotateElement = function(outer) {

    var localctx = new AnnotateElementContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 72, languageParser.RULE_annotateElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1095;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1101;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'annotate', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1106;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1103;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1119;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1109;
            this.match(languageParser.T__1);
            this.state = 1113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 1110;
                this.annotateElement( localctx.art );
                this.state = 1115;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1116;
            this.match(languageParser.T__3);
            this.state = 1117;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1118;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateActionContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateAction;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateActionContext.prototype.constructor = AnnotateActionContext;

AnnotateActionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateActionContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

AnnotateActionContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateActionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateActionContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateActionContext.prototype.annotateParam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateParamContext);
    } else {
        return this.getTypedRuleContext(AnnotateParamContext,i);
    }
};

AnnotateActionContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};




languageParser.AnnotateActionContext = AnnotateActionContext;

languageParser.prototype.annotateAction = function(outer) {

    var localctx = new AnnotateActionContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 74, languageParser.RULE_annotateAction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1125;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1122;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1128;
        localctx.name = this.ident('BoundAction');
         localctx.art =  this.addDef( localctx.outer, 'actions', 'annotate', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1130;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1135;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1148;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__5) {
            this.state = 1136;
            this.match(languageParser.T__5);
            this.state = 1137;
            this.annotateParam( localctx.art );
            this.state = 1143;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1138;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1140;
                this.annotateParam( localctx.art );
                this.state = 1145;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1146;
            this.match(languageParser.T__6);
        }

        this.state = 1161;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.RETURNS:
            this.state = 1150;
            this.match(languageParser.RETURNS);
            this.state = 1151;
            this.match(languageParser.T__1);
            this.state = 1155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 1152;
                this.annotateElement( localctx.art );
                this.state = 1157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1158;
            this.match(languageParser.T__3);
            this.state = 1159;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1160;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotateParamContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateParam;
    this.outer = null
    this.art = null
    this.annos = []
    this.param = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateParamContext.prototype.constructor = AnnotateParamContext;

AnnotateParamContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateParamContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.AnnotateParamContext = AnnotateParamContext;

languageParser.prototype.annotateParam = function(outer) {

    var localctx = new AnnotateParamContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 76, languageParser.RULE_annotateParam);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1164;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1169;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1170;
        localctx.param = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'annotate', localctx.param.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1172;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumSymbolDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_enumSymbolDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.val = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    this.outer = outer || null;
    return this;
}

EnumSymbolDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSymbolDefContext.prototype.constructor = EnumSymbolDefContext;

EnumSymbolDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EnumSymbolDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EnumSymbolDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

EnumSymbolDefContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

EnumSymbolDefContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.EnumSymbolDefContext = EnumSymbolDefContext;

languageParser.prototype.enumSymbolDef = function(outer) {

    var localctx = new EnumSymbolDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 78, languageParser.RULE_enumSymbolDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1179;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1185;
        localctx.name = this.ident('Enum');
         localctx.art =  this.addDef( localctx.outer, 'enum', 'enum', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1187;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__8) {
            this.state = 1193;
            this.match(languageParser.T__8);
             this.excludeExpected( ['Boolean', 'QuotedLiteral', "'#'", 'NULL'] ); 
            this.state = 1204;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__27:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.NULL:
            case languageParser.Number:
                this.state = 1195;
                localctx.val = this.literalValue();
                 localctx.art.value = localctx.val.val; 
                break;
            case languageParser.T__9:
            case languageParser.T__10:
                this.state = 1200;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__9:
                    this.state = 1198;
                    localctx.plus = this.match(languageParser.T__9);
                    break;
                case languageParser.T__10:
                    this.state = 1199;
                    localctx.min = this.match(languageParser.T__10);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1202;
                localctx.num = this.match(languageParser.Number);
                 localctx.art.value = this.numberLiteral( localctx.num, localctx.plus||localctx.min ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
             this.docComment( localctx.annos ); 
            this.state = 1210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 1207;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 1212;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1215;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementDefOrExtendContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDefOrExtend;
    this.outer = null
    this.annos = []
    this.art = null; // ElementDefInnerContext
    this.outer = outer || null;
    return this;
}

ElementDefOrExtendContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefOrExtendContext.prototype.constructor = ElementDefOrExtendContext;

ElementDefOrExtendContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

ElementDefOrExtendContext.prototype.extendElement = function() {
    return this.getTypedRuleContext(ExtendElementContext,0);
};

ElementDefOrExtendContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ElementDefOrExtendContext.prototype.elementDefInner = function() {
    return this.getTypedRuleContext(ElementDefInnerContext,0);
};




languageParser.ElementDefOrExtendContext = ElementDefOrExtendContext;

languageParser.prototype.elementDefOrExtend = function(outer) {

    var localctx = new ElementDefOrExtendContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 80, languageParser.RULE_elementDefOrExtend);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1218;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1223;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1227;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1224;
            this.match(languageParser.EXTEND);
            this.state = 1225;
            this.extendElement( localctx.outer, this.startLocation(), localctx.annos );
            break;

        case 2:
            this.state = 1226;
            localctx.art = this.elementDefInner( localctx.outer, this.startLocation(), localctx.annos, true );
            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ if (localctx.art) this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDef;
    this.outer = null
    this.annos = []
    this.art = null; // ElementDefInnerContext
    this.outer = outer || null;
    return this;
}

ElementDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefContext.prototype.constructor = ElementDefContext;

ElementDefContext.prototype.elementDefInner = function() {
    return this.getTypedRuleContext(ElementDefInnerContext,0);
};

ElementDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ElementDefContext = ElementDefContext;

languageParser.prototype.elementDef = function(outer) {

    var localctx = new ElementDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 82, languageParser.RULE_elementDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1230;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1235;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1236;
        localctx.art = this.elementDefInner( localctx.outer, this.startLocation(), localctx.annos, false );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MixinElementDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_mixinElementDef;
    this.outer = null
    this.art = null
    this.name = null; // IdentContext
    this.as = null; // Token
    this.outer = outer || null;
    return this;
}

MixinElementDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MixinElementDefContext.prototype.constructor = MixinElementDefContext;

MixinElementDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

MixinElementDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MixinElementDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MixinElementDefContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

MixinElementDefContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

MixinElementDefContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

MixinElementDefContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

MixinElementDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

MixinElementDefContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};




languageParser.MixinElementDefContext = MixinElementDefContext;

languageParser.prototype.mixinElementDef = function(outer) {

    var localctx = new MixinElementDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 84, languageParser.RULE_mixinElementDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1238;
        localctx.name = this.ident('Mixin');
         localctx.art =  this.addDef( localctx.outer, 'mixin', 'mixin', localctx.name.id ) 
        this.state = 1263;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__4:
            this.state = 1240;
            this.match(languageParser.T__4);
            this.state = 1257;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1241;
                this.typeAssociationBase( localctx.art, false );
                this.state = 1245;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1242;
                    this.typeToMany( localctx.art );
                    break;

                case 2:
                    this.state = 1243;
                    this.typeToOne( localctx.art );
                    break;

                case 3:
                    this.state = 1244;
                    this.simplePath( localctx.art.target, 'artref' );
                    break;

                }
                this.state = 1248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1 || _la===languageParser.ON) {
                    this.state = 1247;
                    this.typeAssociationCont( localctx.art );
                }

                break;

            case 2:
                this.state = 1250;
                this.typeRefOptArgs( localctx.art );
                this.state = 1255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__8) {
                    this.state = 1251;
                    localctx.as = this.match(languageParser.T__8);
                    this.state = 1252;
                    this.expression();
                     this.notSupportedYet( 'Calculated fields are not supported yet', localctx.as ); 
                }

                break;

            }
            break;
        case languageParser.T__8:
            this.state = 1259;
            localctx.as = this.match(languageParser.T__8);
            this.state = 1260;
            this.expression();
             this.notSupportedYet( 'Calculated fields are not supported yet', localctx.as ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1265;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MisplacedAnnotationsContext(parser, parent, invokingState, annos, messageId) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_misplacedAnnotations;
    this.annos = null
    this.messageId = null
    this.annos = annos || null;
    this.messageId = messageId || null;
    return this;
}

MisplacedAnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MisplacedAnnotationsContext.prototype.constructor = MisplacedAnnotationsContext;

MisplacedAnnotationsContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.MisplacedAnnotationsContext = MisplacedAnnotationsContext;

languageParser.prototype.misplacedAnnotations = function(annos, messageId) {

    var localctx = new MisplacedAnnotationsContext(this, this._ctx, this.state, annos, messageId);
    this.enterRule(localctx, 86, languageParser.RULE_misplacedAnnotations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1268; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1267;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1270; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===languageParser.T__7);
         if (localctx.messageId)           // issue specified in central registry
                this.message( messageId, this.tokenLocation( localctx.start, this.getCurrentToken() ) );
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementDefInnerContext(parser, parent, invokingState, outer, loc, annos, allowEq) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDefInner;
    this.outer = null
    this.loc = null
    this.annos = null
    this.allowEq = null
    this.art = null
    this.virtual = null; // Token
    this.key = null; // Token
    this.masked = null; // Token
    this.name = null; // IdentContext
    this.one = null; // Token
    this.many = null; // Token
    this.array = null; // Token
    this.of = null; // Token
    this.l = null; // Token
    this.eq = null; // Token
    this.e = null; // ExpressionContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    this.allowEq = allowEq || null;
    return this;
}

ElementDefInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefInnerContext.prototype.constructor = ElementDefInnerContext;

ElementDefInnerContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ElementDefInnerContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

ElementDefInnerContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ElementDefInnerContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};

ElementDefInnerContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ElementDefInnerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementDefInnerContext.prototype.VIRTUAL = function() {
    return this.getToken(languageParser.VIRTUAL, 0);
};

ElementDefInnerContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};

ElementDefInnerContext.prototype.MASKED = function() {
    return this.getToken(languageParser.MASKED, 0);
};

ElementDefInnerContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ElementDefInnerContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ElementDefInnerContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

ElementDefInnerContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

ElementDefInnerContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

ElementDefInnerContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

ElementDefInnerContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ElementDefInnerContext.prototype.typeCompoStruct = function() {
    return this.getTypedRuleContext(TypeCompoStructContext,0);
};

ElementDefInnerContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

ElementDefInnerContext.prototype.typeAssociationElementCont = function() {
    return this.getTypedRuleContext(TypeAssociationElementContContext,0);
};

ElementDefInnerContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

ElementDefInnerContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ElementDefInnerContext.prototype.misplacedAnnotations = function() {
    return this.getTypedRuleContext(MisplacedAnnotationsContext,0);
};

ElementDefInnerContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};

ElementDefInnerContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

ElementDefInnerContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

ElementDefInnerContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

ElementDefInnerContext.prototype.elementProperties = function() {
    return this.getTypedRuleContext(ElementPropertiesContext,0);
};

ElementDefInnerContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

ElementDefInnerContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.ElementDefInnerContext = ElementDefInnerContext;

languageParser.prototype.elementDefInner = function(outer, loc, annos, allowEq) {

    var localctx = new ElementDefInnerContext(this, this._ctx, this.state, outer, loc, annos, allowEq);
    this.enterRule(localctx, 88, languageParser.RULE_elementDefInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^[:{@=}]$/ ); 
        this.state = 1276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.VIRTUAL) {
            this.state = 1275;
            localctx.virtual = this.match(languageParser.VIRTUAL);
        }

        this.state = 1279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 1278;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 1282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        if(la_===1) {
            this.state = 1281;
            localctx.masked = this.match(languageParser.MASKED);

        }
        this.state = 1285;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1284;
            this.match(languageParser.ELEMENT);

        }
        this.state = 1287;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'element', localctx.name.id, localctx.annos,
                                  { virtual: localctx.virtual, key: localctx.key, masked: localctx.masked },
                                  localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 1292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1289;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1477;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1295;
            this.typeStruct( localctx.art );
            this.state = 1300;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.NOT:
            case languageParser.NULL:
                this.state = 1296;
                this.nullability( localctx.art );
                this.state = 1297;
                this.requiredSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
            case languageParser.T__7:
            case languageParser.KEY:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.VIRTUAL:
                this.state = 1299;
                this.optionalSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__4:
            this.state = 1302;
            this.match(languageParser.T__4);
            this.state = 1463;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1303;
                this.typeStruct( localctx.art );
                this.state = 1305;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1304;
                    this.nullability( localctx.art );
                }

                this.state = 1308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__7) {
                    this.state = 1307;
                    this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-struct' );
                }

                this.state = 1310;
                this.requiredSemi();
                break;

            case 2:
                this.state = 1312;
                this.typeAssociationBase( localctx.art, true );
                this.state = 1335;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1313;
                    this.typeStruct( localctx.art.target, true );
                    this.state = 1314;
                    this.optionalSemi();
                    break;

                case 2:
                    this.state = 1316;
                    localctx.one = this.match(languageParser.ONE);
                     this.setMaxCardinality( localctx.art, localctx.one, this.numberLiteral( localctx.one, null, '1' ) ); 
                    this.state = 1318;
                    this.typeCompoStruct( localctx.art.target );
                    this.state = 1319;
                    this.optionalSemi();
                    break;

                case 3:
                    this.state = 1321;
                    localctx.many = this.match(languageParser.MANY);
                     this.setMaxCardinality( localctx.art, localctx.many, { literal: 'string', val: '*' } ); 
                    this.state = 1323;
                    this.typeCompoStruct( localctx.art.target );
                    this.state = 1324;
                    this.optionalSemi();
                    break;

                case 4:
                    this.state = 1326;
                    this.typeToMany( localctx.art );
                    this.state = 1327;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                case 5:
                    this.state = 1329;
                    this.typeToOne( localctx.art );
                    this.state = 1330;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                case 6:
                    this.state = 1332;
                    this.simplePath( localctx.art.target, 'artref' );
                    this.state = 1333;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                }
                break;

            case 3:
                this.state = 1342;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ARRAY:
                    this.state = 1337;
                    localctx.array = this.match(languageParser.ARRAY);
                    this.state = 1338;
                    localctx.of = this.match(languageParser.OF);
                     localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
                    break;
                case languageParser.MANY:
                    this.state = 1340;
                    localctx.many = this.match(languageParser.MANY);
                     localctx.art.items = { location: this.tokenLocation( localctx.many ) };
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1388;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1344;
                    this.typeStruct( localctx.art.items );
                    this.state = 1346;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1345;
                        this.nullability( localctx.art.items );
                    }

                    this.state = 1349;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.T__7) {
                        this.state = 1348;
                        this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-struct' );
                    }

                    break;

                case 2:
                    this.state = 1351;
                    this.typeTypeOf( localctx.art.items );
                    this.state = 1353;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1352;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1359;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1356;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1361;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;

                case 3:
                    this.state = 1362;
                    this.typeRefOptArgs( localctx.art.items );
                    this.state = 1364;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1363;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1370;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1367;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1372;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1386;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.ENUM) {
                        this.state = 1373;
                        this.match(languageParser.ENUM);
                        this.state = 1374;
                        this.match(languageParser.T__1);
                         localctx.art.items.enum = Object.create(null); 
                        this.state = 1379;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                            this.state = 1376;
                            this.enumSymbolDef( localctx.art.items );
                            this.state = 1381;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1382;
                        this.match(languageParser.T__3);
                        this.state = 1384;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===languageParser.T__7) {
                            this.state = 1383;
                            this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-enum' );
                        }

                    }

                    break;

                }
                this.state = 1390;
                this.requiredSemi();
                break;

            case 4:
                this.state = 1392;
                this.typeTypeOf( localctx.art );
                this.state = 1394;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__8 || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (languageParser.NOT - 51)) | (1 << (languageParser.NULL - 51)) | (1 << (languageParser.DEFAULT - 51)))) !== 0)) {
                    this.state = 1393;
                    this.elementProperties( localctx.art );
                }

                 this.docComment( localctx.annos ); 
                this.state = 1400;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1397;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1402;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1403;
                this.requiredSemi();
                break;

            case 5:
                this.state = 1405;
                localctx.l = this.match(languageParser.LOCALIZED);
                 localctx.art.localized = this.tokenLocation( localctx.l, undefined, true ); 
                this.state = 1407;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1409;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1414;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1423;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__8 || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (languageParser.NOT - 51)) | (1 << (languageParser.NULL - 51)) | (1 << (languageParser.DEFAULT - 51)))) !== 0)) {
                    this.state = 1415;
                    this.elementProperties( localctx.art );
                     this.docComment( localctx.annos ); 
                    this.state = 1420;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1417;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1422;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 1425;
                this.requiredSemi();
                break;

            case 6:
                this.state = 1427;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1429;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1434;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1459;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case languageParser.ENUM:
                	this.state = 1435;
                	this.match(languageParser.ENUM);
                	this.state = 1436;
                	this.match(languageParser.T__1);
                	 localctx.art.enum = Object.create(null); 
                	this.state = 1441;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                	    this.state = 1438;
                	    this.enumSymbolDef( localctx.art );
                	    this.state = 1443;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	}
                	this.state = 1444;
                	this.match(languageParser.T__3);
                	this.state = 1446;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===languageParser.T__8 || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (languageParser.NOT - 51)) | (1 << (languageParser.NULL - 51)) | (1 << (languageParser.DEFAULT - 51)))) !== 0)) {
                	    this.state = 1445;
                	    this.elementProperties( localctx.art );
                	}

                	this.state = 1449;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===languageParser.T__7) {
                	    this.state = 1448;
                	    this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-enum' );
                	}

                	break;
                case languageParser.T__8:
                case languageParser.NOT:
                case languageParser.NULL:
                case languageParser.DEFAULT:
                	this.state = 1451;
                	this.elementProperties( localctx.art );
                	 this.docComment( localctx.annos ); 
                	this.state = 1456;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	while(_la===languageParser.T__7) {
                	    this.state = 1453;
                	    this.annotationAssignment_ll1( localctx.annos );
                	    this.state = 1458;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	}
                	break;
                case languageParser.T__0:
                case languageParser.T__3:
                	break;
                default:
                	break;
                }
                this.state = 1461;
                this.requiredSemi();
                break;

            }
            break;
        case languageParser.T__8:
            this.state = 1465;
            localctx.eq = this.match(languageParser.T__8);
            this.state = 1466;
            localctx.e = this.expression();

                    if (!localctx.allowEq || localctx.e.expr && !localctx.e.expr.literal )
                      this.notSupportedYet( 'Calculated fields are not supported yet', localctx.eq );
                    else if (localctx.e.expr)
                      localctx.art.value = localctx.e.expr;
                  
             this.docComment( localctx.annos ); 
            this.state = 1472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__7) {
                this.state = 1469;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 1474;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1475;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 5 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtendElementContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendElement;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.expected = null; // Token
    this.name = null; // IdentContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendElementContext.prototype.constructor = ExtendElementContext;

ExtendElementContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};

ExtendElementContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ExtendElementContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};




languageParser.ExtendElementContext = ExtendElementContext;

languageParser.prototype.extendElement = function(outer, loc, annos) {

    var localctx = new ExtendElementContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 90, languageParser.RULE_extendElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        if(la_===1) {
            this.state = 1479;
            localctx.expected = this.match(languageParser.ELEMENT);

        }
        this.state = 1482;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'extend', localctx.name.id, localctx.annos,
                                  { expectedKind: localctx.expected && 'element' },
                                  localctx.loc ) 
        this.state = 1484;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BracedSelectItemListDefContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_bracedSelectItemListDef;
    this.query = null
    this.star = null; // Token
    this.query = query || null;
    return this;
}

BracedSelectItemListDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BracedSelectItemListDefContext.prototype.constructor = BracedSelectItemListDefContext;

BracedSelectItemListDefContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};




languageParser.BracedSelectItemListDefContext = BracedSelectItemListDefContext;

languageParser.prototype.bracedSelectItemListDef = function(query) {

    var localctx = new BracedSelectItemListDefContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 92, languageParser.RULE_bracedSelectItemListDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1486;
        this.match(languageParser.T__1);
         if (!localctx.query.columns) localctx.query.columns = []; 
        this.state = 1501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.EXTRACT - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.TRIM - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.AND - 65)) | (1 << (languageParser.ANNOTATE - 65)) | (1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.BOTH - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.DAY - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)) | (1 << (languageParser.HAVING - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HOUR - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEADING - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MINUTE - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.MONTH - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.SECOND - 97)) | (1 << (languageParser.SERVICE - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TRAILING - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.YEAR - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
            this.state = 1491;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__11:
                this.state = 1488;
                localctx.star = this.match(languageParser.T__11);

                          localctx.query.columns = [ this.tokenLocation( localctx.star, undefined, '*' ) ];
                        
                break;
            case languageParser.T__1:
            case languageParser.T__4:
            case languageParser.T__5:
            case languageParser.T__7:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__16:
            case languageParser.T__27:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.CASE:
            case languageParser.CAST:
            case languageParser.EXTRACT:
            case languageParser.KEY:
            case languageParser.NEW:
            case languageParser.NULL:
            case languageParser.TRIM:
            case languageParser.Number:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.VIRTUAL:
            case languageParser.HideAlternatives:
                this.state = 1490;
                this.selectItemDef( localctx.query.columns );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1493;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 1495;
                this.selectItemDef( localctx.query.columns );
                this.state = 1500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1503;
        this.match(languageParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemDef;
    this.outer = null
    this.annos = []
    this.virtual = null; // Token
    this.key = null; // Token
    this.art = null; // SelectItemDefBodyContext
    this.outer = outer || null;
    return this;
}

SelectItemDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemDefContext.prototype.constructor = SelectItemDefContext;

SelectItemDefContext.prototype.selectItemDefBody = function() {
    return this.getTypedRuleContext(SelectItemDefBodyContext,0);
};

SelectItemDefContext.prototype.annotationAssignment_atn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
    }
};

SelectItemDefContext.prototype.VIRTUAL = function() {
    return this.getToken(languageParser.VIRTUAL, 0);
};

SelectItemDefContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};




languageParser.SelectItemDefContext = SelectItemDefContext;

languageParser.prototype.selectItemDef = function(outer) {

    var localctx = new SelectItemDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 94, languageParser.RULE_selectItemDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1506;
            this.annotationAssignment_atn( localctx.annos );
            this.state = 1511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         this.setLocalToken( 'VIRTUAL', 'VIRTUAL', /^([,.:\[@]|as)$/i ) ; 
        this.state = 1514;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.VIRTUAL) {
            this.state = 1513;
            localctx.virtual = this.match(languageParser.VIRTUAL);
        }

        this.state = 1517;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 1516;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 1519;
        localctx.art = this.selectItemDefBody( localctx.outer, localctx.annos );

              if (localctx.virtual) localctx.art.art.virtual = this.tokenLocation( localctx.virtual, undefined, true );
              if (localctx.key) localctx.art.art.key = this.tokenLocation( localctx.key, undefined, true );
            
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemDefBodyContext(parser, parent, invokingState, outer, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemDefBody;
    this.outer = null
    this.annos = null
    this.art = {}
    this.e = null; // ExpressionContext
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentContext
    this.star = null; // Token
    this.re = null; // Token
    this.to = null; // Token
    this.outer = outer || null;
    this.annos = annos || null;
    return this;
}

SelectItemDefBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemDefBodyContext.prototype.constructor = SelectItemDefBodyContext;

SelectItemDefBodyContext.prototype.selectItemInlineList = function() {
    return this.getTypedRuleContext(SelectItemInlineListContext,0);
};

SelectItemDefBodyContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SelectItemDefBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectItemDefBodyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

SelectItemDefBodyContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

SelectItemDefBodyContext.prototype.DOTbeforeBRACE = function() {
    return this.getToken(languageParser.DOTbeforeBRACE, 0);
};

SelectItemDefBodyContext.prototype.excludingClause = function() {
    return this.getTypedRuleContext(ExcludingClauseContext,0);
};

SelectItemDefBodyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

SelectItemDefBodyContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

SelectItemDefBodyContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

SelectItemDefBodyContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

SelectItemDefBodyContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

SelectItemDefBodyContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};

SelectItemDefBodyContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.SelectItemDefBodyContext = SelectItemDefBodyContext;

languageParser.prototype.selectItemDefBody = function(outer, annos) {

    var localctx = new SelectItemDefBodyContext(this, this._ctx, this.state, outer, annos);
    this.enterRule(localctx, 96, languageParser.RULE_selectItemDefBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1561;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__16:
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.state = 1522;
            localctx.e = this.expression();

                    localctx.art =  this.addItem( localctx.outer, null, null, localctx.annos, { value: localctx.e.expr } )
                  
            this.state = 1532;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 1524;
                this.match(languageParser.AS);
                this.state = 1525;
                localctx.n1 = this.ident('Item');
                 localctx.art.name = localctx.n1.id 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 1528;
                localctx.n2 = this.ident('Item');
                 localctx.art.name = this.fragileAlias( localctx.n2.id, true ); 
                break;
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__7:
            case languageParser.FROM:
            case languageParser.DOTbeforeBRACE:
                 if (this.getCurrentToken().text !== '.') this.classifyImplicitName( 'Item', localctx.e.expr ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
             if (localctx.art.value && !localctx.art.value.path) this.excludeExpected( ["'.'", "'{'"] ); 
            this.state = 1550;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__1:
            	 if (localctx.art.value && !localctx.art.value.path) this.reportExpandInline( 'expand' ); 
            	this.state = 1536;
            	this.selectItemInlineList( localctx.art, 'expand' );
            	this.state = 1538;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.EXCLUDING) {
            	    this.state = 1537;
            	    this.excludingClause( localctx.art );
            	}

            	break;
            case languageParser.DOTbeforeBRACE:
            	 if (localctx.art.value && !localctx.art.value.path) this.reportExpandInline( 'inline' ); 
            	this.state = 1541;
            	this.match(languageParser.DOTbeforeBRACE);
            	this.state = 1548;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case languageParser.T__1:
            	    this.state = 1542;
            	    this.selectItemInlineList( localctx.art, 'inline' );
            	    this.state = 1544;
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	    if(_la===languageParser.EXCLUDING) {
            	        this.state = 1543;
            	        this.excludingClause( localctx.art );
            	    }

            	    break;
            	case languageParser.T__11:
            	    this.state = 1546;
            	    localctx.star = this.match(languageParser.T__11);
            	     localctx.art.inline = [ this.tokenLocation( localctx.star, undefined, '*' ) ]; 
            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	break;
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__7:
            case languageParser.FROM:
            	break;
            default:
            	break;
            }
            break;
        case languageParser.T__1:
             localctx.art =  this.addItem( localctx.outer, null, null, localctx.annos ) 
            this.state = 1553;
            this.selectItemInlineList( localctx.art, 'expand' );
            this.state = 1555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.EXCLUDING) {
                this.state = 1554;
                this.excludingClause( localctx.art );
            }

            this.state = 1557;
            this.match(languageParser.AS);
            this.state = 1558;
            localctx.n1 = this.ident('Item');
             localctx.art.name = localctx.n1.id 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         this.docComment( localctx.annos ); 
        this.state = 1567;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1564;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 1570;
            this.match(languageParser.T__4);
            this.state = 1601;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1571;
                localctx.re = this.match(languageParser.REDIRECTED);
                this.state = 1572;
                localctx.to = this.match(languageParser.TO);
                 localctx.art.target = {}; 
                this.state = 1574;
                this.simplePath( localctx.art.target, 'artref' );
                this.state = 1583;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.ON:
                    this.state = 1575;
                    this.typeAssociationCont( localctx.art );
                    break;
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__7:
                case languageParser.FROM:
                     this.docComment( localctx.annos ); 
                    this.state = 1580;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1577;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1582;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 2:
                this.state = 1585;
                this.typeTypeOf( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1590;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1587;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1592;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 3:
                this.state = 1593;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1598;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1595;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1600;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            }
        }

        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemInlineListContext(parser, parent, invokingState, art, clause) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemInlineList;
    this.art = null
    this.clause = null
    this.star = null; // Token
    this.art = art || null;
    this.clause = clause || null;
    return this;
}

SelectItemInlineListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemInlineListContext.prototype.constructor = SelectItemInlineListContext;

SelectItemInlineListContext.prototype.selectItemInlineDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemInlineDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemInlineDefContext,i);
    }
};




languageParser.SelectItemInlineListContext = SelectItemInlineListContext;

languageParser.prototype.selectItemInlineList = function(art, clause) {

    var localctx = new SelectItemInlineListContext(this, this._ctx, this.state, art, clause);
    this.enterRule(localctx, 98, languageParser.RULE_selectItemInlineList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1605;
        this.match(languageParser.T__1);
         localctx.art[localctx.clause] = []; 
        this.state = 1620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.EXTRACT - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.TRIM - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.AND - 65)) | (1 << (languageParser.ANNOTATE - 65)) | (1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.BOTH - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.DAY - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)) | (1 << (languageParser.HAVING - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HOUR - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEADING - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MINUTE - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.MONTH - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.SECOND - 97)) | (1 << (languageParser.SERVICE - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TRAILING - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.YEAR - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
            this.state = 1610;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__11:
                this.state = 1607;
                localctx.star = this.match(languageParser.T__11);
                 localctx.art[localctx.clause].push( this.tokenLocation( localctx.star, undefined, '*' ) ); 
                break;
            case languageParser.T__1:
            case languageParser.T__4:
            case languageParser.T__5:
            case languageParser.T__7:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__16:
            case languageParser.T__27:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.CASE:
            case languageParser.CAST:
            case languageParser.EXTRACT:
            case languageParser.NEW:
            case languageParser.NULL:
            case languageParser.TRIM:
            case languageParser.Number:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.HideAlternatives:
                this.state = 1609;
                this.selectItemInlineDef( localctx.art[localctx.clause] );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1612;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore("}")) break; 
                this.state = 1614;
                this.selectItemInlineDef( localctx.art[localctx.clause] );
                this.state = 1619;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1622;
        this.match(languageParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemInlineDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemInlineDef;
    this.outer = null
    this.annos = []
    this.art = null; // SelectItemDefBodyContext
    this.outer = outer || null;
    return this;
}

SelectItemInlineDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemInlineDefContext.prototype.constructor = SelectItemInlineDefContext;

SelectItemInlineDefContext.prototype.selectItemDefBody = function() {
    return this.getTypedRuleContext(SelectItemDefBodyContext,0);
};

SelectItemInlineDefContext.prototype.annotationAssignment_atn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
    }
};




languageParser.SelectItemInlineDefContext = SelectItemInlineDefContext;

languageParser.prototype.selectItemInlineDef = function(outer) {

    var localctx = new SelectItemInlineDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 100, languageParser.RULE_selectItemInlineDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1625;
            this.annotationAssignment_atn( localctx.annos );
            this.state = 1630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1631;
        localctx.art = this.selectItemDefBody( localctx.outer, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListDefContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_parameterListDef;
    this.art = null
    this.art = art || null;
    return this;
}

ParameterListDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListDefContext.prototype.constructor = ParameterListDefContext;

ParameterListDefContext.prototype.parameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDefContext);
    } else {
        return this.getTypedRuleContext(ParameterDefContext,i);
    }
};




languageParser.ParameterListDefContext = ParameterListDefContext;

languageParser.prototype.parameterListDef = function(art) {

    var localctx = new ParameterListDefContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 102, languageParser.RULE_parameterListDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1633;
        this.match(languageParser.T__5);
        this.state = 1643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
            this.state = 1634;
            this.parameterDef( localctx.art );
            this.state = 1640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1635;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1637;
                this.parameterDef( localctx.art );
                this.state = 1642;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1645;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_parameterDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.expr = null; // ExpressionContext
    this.outer = outer || null;
    return this;
}

ParameterDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDefContext.prototype.constructor = ParameterDefContext;

ParameterDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

ParameterDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ParameterDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ParameterDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ParameterDefContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

ParameterDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.ParameterDefContext = ParameterDefContext;

languageParser.prototype.parameterDef = function(outer) {

    var localctx = new ParameterDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 104, languageParser.RULE_parameterDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1648;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1653;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1654;
        localctx.name = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'param', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1656;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1661;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1662;
        this.typeSpec( localctx.art );
        this.state = 1667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.DEFAULT) {
            this.state = 1663;
            this.match(languageParser.DEFAULT);
            this.state = 1664;
            localctx.expr = this.expression();
             localctx.art.default = localctx.expr.expr; 
        }

         this.docComment( localctx.annos ); 
        this.state = 1673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1670;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntityParametersContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityParameters;
    this.art = null
    this.art = art || null;
    return this;
}

EntityParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityParametersContext.prototype.constructor = EntityParametersContext;

EntityParametersContext.prototype.entityParameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntityParameterDefContext);
    } else {
        return this.getTypedRuleContext(EntityParameterDefContext,i);
    }
};




languageParser.EntityParametersContext = EntityParametersContext;

languageParser.prototype.entityParameters = function(art) {

    var localctx = new EntityParametersContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 106, languageParser.RULE_entityParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1676;
        this.match(languageParser.T__5);
        this.state = 1686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
            this.state = 1677;
            this.entityParameterDef( localctx.art );
            this.state = 1683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1678;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1680;
                this.entityParameterDef( localctx.art );
                this.state = 1685;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1688;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EntityParameterDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityParameterDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.expr = null; // ExpressionContext
    this.outer = outer || null;
    return this;
}

EntityParameterDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityParameterDefContext.prototype.constructor = EntityParameterDefContext;

EntityParameterDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

EntityParameterDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EntityParameterDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

EntityParameterDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EntityParameterDefContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

EntityParameterDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.EntityParameterDefContext = EntityParameterDefContext;

languageParser.prototype.entityParameterDef = function(outer) {

    var localctx = new EntityParameterDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 108, languageParser.RULE_entityParameterDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.docComment( localctx.annos ); 
        this.state = 1694;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1691;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1697;
        localctx.name = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'param', localctx.name.id, localctx.annos )
              this.docComment( localctx.annos ); 
        this.state = 1702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1699;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1705;
        this.typeSpec( localctx.art );
        this.state = 1710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.DEFAULT) {
            this.state = 1706;
            this.match(languageParser.DEFAULT);
            this.state = 1707;
            localctx.expr = this.expression();
             localctx.art.default = localctx.expr.expr; 
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullabilityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_nullability;
    this.art = null
    this.not = null; // Token
    this.n1 = null; // Token
    this.n2 = null; // Token
    this.art = art || null;
    return this;
}

NullabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullabilityContext.prototype.constructor = NullabilityContext;

NullabilityContext.prototype.NOT = function() {
    return this.getToken(languageParser.NOT, 0);
};

NullabilityContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};




languageParser.NullabilityContext = NullabilityContext;

languageParser.prototype.nullability = function(art) {

    var localctx = new NullabilityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 110, languageParser.RULE_nullability);
    try {
        this.state = 1717;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1712;
            localctx.not = this.match(languageParser.NOT);
            this.state = 1713;
            localctx.n1 = this.match(languageParser.NULL);
             localctx.art.notNull = this.tokenLocation(localctx.not,localctx.n1,true); 
            break;
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1715;
            localctx.n2 = this.match(languageParser.NULL);
             localctx.art.notNull = this.tokenLocation(localctx.n2,undefined,false); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementPropertiesContext(parser, parent, invokingState, elem) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementProperties;
    this.elem = null
    this.expr = null; // ExpressionContext
    this.eq = null; // Token
    this.elem = elem || null;
    return this;
}

ElementPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementPropertiesContext.prototype.constructor = ElementPropertiesContext;

ElementPropertiesContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ElementPropertiesContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

ElementPropertiesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.ElementPropertiesContext = ElementPropertiesContext;

languageParser.prototype.elementProperties = function(elem) {

    var localctx = new ElementPropertiesContext(this, this._ctx, this.state, elem);
    this.enterRule(localctx, 112, languageParser.RULE_elementProperties);
    var _la = 0; // Token type
    try {
        this.state = 1736;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1719;
            this.nullability(localctx.elem);
            this.state = 1724;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DEFAULT) {
                this.state = 1720;
                this.match(languageParser.DEFAULT);
                this.state = 1721;
                localctx.expr = this.expression();
                 localctx.elem.default = localctx.expr.expr; 
            }

            break;
        case languageParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1726;
            this.match(languageParser.DEFAULT);
            this.state = 1727;
            localctx.expr = this.expression();
             localctx.elem.default = localctx.expr.expr; 
            this.state = 1731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1730;
                this.nullability(localctx.elem);
            }

            break;
        case languageParser.T__8:
            this.enterOuterAlt(localctx, 3);
            this.state = 1733;
            localctx.eq = this.match(languageParser.T__8);
             this.notSupportedYet( 'Calculated fields are not supported yet', localctx.eq ); 
            this.state = 1735;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ViewDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_viewDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.v = null; // Token
    this.qe = null; // QueryExpressionContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ViewDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewDefContext.prototype.constructor = ViewDefContext;

ViewDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ViewDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ViewDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ViewDefContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

ViewDefContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ViewDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ViewDefContext.prototype.entityParameters = function() {
    return this.getTypedRuleContext(EntityParametersContext,0);
};

ViewDefContext.prototype.PARAMETERS = function() {
    return this.getToken(languageParser.PARAMETERS, 0);
};

ViewDefContext.prototype.entityParameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntityParameterDefContext);
    } else {
        return this.getTypedRuleContext(EntityParameterDefContext,i);
    }
};

ViewDefContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ViewDefContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};




languageParser.ViewDefContext = ViewDefContext;

languageParser.prototype.viewDef = function(outer, loc, annos) {

    var localctx = new ViewDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 114, languageParser.RULE_viewDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1738;
        localctx.v = this.match(languageParser.VIEW);
        this.state = 1739;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'entity', localctx.name, localctx.annos, { ['$'+'syntax']: 'view' }, localctx.loc )
              this.docComment( localctx.annos ); 
        this.state = 1744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 1741;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1758;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 1747;
        	this.entityParameters( localctx.art );
        	break;
        case languageParser.WITH:
        case languageParser.HideAlternatives:
        	this.state = 1748;
        	_la = this._input.LA(1);
        	if(!(_la===languageParser.WITH || _la===languageParser.HideAlternatives)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	this.state = 1749;
        	this.match(languageParser.PARAMETERS);
        	this.state = 1750;
        	this.entityParameterDef( localctx.art );
        	this.state = 1755;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__2) {
        	    this.state = 1751;
        	    this.match(languageParser.T__2);
        	    this.state = 1752;
        	    this.entityParameterDef( localctx.art );
        	    this.state = 1757;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.AS:
        	break;
        default:
        	break;
        }
        this.state = 1760;
        this.match(languageParser.AS);
        this.state = 1761;
        localctx.qe = this.queryExpression();
         localctx.art.query = localctx.qe.query; 
        this.state = 1763;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeRefContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_includeRef;
    this.art = null
    this.incl = {}
    this.art = art || null;
    return this;
}

IncludeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeRefContext.prototype.constructor = IncludeRefContext;

IncludeRefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.IncludeRefContext = IncludeRefContext;

languageParser.prototype.includeRef = function(art) {

    var localctx = new IncludeRefContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 116, languageParser.RULE_includeRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1765;
        this.simplePath( localctx.incl, 'artref' );
         if (localctx.art.includes) localctx.art.includes.push(localctx.incl); else localctx.art.includes = [localctx.incl]; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeSpec;
    this.art = null
    this.art = art || null;
    return this;
}

TypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecContext.prototype.constructor = TypeSpecContext;

TypeSpecContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeSpecContext.prototype.typeArray = function() {
    return this.getTypedRuleContext(TypeArrayContext,0);
};

TypeSpecContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeSpecContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeSpecContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeSpecContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeSpecContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeSpecContext = TypeSpecContext;

languageParser.prototype.typeSpec = function(art) {

    var localctx = new TypeSpecContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 118, languageParser.RULE_typeSpec);
    var _la = 0; // Token type
    try {
        this.state = 1797;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1768;
            this.typeStruct( localctx.art );
            break;
        case languageParser.T__4:
            this.enterOuterAlt(localctx, 2);
            this.state = 1769;
            this.match(languageParser.T__4);
            this.state = 1795;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1770;
                this.typeStruct( localctx.art );
                this.state = 1772;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1771;
                    this.nullability( localctx.art );
                }

                break;

            case 2:
                this.state = 1774;
                this.typeArray( localctx.art );
                break;

            case 3:
                this.state = 1775;
                this.typeTypeOf( localctx.art );
                this.state = 1777;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1776;
                    this.nullability( localctx.art );
                }

                break;

            case 4:
                this.state = 1779;
                this.typeRefOptArgs( localctx.art );
                this.state = 1781;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1780;
                    this.nullability( localctx.art );
                }

                this.state = 1793;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ENUM) {
                    this.state = 1783;
                    this.match(languageParser.ENUM);
                    this.state = 1784;
                    this.match(languageParser.T__1);
                     localctx.art.enum = Object.create(null); 
                    this.state = 1789;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                        this.state = 1786;
                        this.enumSymbolDef( localctx.art );
                        this.state = 1791;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1792;
                    this.match(languageParser.T__3);
                }

                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnTypeSpecContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_returnTypeSpec;
    this.art = null
    this.annos = null
    this.ret = null; // Token
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

ReturnTypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnTypeSpecContext.prototype.constructor = ReturnTypeSpecContext;

ReturnTypeSpecContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ReturnTypeSpecContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

ReturnTypeSpecContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

ReturnTypeSpecContext.prototype.typeArray = function() {
    return this.getTypedRuleContext(TypeArrayContext,0);
};

ReturnTypeSpecContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

ReturnTypeSpecContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

ReturnTypeSpecContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ReturnTypeSpecContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

ReturnTypeSpecContext.prototype.misplacedAnnotations = function() {
    return this.getTypedRuleContext(MisplacedAnnotationsContext,0);
};

ReturnTypeSpecContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.ReturnTypeSpecContext = ReturnTypeSpecContext;

languageParser.prototype.returnTypeSpec = function(art, annos) {

    var localctx = new ReturnTypeSpecContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 120, languageParser.RULE_returnTypeSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1799;
        localctx.ret = this.match(languageParser.RETURNS);
         localctx.art.returns = { location: this.tokenLocation( localctx.ret ), kind: 'param' }; 
        this.state = 1827;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1801;
            this.typeStruct( localctx.art.returns );
            this.state = 1803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1802;
                this.nullability( localctx.art.returns );
            }

            break;

        case 2:
            this.state = 1805;
            this.typeArray( localctx.art.returns );
            break;

        case 3:
            this.state = 1806;
            this.typeTypeOf( localctx.art.returns );
            this.state = 1808;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1807;
                this.nullability( localctx.art.returns );
            }

            break;

        case 4:
            this.state = 1810;
            this.typeRefOptArgs( localctx.art.returns );
            this.state = 1812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1811;
                this.nullability( localctx.art.returns );
            }

            this.state = 1825;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.ENUM:
            	this.state = 1814;
            	this.match(languageParser.ENUM);
            	this.state = 1815;
            	this.match(languageParser.T__1);
            	 localctx.art.returns.enum = Object.create(null); 
            	this.state = 1820;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
            	    this.state = 1817;
            	    this.enumSymbolDef( localctx.art.returns );
            	    this.state = 1822;
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	}
            	this.state = 1823;
            	this.match(languageParser.T__3);
            	break;
            case languageParser.T__7:
            	this.state = 1824;
            	this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-params' );
            	break;
            case languageParser.T__0:
            case languageParser.T__3:
            	break;
            default:
            	break;
            }
            break;

        }
        this.state = 1829;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecSemiContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeSpecSemi;
    this.art = null
    this.annos = null
    this.array = null; // Token
    this.of = null; // Token
    this.many = null; // Token
    this.l = null; // Token
    this.head = null; // Token
    this.tail = null; // Token
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

TypeSpecSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecSemiContext.prototype.constructor = TypeSpecSemiContext;

TypeSpecSemiContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeSpecSemiContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

TypeSpecSemiContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

TypeSpecSemiContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TypeSpecSemiContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeSpecSemiContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeSpecSemiContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

TypeSpecSemiContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

TypeSpecSemiContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

TypeSpecSemiContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

TypeSpecSemiContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};

TypeSpecSemiContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

TypeSpecSemiContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeSpecSemiContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

TypeSpecSemiContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

TypeSpecSemiContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


TypeSpecSemiContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeSpecSemiContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeSpecSemiContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

TypeSpecSemiContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeSpecSemiContext = TypeSpecSemiContext;

languageParser.prototype.typeSpecSemi = function(art, annos) {

    var localctx = new TypeSpecSemiContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 122, languageParser.RULE_typeSpecSemi);
    var _la = 0; // Token type
    try {
        this.state = 2021;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1831;
            this.typeStruct( localctx.art );
            this.state = 1832;
            this.optionalSemi();
            break;
        case languageParser.T__4:
            this.enterOuterAlt(localctx, 2);
            this.state = 1834;
            this.match(languageParser.T__4);
            this.state = 2019;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1835;
                this.typeStruct( localctx.art );
                this.state = 1836;
                this.optionalSemi();
                break;

            case 2:
                this.state = 1838;
                this.typeAssociationBase( localctx.art, false );
                this.state = 1842;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1839;
                    this.typeToMany( localctx.art );
                    break;

                case 2:
                    this.state = 1840;
                    this.typeToOne( localctx.art );
                    break;

                case 3:
                    this.state = 1841;
                    this.simplePath( localctx.art.target, 'artref' );
                    break;

                }
                this.state = 1845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1 || _la===languageParser.ON) {
                    this.state = 1844;
                    this.typeAssociationCont( localctx.art );
                }

                this.state = 1847;
                this.requiredSemi();
                break;

            case 3:
                this.state = 1854;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ARRAY:
                    this.state = 1849;
                    localctx.array = this.match(languageParser.ARRAY);
                    this.state = 1850;
                    localctx.of = this.match(languageParser.OF);
                     localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
                    break;
                case languageParser.MANY:
                    this.state = 1852;
                    localctx.many = this.match(languageParser.MANY);
                     localctx.art.items = { location: this.tokenLocation( localctx.many ) };
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1900;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1856;
                    this.typeStruct( localctx.art.items );
                    this.state = 1858;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1857;
                        this.nullability( localctx.art.items );
                    }

                    this.state = 1860;
                    this.optionalSemi();
                    break;

                case 2:
                    this.state = 1862;
                    this.typeTypeOf( localctx.art.items );
                    this.state = 1864;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1863;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1870;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1867;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1872;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1873;
                    this.requiredSemi();
                    break;

                case 3:
                    this.state = 1875;
                    this.typeRefOptArgs( localctx.art.items );
                    this.state = 1877;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.NOT || _la===languageParser.NULL) {
                        this.state = 1876;
                        this.nullability( localctx.art.items );
                    }

                     this.docComment( localctx.annos ); 
                    this.state = 1883;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1880;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1885;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1898;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1886;
                        this.match(languageParser.ENUM);
                        this.state = 1887;
                        this.match(languageParser.T__1);
                         localctx.art.items.enum = Object.create(null); 
                        this.state = 1892;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                            this.state = 1889;
                            this.enumSymbolDef( localctx.art.items );
                            this.state = 1894;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1895;
                        this.match(languageParser.T__3);
                        this.state = 1896;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1897;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                }
                break;

            case 4:
                this.state = 1902;
                this.typeTypeOf( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1907;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1904;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1909;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1910;
                this.requiredSemi();
                break;

            case 5:
                this.state = 1912;
                localctx.l = this.match(languageParser.LOCALIZED);
                 localctx.art.localized = this.tokenLocation( localctx.l, undefined, true ); 
                this.state = 1914;
                this.typeRefOptArgs( localctx.art );
                 this.docComment( localctx.annos ); 
                this.state = 1919;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7) {
                    this.state = 1916;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1921;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1922;
                this.requiredSemi();
                break;

            case 6:
                 localctx.art.type = {}; 
                this.state = 1925;
                this.simplePath( localctx.art.type, 'artref' );
                this.state = 2017;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 1926;
                    this.match(languageParser.T__5);
                    this.state = 1927;
                    localctx.head = this.match(languageParser.Number);
                     localctx.art['$'+'typeArgs'] = [ this.numberLiteral( localctx.head ) ]; 
                    this.state = 1935;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 1929;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore(')')) break; 
                        this.state = 1931;
                        localctx.tail = this.match(languageParser.Number);
                         localctx.art['$'+'typeArgs'].push( this.numberLiteral( localctx.tail ) ); 
                        this.state = 1937;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1938;
                    this.match(languageParser.T__6);
                     this.docComment( localctx.annos ); 
                    this.state = 1943;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1940;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1945;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1958;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1946;
                        this.match(languageParser.ENUM);
                        this.state = 1947;
                        this.match(languageParser.T__1);
                         localctx.art.enum = Object.create(null); 
                        this.state = 1952;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                            this.state = 1949;
                            this.enumSymbolDef( localctx.art );
                            this.state = 1954;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1955;
                        this.match(languageParser.T__3);
                        this.state = 1956;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1957;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__4:
                    this.state = 1960;
                    this.match(languageParser.T__4);
                     localctx.art.type.scope = localctx.art.type.path.length; 
                    this.state = 1962;
                    this.simplePath( localctx.art.type, 'ref');
                     this.docComment( localctx.annos ); 
                    this.state = 1967;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1964;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1969;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1982;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1970;
                        this.match(languageParser.ENUM);
                        this.state = 1971;
                        this.match(languageParser.T__1);
                         localctx.art.enum = Object.create(null); 
                        this.state = 1976;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                            this.state = 1973;
                            this.enumSymbolDef( localctx.art );
                            this.state = 1978;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1979;
                        this.match(languageParser.T__3);
                        this.state = 1980;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 1981;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                case languageParser.T__7:
                case languageParser.ENUM:
                     this.docComment( localctx.annos ); 
                    this.state = 1988;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__7) {
                        this.state = 1985;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1990;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2003;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 1991;
                        this.match(languageParser.ENUM);
                        this.state = 1992;
                        this.match(languageParser.T__1);
                         localctx.art.enum = Object.create(null); 
                        this.state = 1997;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                            this.state = 1994;
                            this.enumSymbolDef( localctx.art );
                            this.state = 1999;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2000;
                        this.match(languageParser.T__3);
                        this.state = 2001;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 2002;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__1:
                case languageParser.T__2:
                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
                    this.state = 2011;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2006;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('{')) break; 
                        this.state = 2008;
                        this.includeRef( localctx.art );
                        this.state = 2013;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2014;
                    this.typeStruct( localctx.art );
                    this.state = 2015;
                    this.optionalSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 3 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeStructContext(parser, parent, invokingState, art, attachLoc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeStruct;
    this.art = null
    this.attachLoc = false
    this.art = art || null;
    this.attachLoc = attachLoc || null;
    return this;
}

TypeStructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStructContext.prototype.constructor = TypeStructContext;

TypeStructContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};




languageParser.TypeStructContext = TypeStructContext;

languageParser.prototype.typeStruct = function(art, attachLoc) {

    var localctx = new TypeStructContext(this, this._ctx, this.state, art, attachLoc);
    this.enterRule(localctx, 124, languageParser.RULE_typeStruct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         localctx.art.elements = Object.create(null); 
        this.state = 2024;
        this.match(languageParser.T__1);
        this.state = 2028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
            this.state = 2025;
            this.elementDef( localctx.art );
            this.state = 2030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2031;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         if (localctx.attachLoc) this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeCompoStructContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeCompoStruct;
    this.art = null
    this.art = art || null;
    return this;
}

TypeCompoStructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeCompoStructContext.prototype.constructor = TypeCompoStructContext;

TypeCompoStructContext.prototype.COMPOSITIONofBRACE = function() {
    return this.getToken(languageParser.COMPOSITIONofBRACE, 0);
};

TypeCompoStructContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};




languageParser.TypeCompoStructContext = TypeCompoStructContext;

languageParser.prototype.typeCompoStruct = function(art) {

    var localctx = new TypeCompoStructContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 126, languageParser.RULE_typeCompoStruct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         localctx.art.elements = Object.create(null); 
        this.state = 2034;
        this.match(languageParser.COMPOSITIONofBRACE);
        this.state = 2038;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (languageParser.KEY - 49)) | (1 << (languageParser.ABSTRACT - 49)) | (1 << (languageParser.ACTION - 49)) | (1 << (languageParser.ACTIONS - 49)) | (1 << (languageParser.AND - 49)) | (1 << (languageParser.ANNOTATE - 49)) | (1 << (languageParser.ANNOTATION - 49)) | (1 << (languageParser.ARRAY - 49)) | (1 << (languageParser.ASC - 49)) | (1 << (languageParser.ASPECT - 49)) | (1 << (languageParser.ASSOCIATION - 49)) | (1 << (languageParser.BETWEEN - 49)) | (1 << (languageParser.BOTH - 49)) | (1 << (languageParser.COMPOSITION - 49)) | (1 << (languageParser.CONTEXT - 49)) | (1 << (languageParser.CROSS - 49)) | (1 << (languageParser.DAY - 49)) | (1 << (languageParser.DEFAULT - 49)) | (1 << (languageParser.DEFINE - 49)) | (1 << (languageParser.DESC - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (languageParser.ELEMENT - 81)) | (1 << (languageParser.ELSE - 81)) | (1 << (languageParser.END - 81)) | (1 << (languageParser.ENTITY - 81)) | (1 << (languageParser.ENUM - 81)) | (1 << (languageParser.EVENT - 81)) | (1 << (languageParser.ESCAPE - 81)) | (1 << (languageParser.EXACT - 81)) | (1 << (languageParser.EXCEPT - 81)) | (1 << (languageParser.EXCLUDING - 81)) | (1 << (languageParser.EXTEND - 81)) | (1 << (languageParser.FIRST - 81)) | (1 << (languageParser.FULL - 81)) | (1 << (languageParser.FUNCTION - 81)) | (1 << (languageParser.GROUP - 81)) | (1 << (languageParser.HAVING - 81)) | (1 << (languageParser.HOUR - 81)) | (1 << (languageParser.INNER - 81)) | (1 << (languageParser.INTERSECT - 81)) | (1 << (languageParser.INTO - 81)) | (1 << (languageParser.IS - 81)) | (1 << (languageParser.JOIN - 81)) | (1 << (languageParser.LAST - 81)) | (1 << (languageParser.LEADING - 81)) | (1 << (languageParser.LEFT - 81)) | (1 << (languageParser.LIKE - 81)) | (1 << (languageParser.LIMIT - 81)) | (1 << (languageParser.LOCALIZED - 81)) | (1 << (languageParser.MANY - 81)) | (1 << (languageParser.MASKED - 81)) | (1 << (languageParser.MINUS - 81)) | (1 << (languageParser.MINUTE - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (languageParser.MIXIN - 113)) | (1 << (languageParser.MONTH - 113)) | (1 << (languageParser.NAMESPACE - 113)) | (1 << (languageParser.NULLS - 113)) | (1 << (languageParser.OFFSET - 113)) | (1 << (languageParser.ONE - 113)) | (1 << (languageParser.OR - 113)) | (1 << (languageParser.ORDER - 113)) | (1 << (languageParser.OUTER - 113)) | (1 << (languageParser.PARAMETERS - 113)) | (1 << (languageParser.PROJECTION - 113)) | (1 << (languageParser.REDIRECTED - 113)) | (1 << (languageParser.RETURNS - 113)) | (1 << (languageParser.RIGHT - 113)) | (1 << (languageParser.SECOND - 113)) | (1 << (languageParser.SERVICE - 113)) | (1 << (languageParser.THEN - 113)) | (1 << (languageParser.TRAILING - 113)) | (1 << (languageParser.TO - 113)) | (1 << (languageParser.TYPE - 113)) | (1 << (languageParser.UNION - 113)) | (1 << (languageParser.USING - 113)) | (1 << (languageParser.VIEW - 113)) | (1 << (languageParser.YEAR - 113)) | (1 << (languageParser.Identifier - 113)) | (1 << (languageParser.VIRTUAL - 113)))) !== 0)) {
            this.state = 2035;
            this.elementDef( localctx.art );
            this.state = 2040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2041;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArrayContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeArray;
    this.art = null
    this.array = null; // Token
    this.of = null; // Token
    this.many = null; // Token
    this.art = art || null;
    return this;
}

TypeArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArrayContext.prototype.constructor = TypeArrayContext;

TypeArrayContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeArrayContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeArrayContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeArrayContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

TypeArrayContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeArrayContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

TypeArrayContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeArrayContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeArrayContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeArrayContext = TypeArrayContext;

languageParser.prototype.typeArray = function(art) {

    var localctx = new TypeArrayContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 128, languageParser.RULE_typeArray);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2048;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ARRAY:
            this.state = 2043;
            localctx.array = this.match(languageParser.ARRAY);
            this.state = 2044;
            localctx.of = this.match(languageParser.OF);
             localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
            break;
        case languageParser.MANY:
            this.state = 2046;
            localctx.many = this.match(languageParser.MANY);
             localctx.art.items = { location: this.tokenLocation( localctx.many ) };
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2074;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2050;
            this.typeStruct( localctx.art.items );
            this.state = 2052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 2051;
                this.nullability( localctx.art.items );
            }

            break;

        case 2:
            this.state = 2054;
            this.typeTypeOf( localctx.art.items );
            this.state = 2056;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 2055;
                this.nullability( localctx.art.items );
            }

            break;

        case 3:
            this.state = 2058;
            this.typeRefOptArgs( localctx.art.items );
            this.state = 2060;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 2059;
                this.nullability( localctx.art.items );
            }

            this.state = 2072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ENUM) {
                this.state = 2062;
                this.match(languageParser.ENUM);
                this.state = 2063;
                this.match(languageParser.T__1);
                 localctx.art.items.enum = Object.create(null); 
                this.state = 2068;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__7 || ((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                    this.state = 2065;
                    this.enumSymbolDef( localctx.art.items );
                    this.state = 2070;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2071;
                this.match(languageParser.T__3);
            }

            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssociationBaseContext(parser, parent, invokingState, art, handleTypeCompo) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationBase;
    this.art = null
    this.handleTypeCompo = null
    this.assoc = null; // Token
    this.compo = null; // Token
    this.art = art || null;
    this.handleTypeCompo = handleTypeCompo || null;
    return this;
}

TypeAssociationBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationBaseContext.prototype.constructor = TypeAssociationBaseContext;

TypeAssociationBaseContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

TypeAssociationBaseContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeAssociationBaseContext.prototype.ASSOCIATION = function() {
    return this.getToken(languageParser.ASSOCIATION, 0);
};

TypeAssociationBaseContext.prototype.COMPOSITION = function() {
    return this.getToken(languageParser.COMPOSITION, 0);
};

TypeAssociationBaseContext.prototype.cardinality = function() {
    return this.getTypedRuleContext(CardinalityContext,0);
};




languageParser.TypeAssociationBaseContext = TypeAssociationBaseContext;

languageParser.prototype.typeAssociationBase = function(art, handleTypeCompo) {

    var localctx = new TypeAssociationBaseContext(this, this._ctx, this.state, art, handleTypeCompo);
    this.enterRule(localctx, 130, languageParser.RULE_typeAssociationBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2088;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ASSOCIATION:
            this.state = 2076;
            localctx.assoc = this.match(languageParser.ASSOCIATION);
            this.state = 2078;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__12) {
                this.state = 2077;
                this.cardinality(localctx.art);
            }

            this.state = 2080;
            this.match(languageParser.TO);
            {
                    let location = this.tokenLocation(localctx.assoc);
                    localctx.art.type = { path: [{ id: 'cds.Association', location }], scope: 'global', location };
                    this.handleComposition( localctx.art.cardinality, false );
                  }
            break;
        case languageParser.COMPOSITION:
            this.state = 2082;
            localctx.compo = this.match(languageParser.COMPOSITION);
            this.state = 2084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__12) {
                this.state = 2083;
                this.cardinality(localctx.art);
            }

            this.state = 2086;
            this.match(languageParser.OF);
            {
                    let location = this.tokenLocation(localctx.compo);
                    localctx.art.type = { path: [{ id: 'cds.Composition', location }], scope: 'global', location };
                    this.handleComposition( localctx.art.cardinality, handleTypeCompo );
                  }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         localctx.art.target = {}; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssociationContContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationCont;
    this.art = null
    this.cond = null; // ConditionContext
    this.art = art || null;
    return this;
}

TypeAssociationContContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationContContext.prototype.constructor = TypeAssociationContContext;

TypeAssociationContContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

TypeAssociationContContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

TypeAssociationContContext.prototype.foreignKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForeignKeyContext);
    } else {
        return this.getTypedRuleContext(ForeignKeyContext,i);
    }
};




languageParser.TypeAssociationContContext = TypeAssociationContContext;

languageParser.prototype.typeAssociationCont = function(art) {

    var localctx = new TypeAssociationContContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 132, languageParser.RULE_typeAssociationCont);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2110;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 2092;
            this.match(languageParser.T__1);
             this.addDef( localctx.art, 'foreignKeys' ); 
            this.state = 2103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                this.state = 2094;
                this.foreignKey( localctx.art );
                this.state = 2100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2095;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore("}")) break; 
                    this.state = 2097;
                    this.foreignKey( localctx.art );
                    this.state = 2102;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2105;
            this.match(languageParser.T__3);
            break;
        case languageParser.ON:
            this.state = 2106;
            this.match(languageParser.ON);
            this.state = 2107;
            localctx.cond = this.condition();
             localctx.art.on=localctx.cond.cond; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssociationElementContContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationElementCont;
    this.art = null
    this.annos = null
    this.cond = null; // ConditionContext
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

TypeAssociationElementContContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationElementContContext.prototype.constructor = TypeAssociationElementContContext;

TypeAssociationElementContContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TypeAssociationElementContContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

TypeAssociationElementContContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeAssociationElementContContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

TypeAssociationElementContContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

TypeAssociationElementContContext.prototype.foreignKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForeignKeyContext);
    } else {
        return this.getTypedRuleContext(ForeignKeyContext,i);
    }
};




languageParser.TypeAssociationElementContContext = TypeAssociationElementContContext;

languageParser.prototype.typeAssociationElementCont = function(art, annos) {

    var localctx = new TypeAssociationElementContContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 134, languageParser.RULE_typeAssociationElementCont);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2134;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__1:
        	this.state = 2112;
        	this.match(languageParser.T__1);
        	 this.addDef( localctx.art, 'foreignKeys' ); 
        	this.state = 2123;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
        	    this.state = 2114;
        	    this.foreignKey( localctx.art );
        	    this.state = 2120;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	    while(_la===languageParser.T__2) {
        	        this.state = 2115;
        	        this.match(languageParser.T__2);
        	         if (this.isStraightBefore("}")) break; 
        	        this.state = 2117;
        	        this.foreignKey( localctx.art );
        	        this.state = 2122;
        	        this._errHandler.sync(this);
        	        _la = this._input.LA(1);
        	    }
        	}

        	this.state = 2125;
        	this.match(languageParser.T__3);
        	this.state = 2127;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.NOT || _la===languageParser.NULL) {
        	    this.state = 2126;
        	    this.nullability( localctx.art );
        	}

        	break;
        case languageParser.ON:
        	this.state = 2129;
        	this.match(languageParser.ON);
        	this.state = 2130;
        	localctx.cond = this.condition();
        	 localctx.art.on=localctx.cond.cond; 
        	break;
        case languageParser.NOT:
        case languageParser.NULL:
        	this.state = 2133;
        	this.nullability( localctx.art );
        	break;
        case languageParser.T__0:
        case languageParser.T__3:
        case languageParser.T__7:
        	break;
        default:
        	break;
        }
         this.docComment( localctx.annos ); 
        this.state = 2140;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__7) {
            this.state = 2137;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 2142;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2143;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeToOneContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeToOne;
    this.art = null
    this.one = null; // Token
    this.art = art || null;
    return this;
}

TypeToOneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeToOneContext.prototype.constructor = TypeToOneContext;

TypeToOneContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeToOneContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};




languageParser.TypeToOneContext = TypeToOneContext;

languageParser.prototype.typeToOne = function(art) {

    var localctx = new TypeToOneContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 136, languageParser.RULE_typeToOne);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2145;
        localctx.one = this.match(languageParser.ONE);
         this.setMaxCardinality( localctx.art, localctx.one, this.numberLiteral( localctx.one, null, '1' ) ); 
        this.state = 2147;
        this.simplePath( localctx.art.target, 'artref' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeToManyContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeToMany;
    this.art = null
    this.many = null; // Token
    this.art = art || null;
    return this;
}

TypeToManyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeToManyContext.prototype.constructor = TypeToManyContext;

TypeToManyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeToManyContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};




languageParser.TypeToManyContext = TypeToManyContext;

languageParser.prototype.typeToMany = function(art) {

    var localctx = new TypeToManyContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 138, languageParser.RULE_typeToMany);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2149;
        localctx.many = this.match(languageParser.MANY);
         this.setMaxCardinality( localctx.art, localctx.many, { literal: 'string', val: '*' } ); 
        this.state = 2151;
        this.simplePath( localctx.art.target, 'artref' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CardinalityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_cardinality;
    this.art = null
    this.card = {}
    this.lbrack = null; // Token
    this.srcMax = null; // Token
    this.srcMaxStar = null; // Token
    this.trgMin = null; // Token
    this.trgMax = null; // Token
    this.trgMaxStar = null; // Token
    this.art = art || null;
    return this;
}

CardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityContext.prototype.constructor = CardinalityContext;

CardinalityContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};





languageParser.CardinalityContext = CardinalityContext;

languageParser.prototype.cardinality = function(art) {

    var localctx = new CardinalityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 140, languageParser.RULE_cardinality);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2153;
        localctx.lbrack = this.match(languageParser.T__12);
         localctx.card.targetMax = { literal: 'string', val: '*',
                                  location: this.tokenLocation(localctx.lbrack) }; 
        this.state = 2174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__11 || _la===languageParser.Number) {
            this.state = 2161;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
            if(la_===1) {
                this.state = 2155;
                localctx.srcMax = this.match(languageParser.Number);
                this.state = 2156;
                this.match(languageParser.T__2);
                 localctx.card.sourceMax = this.numberLiteral( localctx.srcMax ); 

            } else if(la_===2) {
                this.state = 2158;
                localctx.srcMaxStar = this.match(languageParser.T__11);
                this.state = 2159;
                this.match(languageParser.T__2);
                 localctx.card.sourceMax = { literal: 'string', val: '*',
                                              location: this.tokenLocation(localctx.srcMaxStar) }; 

            }
            this.state = 2166;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
            if(la_===1) {
                this.state = 2163;
                localctx.trgMin = this.match(languageParser.Number);
                this.state = 2164;
                this.match(languageParser.T__13);
                 localctx.card.targetMin = this.numberLiteral( localctx.trgMin ); 

            }
            this.state = 2172;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.Number:
                this.state = 2168;
                localctx.trgMax = this.match(languageParser.Number);
                 localctx.card.targetMax = this.numberLiteral( localctx.trgMax ); 
                break;
            case languageParser.T__11:
                this.state = 2170;
                localctx.trgMaxStar = this.match(languageParser.T__11);
                 localctx.card.targetMax = { literal: 'string', val: '*',
                                              location: this.tokenLocation(localctx.trgMaxStar) }; 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 2176;
        this.match(languageParser.T__14);
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ localctx.art.cardinality = this.attachLocation(localctx.card); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForeignKeyContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_foreignKey;
    this.outer = null
    this.art = {}
    this.elem = {}
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ForeignKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeignKeyContext.prototype.constructor = ForeignKeyContext;

ForeignKeyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ForeignKeyContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ForeignKeyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ForeignKeyContext = ForeignKeyContext;

languageParser.prototype.foreignKey = function(outer) {

    var localctx = new ForeignKeyContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 142, languageParser.RULE_foreignKey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2178;
        this.simplePath( localctx.elem, 'ref' );
        this.state = 2181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 2179;
            this.match(languageParser.AS);
            this.state = 2180;
            localctx.name = this.ident('Key');
        }

         localctx.art =  this.addDef( localctx.outer, 'foreignKeys', 'key', (localctx.name) ? localctx.name.id : localctx.elem.path,
                                  undefined, { targetElement: localctx.elem } ) 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeTypeOfContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeTypeOf;
    this.art = null
    this._sync = 'nop'
    this.art = art || null;
    return this;
}

TypeTypeOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeTypeOfContext.prototype.constructor = TypeTypeOfContext;

TypeTypeOfContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TypeTypeOfContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeTypeOfContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};




languageParser.TypeTypeOfContext = TypeTypeOfContext;

languageParser.prototype.typeTypeOf = function(art) {

    var localctx = new TypeTypeOfContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 144, languageParser.RULE_typeTypeOf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2185;
        this.match(languageParser.TYPE);
        this.state = 2186;
        this.match(languageParser.OF);
         localctx.art.type = { scope: 'typeOf' }; 
        this.state = 2188;
        this.simplePath( localctx.art.type, 'ref' );
        this.state = 2192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 2189;
            this.match(languageParser.T__4);
             localctx.art.type.scope = localctx.art.type.path.length; 
            this.state = 2191;
            this.simplePath( localctx.art.type, 'ref');
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.type); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeRefOptArgsContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeRefOptArgs;
    this.art = null
    this.head = null; // Token
    this.tail = null; // Token
    this.art = art || null;
    return this;
}

TypeRefOptArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRefOptArgsContext.prototype.constructor = TypeRefOptArgsContext;

TypeRefOptArgsContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

TypeRefOptArgsContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};





languageParser.TypeRefOptArgsContext = TypeRefOptArgsContext;

languageParser.prototype.typeRefOptArgs = function(art) {

    var localctx = new TypeRefOptArgsContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 146, languageParser.RULE_typeRefOptArgs);
     localctx.art.type = {}; 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2194;
        this.simplePath( localctx.art.type, 'artref' );
        this.state = 2211;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 2195;
        	this.match(languageParser.T__5);
        	this.state = 2196;
        	localctx.head = this.match(languageParser.Number);
        	 localctx.art['$'+'typeArgs'] = [ this.numberLiteral( localctx.head ) ]; 
        	this.state = 2204;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__2) {
        	    this.state = 2198;
        	    this.match(languageParser.T__2);
        	     if (this.isStraightBefore(')')) break; 
        	    this.state = 2200;
        	    localctx.tail = this.match(languageParser.Number);
        	     localctx.art['$'+'typeArgs'].push( this.numberLiteral( localctx.tail ) ); 
        	    this.state = 2206;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	this.state = 2207;
        	this.match(languageParser.T__6);
        	break;
        case languageParser.T__4:
        	this.state = 2208;
        	this.match(languageParser.T__4);
        	 localctx.art.type.scope = localctx.art.type.path.length; 
        	this.state = 2210;
        	this.simplePath( localctx.art.type, 'ref');
        	break;
        case languageParser.T__0:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__8:
        case languageParser.AS:
        case languageParser.FROM:
        case languageParser.NOT:
        case languageParser.NULL:
        case languageParser.DEFAULT:
        case languageParser.ENUM:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryExpression;
    this.query = null
    this.qt1 = null; // QueryTermContext
    this.op = null; // Token
    this.q = null; // Token
    this.qt = null; // QueryTermContext
    this.ob = null; // OrderByClauseContext
    this.lc = null; // LimitClauseContext
    return this;
}

QueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

QueryExpressionContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

QueryExpressionContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

QueryExpressionContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QueryExpressionContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.UNION);
    } else {
        return this.getToken(languageParser.UNION, i);
    }
};


QueryExpressionContext.prototype.EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.EXCEPT);
    } else {
        return this.getToken(languageParser.EXCEPT, i);
    }
};


QueryExpressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MINUS);
    } else {
        return this.getToken(languageParser.MINUS, i);
    }
};


QueryExpressionContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.DISTINCT);
    } else {
        return this.getToken(languageParser.DISTINCT, i);
    }
};


QueryExpressionContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ALL);
    } else {
        return this.getToken(languageParser.ALL, i);
    }
};





languageParser.QueryExpressionContext = QueryExpressionContext;

languageParser.prototype.queryExpression = function() {

    var localctx = new QueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, languageParser.RULE_queryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2213;
        localctx.qt1 = this.queryTerm();
         localctx.query =  localctx.qt1.query 
        this.state = 2234;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.EXCEPT || _la===languageParser.MINUS || _la===languageParser.UNION) {
            this.state = 2227;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.UNION:
                this.state = 2215;
                localctx.op = this.match(languageParser.UNION);
                this.state = 2217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2216;
                    localctx.q = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.q = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;
            case languageParser.EXCEPT:
                this.state = 2219;
                localctx.op = this.match(languageParser.EXCEPT);
                this.state = 2221;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.DISTINCT) {
                    this.state = 2220;
                    localctx.q = this.match(languageParser.DISTINCT);
                }

                break;
            case languageParser.MINUS:
                this.state = 2223;
                localctx.op = this.match(languageParser.MINUS);
                this.state = 2225;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.DISTINCT) {
                    this.state = 2224;
                    localctx.q = this.match(languageParser.DISTINCT);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2229;
            localctx.qt = this.queryTerm();
             localctx.query =  this.leftAssocBinaryOp( localctx.query, localctx.op, localctx.q, localctx.qt.query ); localctx.q = null; 
            this.state = 2236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ORDER) {
            this.state = 2237;
            localctx.ob = this.orderByClause( localctx.query );
             localctx.query =  localctx.ob.query 
        }

        this.state = 2245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.LIMIT) {
            this.state = 2242;
            localctx.lc = this.limitClause( localctx.query );
             localctx.query =  localctx.lc.query 
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByClauseContext(parser, parent, invokingState, inQuery) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_orderByClause;
    this.inQuery = null
    this.query = null
    this.ob1 = null; // OrderBySpecContext
    this.obn = null; // OrderBySpecContext
    this.inQuery = inQuery || null;
    return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(languageParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

OrderByClauseContext.prototype.orderBySpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderBySpecContext);
    } else {
        return this.getTypedRuleContext(OrderBySpecContext,i);
    }
};




languageParser.OrderByClauseContext = OrderByClauseContext;

languageParser.prototype.orderByClause = function(inQuery) {

    var localctx = new OrderByClauseContext(this, this._ctx, this.state, inQuery);
    this.enterRule(localctx, 150, languageParser.RULE_orderByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2247;
        this.match(languageParser.ORDER);
        this.state = 2248;
        this.match(languageParser.BY);
         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
        this.state = 2250;
        localctx.ob1 = this.orderBySpec();
         localctx.query.orderBy = [ localctx.ob1.ob ]; 
        this.state = 2258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 2252;
            this.match(languageParser.T__2);
            this.state = 2253;
            localctx.obn = this.orderBySpec();
             localctx.query.orderBy.push( localctx.obn.ob ); 
            this.state = 2260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState, inQuery) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_limitClause;
    this.inQuery = null
    this.query = null
    this.limkw = null; // Token
    this.lim = null; // Token
    this.limnull = null; // Token
    this.off = null; // Token
    this.inQuery = inQuery || null;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(languageParser.LIMIT, 0);
};

LimitClauseContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


LimitClauseContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

LimitClauseContext.prototype.OFFSET = function() {
    return this.getToken(languageParser.OFFSET, 0);
};




languageParser.LimitClauseContext = LimitClauseContext;

languageParser.prototype.limitClause = function(inQuery) {

    var localctx = new LimitClauseContext(this, this._ctx, this.state, inQuery);
    this.enterRule(localctx, 152, languageParser.RULE_limitClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2261;
        localctx.limkw = this.match(languageParser.LIMIT);
         localctx.query =  this.unaryOpForParens( localctx.inQuery, '$'+'query' ) 
        this.state = 2267;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.Number:
            this.state = 2263;
            localctx.lim = this.match(languageParser.Number);
             localctx.query.limit = { rows: this.numberLiteral( localctx.lim, '' ) }; 
            break;
        case languageParser.NULL:
            this.state = 2265;
            localctx.limnull = this.match(languageParser.NULL);
             localctx.query.limit = { rows: {
                    literal: 'null', val: null, location: this.tokenLocation(localctx.limnull) } }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.OFFSET) {
            this.state = 2269;
            this.match(languageParser.OFFSET);
            this.state = 2270;
            localctx.off = this.match(languageParser.Number);
             localctx.query.limit.offset = this.numberLiteral( localctx.off ); 
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderBySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_orderBySpec;
    this.ob = null
    this.e = null; // ExpressionContext
    this.asc = null; // Token
    this.desc = null; // Token
    this.nb = null; // Token
    this.ne = null; // Token
    return this;
}

OrderBySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderBySpecContext.prototype.constructor = OrderBySpecContext;

OrderBySpecContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderBySpecContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

OrderBySpecContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};

OrderBySpecContext.prototype.NULLS = function() {
    return this.getToken(languageParser.NULLS, 0);
};

OrderBySpecContext.prototype.FIRST = function() {
    return this.getToken(languageParser.FIRST, 0);
};

OrderBySpecContext.prototype.LAST = function() {
    return this.getToken(languageParser.LAST, 0);
};




languageParser.OrderBySpecContext = OrderBySpecContext;

languageParser.prototype.orderBySpec = function() {

    var localctx = new OrderBySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, languageParser.RULE_orderBySpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2274;
        localctx.e = this.expression();
         localctx.ob =  localctx.e.expr 
        this.state = 2280;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.ASC:
        	this.state = 2276;
        	localctx.asc = this.match(languageParser.ASC);
        	 localctx.ob.sort = this.tokenLocation( localctx.asc, undefined, 'asc' ); 
        	break;
        case languageParser.DESC:
        	this.state = 2278;
        	localctx.desc = this.match(languageParser.DESC);
        	 localctx.ob.sort = this.tokenLocation( localctx.desc, undefined, 'desc' ); 
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXTEND:
        case languageParser.FUNCTION:
        case languageParser.LIMIT:
        case languageParser.NULLS:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.HideAlternatives:
        	break;
        default:
        	break;
        }
        this.state = 2285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.NULLS) {
            this.state = 2282;
            localctx.nb = this.match(languageParser.NULLS);
            this.state = 2283;
            localctx.ne = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.FIRST || _la===languageParser.LAST)) {
                localctx.ne = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
             localctx.ob.nulls = this.tokenLocation( localctx.nb, localctx.ne, (localctx.ne===null ? null : localctx.ne.text).toLowerCase() ); 
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryTerm;
    this.query = null
    this.qt1 = null; // QueryPrimaryContext
    this.intersect = null; // Token
    this.quantifier = null; // Token
    this.qt = null; // QueryPrimaryContext
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;

QueryTermContext.prototype.queryPrimary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryPrimaryContext);
    } else {
        return this.getTypedRuleContext(QueryPrimaryContext,i);
    }
};

QueryTermContext.prototype.INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.INTERSECT);
    } else {
        return this.getToken(languageParser.INTERSECT, i);
    }
};


QueryTermContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.DISTINCT);
    } else {
        return this.getToken(languageParser.DISTINCT, i);
    }
};





languageParser.QueryTermContext = QueryTermContext;

languageParser.prototype.queryTerm = function() {

    var localctx = new QueryTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, languageParser.RULE_queryTerm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2287;
        localctx.qt1 = this.queryPrimary();
         localctx.query =  localctx.qt1.query 
        this.state = 2298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.INTERSECT) {
            this.state = 2289;
            localctx.intersect = this.match(languageParser.INTERSECT);
            this.state = 2291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DISTINCT) {
                this.state = 2290;
                localctx.quantifier = this.match(languageParser.DISTINCT);
            }

            this.state = 2293;
            localctx.qt = this.queryPrimary();
             localctx.query =  this.leftAssocBinaryOp( localctx.query, localctx.intersect, localctx.quantifier, localctx.qt.query )
                    localctx.quantifier = null; 
            this.state = 2300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryPrimary;
    this.query = {}
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.select = null; // Token
    this.mixin = null; // Token
    this.ad = null; // Token
    this.star = null; // Token
    this.cond = null; // ConditionContext
    this.e1 = null; // ExpressionContext
    this.en = null; // ExpressionContext
    this.having = null; // ConditionContext
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;

QueryPrimaryContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryPrimaryContext.prototype.SELECT = function() {
    return this.getToken(languageParser.SELECT, 0);
};

QueryPrimaryContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

QueryPrimaryContext.prototype.querySource = function() {
    return this.getTypedRuleContext(QuerySourceContext,0);
};

QueryPrimaryContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};

QueryPrimaryContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

QueryPrimaryContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

QueryPrimaryContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

QueryPrimaryContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};

QueryPrimaryContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

QueryPrimaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

QueryPrimaryContext.prototype.INTO = function() {
    return this.getToken(languageParser.INTO, 0);
};

QueryPrimaryContext.prototype.bracedSelectItemListDef = function() {
    return this.getTypedRuleContext(BracedSelectItemListDefContext,0);
};

QueryPrimaryContext.prototype.excludingClause = function() {
    return this.getTypedRuleContext(ExcludingClauseContext,0);
};

QueryPrimaryContext.prototype.MIXIN = function() {
    return this.getToken(languageParser.MIXIN, 0);
};

QueryPrimaryContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};

QueryPrimaryContext.prototype.DISTINCT = function() {
    return this.getToken(languageParser.DISTINCT, 0);
};

QueryPrimaryContext.prototype.mixinElementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MixinElementDefContext);
    } else {
        return this.getTypedRuleContext(MixinElementDefContext,i);
    }
};




languageParser.QueryPrimaryContext = QueryPrimaryContext;

languageParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, languageParser.RULE_queryPrimary);
    var _la = 0; // Token type
    try {
        this.state = 2381;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.enterOuterAlt(localctx, 1);
            this.state = 2301;
            localctx.open = this.match(languageParser.T__5);
            this.state = 2302;
            localctx.qe = this.queryExpression();
            this.state = 2303;
            localctx.close = this.match(languageParser.T__6);
             localctx.query =  this.surroundByParens( localctx.qe.query, localctx.open, localctx.close ) 
            break;
        case languageParser.SELECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2306;
            localctx.select = this.match(languageParser.SELECT);
             localctx.query =  { op: this.tokenLocation( localctx.select, undefined, 'SELECT' ), location: this.startLocation() } 
            this.state = 2352;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.FROM:
                this.state = 2308;
                this.match(languageParser.FROM);
                this.state = 2309;
                this.querySource( localctx.query );
                this.state = 2320;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.MIXIN) {
                    this.state = 2310;
                    localctx.mixin = this.match(languageParser.MIXIN);
                    this.state = 2311;
                    this.match(languageParser.T__1);
                    this.state = 2315;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0)) {
                        this.state = 2312;
                        this.mixinElementDef( localctx.query );
                        this.state = 2317;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2318;
                    this.match(languageParser.T__3);
                    this.state = 2319;
                    this.match(languageParser.INTO);
                }

                this.state = 2324;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2322;
                    localctx.ad = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.ad = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                     localctx.query.quantifier = this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ); 
                }

                this.state = 2327;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1) {
                    this.state = 2326;
                    this.bracedSelectItemListDef( localctx.query );
                }

                this.state = 2330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.EXCLUDING) {
                    this.state = 2329;
                    this.excludingClause( localctx.query );
                }

                break;
            case languageParser.T__1:
            case languageParser.T__4:
            case languageParser.T__5:
            case languageParser.T__7:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__11:
            case languageParser.T__16:
            case languageParser.T__27:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.ALL:
            case languageParser.CASE:
            case languageParser.CAST:
            case languageParser.DISTINCT:
            case languageParser.EXTRACT:
            case languageParser.KEY:
            case languageParser.NEW:
            case languageParser.NULL:
            case languageParser.TRIM:
            case languageParser.Number:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.VIRTUAL:
            case languageParser.HideAlternatives:
                this.state = 2334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2332;
                    localctx.ad = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.ad = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                     localctx.query.quantifier = this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ); 
                }

                 localctx.query.columns = []; 
                this.state = 2340;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__11:
                    this.state = 2337;
                    localctx.star = this.match(languageParser.T__11);

                              localctx.query.columns = [ this.tokenLocation( localctx.star, undefined, '*' ) ];
                            
                    break;
                case languageParser.T__1:
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__7:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.EXTRACT:
                case languageParser.KEY:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.TRIM:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                case languageParser.VIRTUAL:
                case languageParser.HideAlternatives:
                    this.state = 2339;
                    this.selectItemDef( localctx.query.columns );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2347;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2342;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore("}")) break; 
                    this.state = 2344;
                    this.selectItemDef( localctx.query.columns );
                    this.state = 2349;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2350;
                this.match(languageParser.FROM);
                this.state = 2351;
                this.querySource( localctx.query );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.WHERE) {
                this.state = 2354;
                this.match(languageParser.WHERE);
                this.state = 2355;
                localctx.cond = this.condition();
                 localctx.query.where = localctx.cond.cond; 
            }

            this.state = 2373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.GROUP) {
                this.state = 2360;
                this.match(languageParser.GROUP);
                this.state = 2361;
                this.match(languageParser.BY);
                this.state = 2362;
                localctx.e1 = this.expression();
                 localctx.query.groupBy = [ localctx.e1.expr ]; 
                this.state = 2370;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2364;
                    this.match(languageParser.T__2);
                    this.state = 2365;
                    localctx.en = this.expression();
                     localctx.query.groupBy.push( localctx.en.expr ); 
                    this.state = 2372;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HAVING) {
                this.state = 2375;
                this.match(languageParser.HAVING);
                this.state = 2376;
                localctx.having = this.condition();
                 localctx.query.having = localctx.having.cond; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySourceContext(parser, parent, invokingState, query) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_querySource;
    this.query = null
    this.t1 = null; // TableExpressionContext
    this.tn = null; // TableExpressionContext
    this.query = query || null;
    return this;
}

QuerySourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySourceContext.prototype.constructor = QuerySourceContext;

QuerySourceContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};




languageParser.QuerySourceContext = QuerySourceContext;

languageParser.prototype.querySource = function(query) {

    var localctx = new QuerySourceContext(this, this._ctx, this.state, query);
    this.enterRule(localctx, 160, languageParser.RULE_querySource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2383;
        localctx.t1 = this.tableExpression();
         localctx.query.from = localctx.t1.table; 
        this.state = 2394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__2) {
             const location = this.tokenLocation( this.getCurrentToken() );
                    localctx.query.from = { op: { val: 'join', location },
                                    join: { val: 'cross', location },
                                    args: [localctx.t1.table] }; 
            this.state = 2390; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2386;
                this.match(languageParser.T__2);
                this.state = 2387;
                localctx.tn = this.tableExpression();
                 if (localctx.tn.table) localctx.query.from.args.push( localctx.tn.table ); 
                this.state = 2392; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===languageParser.T__2);
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query.from); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableExpression;
    this.table = null
    this.qt = null; // TableTermContext
    this.join = null; // JoinOpContext
    this.te = null; // TableExpressionContext
    this.cond = null; // ConditionContext
    this.crj = null; // Token
    this.jn = null; // Token
    this.tt = null; // TableTermContext
    return this;
}

TableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExpressionContext.prototype.constructor = TableExpressionContext;

TableExpressionContext.prototype.tableTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableTermContext);
    } else {
        return this.getTypedRuleContext(TableTermContext,i);
    }
};

TableExpressionContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ON);
    } else {
        return this.getToken(languageParser.ON, i);
    }
};


TableExpressionContext.prototype.joinOp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinOpContext);
    } else {
        return this.getTypedRuleContext(JoinOpContext,i);
    }
};

TableExpressionContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};

TableExpressionContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

TableExpressionContext.prototype.CROSS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.CROSS);
    } else {
        return this.getToken(languageParser.CROSS, i);
    }
};


TableExpressionContext.prototype.JOIN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.JOIN);
    } else {
        return this.getToken(languageParser.JOIN, i);
    }
};





languageParser.TableExpressionContext = TableExpressionContext;

languageParser.prototype.tableExpression = function() {

    var localctx = new TableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, languageParser.RULE_tableExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2396;
        localctx.qt = this.tableTerm();
         localctx.table =  localctx.qt.table 
        this.state = 2413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (languageParser.CROSS - 76)) | (1 << (languageParser.FULL - 76)) | (1 << (languageParser.INNER - 76)) | (1 << (languageParser.JOIN - 76)) | (1 << (languageParser.LEFT - 76)))) !== 0) || _la===languageParser.RIGHT) {
            this.state = 2411;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.FULL:
            case languageParser.INNER:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.RIGHT:
                this.state = 2398;
                localctx.join = this.joinOp( localctx.table );
                 localctx.table =  localctx.join.table 
                this.state = 2400;
                localctx.te = this.tableExpression();
                 if (!localctx.table) { localctx.table =  {} } else if (localctx.te.table) localctx.table.args.push( localctx.te.table ); 
                this.state = 2402;
                this.match(languageParser.ON);
                this.state = 2403;
                localctx.cond = this.condition();
                 localctx.table.on = localctx.cond.cond; 
                break;
            case languageParser.CROSS:
                this.state = 2406;
                localctx.crj = this.match(languageParser.CROSS);
                this.state = 2407;
                localctx.jn = this.match(languageParser.JOIN);
                this.state = 2408;
                localctx.tt = this.tableTerm();
                 localctx.table =  this.leftAssocBinaryOp( localctx.table, localctx.jn, localctx.crj, localctx.tt.table, 'join' ) 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.table); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinOpContext(parser, parent, invokingState, left) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_joinOp;
    this.left = null
    this.table = null
    this.join = null
    this.op = null; // Token
    this.t1 = null; // Token
    this.c = null; // JoinCardinalityContext
    this.t2 = null; // Token
    this.left = left || null;
    return this;
}

JoinOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinOpContext.prototype.constructor = JoinOpContext;

JoinOpContext.prototype.JOIN = function() {
    return this.getToken(languageParser.JOIN, 0);
};

JoinOpContext.prototype.INNER = function() {
    return this.getToken(languageParser.INNER, 0);
};

JoinOpContext.prototype.LEFT = function() {
    return this.getToken(languageParser.LEFT, 0);
};

JoinOpContext.prototype.RIGHT = function() {
    return this.getToken(languageParser.RIGHT, 0);
};

JoinOpContext.prototype.FULL = function() {
    return this.getToken(languageParser.FULL, 0);
};

JoinOpContext.prototype.joinCardinality = function() {
    return this.getTypedRuleContext(JoinCardinalityContext,0);
};

JoinOpContext.prototype.OUTER = function() {
    return this.getToken(languageParser.OUTER, 0);
};




languageParser.JoinOpContext = JoinOpContext;

languageParser.prototype.joinOp = function(left) {

    var localctx = new JoinOpContext(this, this._ctx, this.state, left);
    this.enterRule(localctx, 164, languageParser.RULE_joinOp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.JOIN:
            this.state = 2416;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join =  'inner' 
            break;
        case languageParser.INNER:
            this.state = 2418;
            localctx.t1 = this.match(languageParser.INNER);
            this.state = 2420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                this.state = 2419;
                localctx.c = this.joinCardinality();
            }

            this.state = 2422;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'inner' 
            break;
        case languageParser.LEFT:
            this.state = 2424;
            localctx.t1 = this.match(languageParser.LEFT);
            this.state = 2426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OUTER) {
                this.state = 2425;
                localctx.t2 = this.match(languageParser.OUTER);
            }

            this.state = 2429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                this.state = 2428;
                localctx.c = this.joinCardinality();
            }

            this.state = 2431;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'left' 
            break;
        case languageParser.RIGHT:
            this.state = 2433;
            localctx.t1 = this.match(languageParser.RIGHT);
            this.state = 2435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OUTER) {
                this.state = 2434;
                localctx.t2 = this.match(languageParser.OUTER);
            }

            this.state = 2438;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                this.state = 2437;
                localctx.c = this.joinCardinality();
            }

            this.state = 2440;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'right' 
            break;
        case languageParser.FULL:
            this.state = 2442;
            localctx.t1 = this.match(languageParser.FULL);
            this.state = 2444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OUTER) {
                this.state = 2443;
                localctx.t2 = this.match(languageParser.OUTER);
            }

            this.state = 2447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                this.state = 2446;
                localctx.c = this.joinCardinality();
            }

            this.state = 2449;
            localctx.op = this.match(languageParser.JOIN);
             localctx.join = 'full' 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         localctx.table =  { op: this.tokenLocation( localctx.op, undefined, 'join' ),
                         join: this.tokenLocation( localctx.t1 || localctx.op, localctx.t2, localctx.join ),
                         args: (localctx.left ? [localctx.left] : []),
                         location: localctx.left && localctx.left.location }
              if (localctx.c) localctx.table.cardinality = localctx.c.joinCard; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCardinalityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_joinCardinality;
    this.joinCard = null
    this.srcExact = null; // Token
    this.srcMaxOne = null; // Token
    this.srcMaxMany = null; // Token
    this.tgtExact = null; // Token
    this.tgtMaxOne = null; // Token
    this.tgtMaxMany = null; // Token
    return this;
}

JoinCardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCardinalityContext.prototype.constructor = JoinCardinalityContext;

JoinCardinalityContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

JoinCardinalityContext.prototype.ONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ONE);
    } else {
        return this.getToken(languageParser.ONE, i);
    }
};


JoinCardinalityContext.prototype.MANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MANY);
    } else {
        return this.getToken(languageParser.MANY, i);
    }
};


JoinCardinalityContext.prototype.EXACT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.EXACT);
    } else {
        return this.getToken(languageParser.EXACT, i);
    }
};





languageParser.JoinCardinalityContext = JoinCardinalityContext;

languageParser.prototype.joinCardinality = function() {

    var localctx = new JoinCardinalityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, languageParser.RULE_joinCardinality);
     localctx.joinCard =  {} 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2462;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.EXACT:
        case languageParser.ONE:
            this.state = 2456;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.EXACT) {
                this.state = 2455;
                localctx.srcExact = this.match(languageParser.EXACT);
            }

            this.state = 2458;
            localctx.srcMaxOne = this.match(languageParser.ONE);
             if(localctx.srcExact)
                      localctx.joinCard.sourceMin = { literal: 'number', val: 1,
                                              location: this.tokenLocation(localctx.srcExact) };
                    localctx.joinCard.sourceMax = { literal: 'number', val: 1,
                                              location: this.tokenLocation(localctx.srcMaxOne) }; 
            break;
        case languageParser.MANY:
            this.state = 2460;
            localctx.srcMaxMany = this.match(languageParser.MANY);
             localctx.joinCard.sourceMax = { literal: 'string', val: '*',
                                               location: this.tokenLocation(localctx.srcMaxMany) }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2464;
        this.match(languageParser.TO);
        this.state = 2472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.EXACT:
        case languageParser.ONE:
            this.state = 2466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.EXACT) {
                this.state = 2465;
                localctx.tgtExact = this.match(languageParser.EXACT);
            }

            this.state = 2468;
            localctx.tgtMaxOne = this.match(languageParser.ONE);
             if(localctx.tgtExact)
                      localctx.joinCard.targetMin = { literal: 'number', val: 1,
                                              location: this.tokenLocation(localctx.tgtExact) };
                    localctx.joinCard.targetMax = { literal: 'number', val: 1,
                                          location: this.tokenLocation(localctx.tgtMaxOne) }; 
            break;
        case languageParser.MANY:
            this.state = 2470;
            localctx.tgtMaxMany = this.match(languageParser.MANY);
             localctx.joinCard.targetMax = { literal: 'string', val: '*',
                                            location: this.tokenLocation(localctx.tgtMaxMany) }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.joinCard); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableTerm;
    this.table = null
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentNoKeywordContext
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.a1 = null; // IdentContext
    this.a2 = null; // IdentNoKeywordContext
    this.te = null; // TableExpressionContext
    return this;
}

TableTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableTermContext.prototype.constructor = TableTermContext;

TableTermContext.prototype.fromPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromPathContext);
    } else {
        return this.getTypedRuleContext(FromPathContext,i);
    }
};

TableTermContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

TableTermContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

TableTermContext.prototype.identNoKeyword = function() {
    return this.getTypedRuleContext(IdentNoKeywordContext,0);
};

TableTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

TableTermContext.prototype.tableExpression = function() {
    return this.getTypedRuleContext(TableExpressionContext,0);
};




languageParser.TableTermContext = TableTermContext;

languageParser.prototype.tableTerm = function() {

    var localctx = new TableTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, languageParser.RULE_tableTerm);
    var _la = 0; // Token type
    try {
        this.state = 2509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 1);
             localctx.table =  { path: [], scope: 0 } 
            this.state = 2475;
            this.fromPath( localctx.table, 'artref');
            this.state = 2479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__4) {
                this.state = 2476;
                this.match(languageParser.T__4);
                 localctx.table.scope = localctx.table.path.length; 
                this.state = 2478;
                this.fromPath( localctx.table, 'ref');
            }

            this.state = 2488;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.AS:
            	this.state = 2481;
            	this.match(languageParser.AS);
            	this.state = 2482;
            	localctx.n1 = this.ident('FromAlias');
            	 localctx.table.name = localctx.n1.id 
            	break;
            case languageParser.Identifier:
            	this.state = 2485;
            	localctx.n2 = this.identNoKeyword('FromAlias');
            	 localctx.table.name = this.fragileAlias( localctx.n2.id ); 
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.ALL:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ACTIONS:
            case languageParser.CROSS:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.FULL:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.UNION:
            	break;
            default:
            	break;
            }
            break;
        case languageParser.T__5:
            this.enterOuterAlt(localctx, 2);
            this.state = 2490;
            localctx.open = this.match(languageParser.T__5);
            this.state = 2507;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2491;
                localctx.qe = this.queryExpression();
                this.state = 2492;
                localctx.close = this.match(languageParser.T__6);
                 localctx.table =  this.surroundByParens( localctx.qe.query, localctx.open, localctx.close, true ) 
                this.state = 2501;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.AS:
                    this.state = 2494;
                    this.match(languageParser.AS);
                    this.state = 2495;
                    localctx.a1 = this.ident('FromAlias');
                     localctx.table.name = localctx.a1.id 
                    break;
                case languageParser.Identifier:
                    this.state = 2498;
                    localctx.a2 = this.identNoKeyword('FromAlias');
                     localctx.table.name = this.fragileAlias( localctx.a2.id, true ); 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            case 2:
                this.state = 2503;
                localctx.te = this.tableExpression();
                this.state = 2504;
                localctx.close = this.match(languageParser.T__6);
                 localctx.table =  this.surroundByParens( localctx.te.table, localctx.open, localctx.close ) 
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.table); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromPathContext(parser, parent, invokingState, qp, idkind) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fromPath;
    this.qp = null
    this.idkind = null
    this.id = null; // IdentContext
    this.qp = qp || null;
    this.idkind = idkind || null;
    return this;
}

FromPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromPathContext.prototype.constructor = FromPathContext;

FromPathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

FromPathContext.prototype.fromArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromArgumentsContext);
    } else {
        return this.getTypedRuleContext(FromArgumentsContext,i);
    }
};

FromPathContext.prototype.cardinalityAndFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CardinalityAndFilterContext);
    } else {
        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
    }
};




languageParser.FromPathContext = FromPathContext;

languageParser.prototype.fromPath = function(qp, idkind) {

    var localctx = new FromPathContext(this, this._ctx, this.state, qp, idkind);
    this.enterRule(localctx, 170, languageParser.RULE_fromPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2511;
        localctx.id = this.ident(localctx.idkind);
         this.pushIdent( localctx.qp.path, localctx.id.id ); 
        this.state = 2518;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 2513;
        	this.fromArguments( localctx.id.id );
        	this.state = 2515;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.T__12) {
        	    this.state = 2514;
        	    this.cardinalityAndFilter( localctx.id.id );
        	}

        	break;
        case languageParser.T__12:
        	this.state = 2517;
        	this.cardinalityAndFilter( localctx.id.id );
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__4:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__15:
        case languageParser.ALL:
        case languageParser.AS:
        case languageParser.DISTINCT:
        case languageParser.ON:
        case languageParser.WHERE:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.JOIN:
        case languageParser.LEFT:
        case languageParser.LIMIT:
        case languageParser.MINUS:
        case languageParser.MIXIN:
        case languageParser.ORDER:
        case languageParser.RIGHT:
        case languageParser.SERVICE:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
        	break;
        default:
        	break;
        }
        this.state = 2532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 2520;
            this.match(languageParser.T__15);
            this.state = 2521;
            localctx.id = this.ident(localctx.idkind);
             this.pushIdent( localctx.qp.path, localctx.id.id ); 
            this.state = 2528;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__5:
            	this.state = 2523;
            	this.fromArguments( localctx.id.id );
            	this.state = 2525;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.T__12) {
            	    this.state = 2524;
            	    this.cardinalityAndFilter( localctx.id.id );
            	}

            	break;
            case languageParser.T__12:
            	this.state = 2527;
            	this.cardinalityAndFilter( localctx.id.id );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__15:
            case languageParser.ALL:
            case languageParser.AS:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ASPECT:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DEFINE:
            case languageParser.ENTITY:
            case languageParser.EVENT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.SERVICE:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.Identifier:
            case languageParser.HideAlternatives:
            	break;
            default:
            	break;
            }
            this.state = 2534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.qp); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_condition;
    this.cond = null
    this.args = []
    this.orl = []
    this.c1 = null; // ConditionAndContext
    this.or = null; // Token
    this.c2 = null; // ConditionAndContext
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.conditionAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionAndContext);
    } else {
        return this.getTypedRuleContext(ConditionAndContext,i);
    }
};

ConditionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.OR);
    } else {
        return this.getToken(languageParser.OR, i);
    }
};





languageParser.ConditionContext = ConditionContext;

languageParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, languageParser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2535;
        localctx.c1 = this.conditionAnd();
         localctx.args.push(localctx.c1.cond); 
        this.state = 2543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.OR) {
            this.state = 2537;
            localctx.or = this.match(languageParser.OR);
            this.state = 2538;
            localctx.c2 = this.conditionAnd();
             localctx.args.push(localctx.c2.cond); localctx.orl.push(this.tokenLocation( localctx.or, undefined, 'or' ))
            this.state = 2545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);

          localctx.cond =  (localctx.args.length == 1)
            ? localctx.args[0]
            : this.attachLocation({ op: localctx.orl[0], args: localctx.args })

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionAnd;
    this.cond = null
    this.args = []
    this.andl = []
    this.c1 = null; // ConditionTermContext
    this.and = null; // Token
    this.c2 = null; // ConditionTermContext
    return this;
}

ConditionAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionAndContext.prototype.constructor = ConditionAndContext;

ConditionAndContext.prototype.conditionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionTermContext);
    } else {
        return this.getTypedRuleContext(ConditionTermContext,i);
    }
};

ConditionAndContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.AND);
    } else {
        return this.getToken(languageParser.AND, i);
    }
};





languageParser.ConditionAndContext = ConditionAndContext;

languageParser.prototype.conditionAnd = function() {

    var localctx = new ConditionAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, languageParser.RULE_conditionAnd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2546;
        localctx.c1 = this.conditionTerm();
         localctx.args.push(localctx.c1.cond); 
        this.state = 2554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.AND) {
            this.state = 2548;
            localctx.and = this.match(languageParser.AND);
            this.state = 2549;
            localctx.c2 = this.conditionTerm();
             localctx.args.push(localctx.c2.cond); localctx.andl.push(this.tokenLocation( localctx.and, undefined, 'and' )) 
            this.state = 2556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);

          localctx.cond =  (localctx.args.length == 1)
            ? localctx.args[0]
            : this.attachLocation({ op: localctx.andl[0], args: localctx.args })

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionTerm;
    this.cond = null
    this.nt = null; // Token
    this.ct = null; // ConditionTermContext
    this.ex = null; // Token
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.qm = null; // Token
    this.ep = null; // ValuePathContext
    this.expr = null; // ExpressionContext
    this.rel = null; // Token
    this.asa = null; // Token
    this.e2 = null; // ExpressionContext
    this.inn = null; // Token
    this.innu = null; // Token
    return this;
}

ConditionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionTermContext.prototype.constructor = ConditionTermContext;

ConditionTermContext.prototype.NOT = function() {
    return this.getToken(languageParser.NOT, 0);
};

ConditionTermContext.prototype.conditionTerm = function() {
    return this.getTypedRuleContext(ConditionTermContext,0);
};

ConditionTermContext.prototype.EXISTS = function() {
    return this.getToken(languageParser.EXISTS, 0);
};

ConditionTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ConditionTermContext.prototype.valuePath = function() {
    return this.getTypedRuleContext(ValuePathContext,0);
};

ConditionTermContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ConditionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConditionTermContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

ConditionTermContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

ConditionTermContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

ConditionTermContext.prototype.ANY = function() {
    return this.getToken(languageParser.ANY, 0);
};

ConditionTermContext.prototype.SOME = function() {
    return this.getToken(languageParser.SOME, 0);
};

ConditionTermContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};




languageParser.ConditionTermContext = ConditionTermContext;

languageParser.prototype.conditionTerm = function() {

    var localctx = new ConditionTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, languageParser.RULE_conditionTerm);
    var _la = 0; // Token type
    try {
        this.state = 2598;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2557;
            localctx.nt = this.match(languageParser.NOT);
            this.state = 2558;
            localctx.ct = this.conditionTerm();
             localctx.cond =  { op: this.tokenLocation( localctx.nt, undefined, 'not' ), args: [ localctx.ct.cond ] } 
            break;
        case languageParser.EXISTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2561;
            localctx.ex = this.match(languageParser.EXISTS);
            this.state = 2572;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__5:
                this.state = 2562;
                localctx.open = this.match(languageParser.T__5);
                this.state = 2563;
                localctx.qe = this.queryExpression();
                this.state = 2564;
                localctx.close = this.match(languageParser.T__6);
                 localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ),
                                  args: [ this.surroundByParens( localctx.qe.query, localctx.open, localctx.close, true ) ] } 
                break;
            case languageParser.T__16:
            case languageParser.HideAlternatives:
                this.state = 2567;
                localctx.qm = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===languageParser.T__16 || _la===languageParser.HideAlternatives)) {
                    localctx.qm = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                 localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ), args: [
                          { param: this.tokenLocation( localctx.qm, undefined, '?' ), scope: 'param' }
                        ] }
                        this.csnParseOnly( 'Dynamic parameter "?" is not supported', localctx.qm );
                      
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2569;
                localctx.ep = this.valuePath( 'ref' );
                 localctx.ep.qp['$'+'expected'] = 'exists';
                        localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ), args: [ localctx.ep.qp ] }
                      
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__16:
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.enterOuterAlt(localctx, 3);
            this.state = 2574;
            localctx.expr = this.expression();
            this.state = 2596;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__8:
            case languageParser.T__17:
            case languageParser.T__18:
            case languageParser.T__19:
            case languageParser.T__20:
            case languageParser.T__21:
            case languageParser.T__22:
            	this.state = 2575;
            	localctx.rel = this._input.LT(1);
            	_la = this._input.LA(1);
            	if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21) | (1 << languageParser.T__22))) !== 0))) {
            	    localctx.rel = this._errHandler.recoverInline(this);
            	}
            	else {
            		this._errHandler.reportMatch(this);
            	    this.consume();
            	}
            	 localctx.cond =  { op: this.tokenLocation( localctx.rel, undefined, (localctx.rel===null ? null : localctx.rel.text)), args: [ localctx.expr.expr ] } 
            	this.state = 2579;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (languageParser.ALL - 38)) | (1 << (languageParser.ANY - 38)) | (1 << (languageParser.SOME - 38)))) !== 0)) {
            	    this.state = 2577;
            	    localctx.asa = this._input.LT(1);
            	    _la = this._input.LA(1);
            	    if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (languageParser.ALL - 38)) | (1 << (languageParser.ANY - 38)) | (1 << (languageParser.SOME - 38)))) !== 0))) {
            	        localctx.asa = this._errHandler.recoverInline(this);
            	    }
            	    else {
            	    	this._errHandler.reportMatch(this);
            	        this.consume();
            	    }
            	     localctx.cond.quantifier = this.tokenLocation(localctx.asa, undefined, (localctx.asa===null ? null : localctx.asa.text).toLowerCase()); 
            	}

            	this.state = 2581;
            	localctx.e2 = this.expression();
            	 localctx.cond.args.push(localctx.e2.expr); 
            	break;
            case languageParser.IS:
            	this.state = 2584;
            	this.match(languageParser.IS);
            	this.state = 2588;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case languageParser.NOT:
            	    this.state = 2585;
            	    localctx.inn = this.match(languageParser.NOT);
            	    this.state = 2586;
            	    this.match(languageParser.NULL);
            	    break;
            	case languageParser.NULL:
            	    this.state = 2587;
            	    localctx.innu = this.match(languageParser.NULL);
            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	 localctx.cond =  { op: localctx.inn ? this.tokenLocation( localctx.inn, undefined, 'isNotNull' ) : this.tokenLocation( localctx.innu, undefined, 'isNull' ), args: [ localctx.expr.expr ] } 
            	break;
            case languageParser.NOT:
            	 localctx.cond =  { args: [ localctx.expr.expr ] } 
            	this.state = 2592;
            	this.match(languageParser.NOT);
            	this.state = 2593;
            	this.predicate( localctx.cond, true );
            	break;
            case languageParser.IN:
            case languageParser.BETWEEN:
            case languageParser.LIKE:
            	 localctx.cond =  { args: [ localctx.expr.expr ] } 
            	this.state = 2595;
            	this.predicate( localctx.cond, false );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__14:
            case languageParser.ALL:
            case languageParser.DISTINCT:
            case languageParser.FROM:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ASPECT:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DEFINE:
            case languageParser.ENTITY:
            case languageParser.EVENT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.HideAlternatives:
            	break;
            default:
            	break;
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.cond) { this.attachLocation(localctx.cond); } else { localctx.cond =  localctx.expr.expr }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState, cond, negated) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_predicate;
    this.cond = null
    this.negated = null
    this.ino = null; // Token
    this.e1 = null; // ExpressionContext
    this.bw = null; // Token
    this.e2 = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.lk = null; // Token
    this.e4 = null; // ExpressionContext
    this.e5 = null; // ExpressionContext
    this.cond = cond || null;
    this.negated = negated || null;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.IN = function() {
    return this.getToken(languageParser.IN, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.AND = function() {
    return this.getToken(languageParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(languageParser.BETWEEN, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(languageParser.LIKE, 0);
};

PredicateContext.prototype.ESCAPE = function() {
    return this.getToken(languageParser.ESCAPE, 0);
};




languageParser.PredicateContext = PredicateContext;

languageParser.prototype.predicate = function(cond, negated) {

    var localctx = new PredicateContext(this, this._ctx, this.state, cond, negated);
    this.enterRule(localctx, 178, languageParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 2620;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 2600;
            localctx.ino = this.match(languageParser.IN);
            this.state = 2601;
            localctx.e1 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.ino, undefined, (negated) ? 'notIn' : 'in'); localctx.cond.args.push( localctx.e1.expr ); 
            break;
        case languageParser.BETWEEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2604;
            localctx.bw = this.match(languageParser.BETWEEN);
            this.state = 2605;
            localctx.e2 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.bw, undefined, (negated) ? 'notBetween' : 'between' ); localctx.cond.args.push( localctx.e2.expr ); 
            this.state = 2607;
            this.match(languageParser.AND);
            this.state = 2608;
            localctx.e3 = this.expression();
             localctx.cond.args.push( localctx.e3.expr ); 
            break;
        case languageParser.LIKE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2611;
            localctx.lk = this.match(languageParser.LIKE);
            this.state = 2612;
            localctx.e4 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.lk, undefined, (negated) ? 'notLike' : 'like' ); localctx.cond.args.push( localctx.e4.expr ); 
            this.state = 2618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ESCAPE) {
                this.state = 2614;
                this.match(languageParser.ESCAPE);
                this.state = 2615;
                localctx.e5 = this.expression();
                 localctx.cond.args.push( localctx.e5.expr ); 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expression;
    this.expr = null
    this.e1 = null; // ExpressionSumContext
    this.or = null; // Token
    this.e2 = null; // ExpressionSumContext
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.expressionSum = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSumContext);
    } else {
        return this.getTypedRuleContext(ExpressionSumContext,i);
    }
};




languageParser.ExpressionContext = ExpressionContext;

languageParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, languageParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2622;
        localctx.e1 = this.expressionSum();
         localctx.expr =  localctx.e1.expr 
        this.state = 2630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__23) {
            this.state = 2624;
            localctx.or = this.match(languageParser.T__23);
            this.state = 2625;
            localctx.e2 = this.expressionSum();

                    localctx.expr =  {
                      op: this.tokenLocation( localctx.or, undefined, '||' ), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.expr) { this.attachLocation(localctx.expr); } else { localctx.expr =  this.attachLocation({})} 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionSumContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionSum;
    this.expr = null
    this.e1 = null; // ExpressionFactorContext
    this.op = null; // Token
    this.e2 = null; // ExpressionFactorContext
    return this;
}

ExpressionSumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSumContext.prototype.constructor = ExpressionSumContext;

ExpressionSumContext.prototype.expressionFactor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionFactorContext);
    } else {
        return this.getTypedRuleContext(ExpressionFactorContext,i);
    }
};




languageParser.ExpressionSumContext = ExpressionSumContext;

languageParser.prototype.expressionSum = function() {

    var localctx = new ExpressionSumContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, languageParser.RULE_expressionSum);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2633;
        localctx.e1 = this.expressionFactor();
         localctx.expr =  localctx.e1.expr 
        this.state = 2641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9 || _la===languageParser.T__10) {
            this.state = 2635;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__9 || _la===languageParser.T__10)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2636;
            localctx.e2 = this.expressionFactor();

                    localctx.expr =  {
                      op: this.tokenLocation(localctx.op, undefined, (localctx.op===null ? null : localctx.op.text)), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2643;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.expr) this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionFactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionFactor;
    this.expr = null
    this.e1 = null; // ExpressionTermContext
    this.op = null; // Token
    this.e2 = null; // ExpressionTermContext
    return this;
}

ExpressionFactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionFactorContext.prototype.constructor = ExpressionFactorContext;

ExpressionFactorContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};




languageParser.ExpressionFactorContext = ExpressionFactorContext;

languageParser.prototype.expressionFactor = function() {

    var localctx = new ExpressionFactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, languageParser.RULE_expressionFactor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2644;
        localctx.e1 = this.expressionTerm();
         localctx.expr =  localctx.e1.expr 
        this.state = 2652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__11 || _la===languageParser.T__24) {
            this.state = 2646;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__11 || _la===languageParser.T__24)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2647;
            localctx.e2 = this.expressionTerm();

                    localctx.expr =  {
                      op: this.tokenLocation(localctx.op, undefined, (localctx.op===null ? null : localctx.op.text)), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.expr) this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionTerm;
    this.expr = null
    this.op = null
    this.args = []
    this.unary = null; // Token
    this.e1 = null; // ExpressionTermContext
    this.val = null; // LiteralValueContext
    this.sf = null; // SpecialFunctionContext
    this.ca = null; // Token
    this.e2 = null; // ExpressionContext
    this.ow = null; // Token
    this.ew = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.c = null; // ConditionContext
    this.el = null; // Token
    this.e4 = null; // ExpressionContext
    this.ne = null; // Token
    this.nqp = null; // ValuePathContext
    this.vp = null; // ValuePathContext
    this.pp = null; // Token
    this.qm = null; // Token
    this.open = null; // Token
    this.qe = null; // QueryExpressionContext
    this.close = null; // Token
    this.c1 = null; // ConditionContext
    this.cn = null; // ExpressionContext
    return this;
}

ExpressionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionTermContext.prototype.constructor = ExpressionTermContext;

ExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};

ExpressionTermContext.prototype.END = function() {
    return this.getToken(languageParser.END, 0);
};

ExpressionTermContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ExpressionTermContext.prototype.specialFunction = function() {
    return this.getTypedRuleContext(SpecialFunctionContext,0);
};

ExpressionTermContext.prototype.CASE = function() {
    return this.getToken(languageParser.CASE, 0);
};

ExpressionTermContext.prototype.NEW = function() {
    return this.getToken(languageParser.NEW, 0);
};

ExpressionTermContext.prototype.valuePath = function() {
    return this.getTypedRuleContext(ValuePathContext,0);
};

ExpressionTermContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ExpressionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionTermContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ExpressionTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ExpressionTermContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

ExpressionTermContext.prototype.ELSE = function() {
    return this.getToken(languageParser.ELSE, 0);
};

ExpressionTermContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.THEN);
    } else {
        return this.getToken(languageParser.THEN, i);
    }
};


ExpressionTermContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.WHEN);
    } else {
        return this.getToken(languageParser.WHEN, i);
    }
};





languageParser.ExpressionTermContext = ExpressionTermContext;

languageParser.prototype.expressionTerm = function() {

    var localctx = new ExpressionTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, languageParser.RULE_expressionTerm);
    var _la = 0; // Token type
    try {
        this.state = 2740;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__9:
        case languageParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 2655;
            localctx.unary = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__9 || _la===languageParser.T__10)) {
                localctx.unary = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2656;
            localctx.e1 = this.expressionTerm();
             localctx.expr =  this.signedExpression( localctx.unary, localctx.e1.expr ) 
            break;
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__16:
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.enterOuterAlt(localctx, 2);
            this.state = 2738;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__27:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.NULL:
            case languageParser.Number:
                this.state = 2659;
                localctx.val = this.literalValue();
                 localctx.expr =  localctx.val.val 
                break;
            case languageParser.CAST:
            case languageParser.EXTRACT:
            case languageParser.TRIM:
                this.state = 2662;
                localctx.sf = this.specialFunction();
                 localctx.expr =  localctx.sf.ret 
                break;
            case languageParser.CASE:
                this.state = 2665;
                localctx.ca = this.match(languageParser.CASE);
                 localctx.expr =  { op : this.tokenLocation( localctx.ca, undefined, 'case' ), args: [] } 
                this.state = 2689;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.EXTRACT:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.TRIM:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                case languageParser.HideAlternatives:
                    this.state = 2667;
                    localctx.e2 = this.expression();
                     localctx.expr.args.push(localctx.e2.expr); 
                    this.state = 2675; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2669;
                        localctx.ow = this.match(languageParser.WHEN);
                        this.state = 2670;
                        localctx.ew = this.expression();
                        this.state = 2671;
                        this.match(languageParser.THEN);
                        this.state = 2672;
                        localctx.e3 = this.expression();
                         localctx.expr.args.push( this.createPrefixOp( localctx.ow, [ localctx.ew.expr, localctx.e3.expr ] ) ); 
                        this.state = 2677; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.WHEN);
                    break;
                case languageParser.WHEN:
                    this.state = 2685; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2679;
                        localctx.ow = this.match(languageParser.WHEN);
                        this.state = 2680;
                        localctx.c = this.condition();
                        this.state = 2681;
                        this.match(languageParser.THEN);
                        this.state = 2682;
                        localctx.e3 = this.expression();
                         localctx.expr.args.push( this.createPrefixOp( localctx.ow, [ localctx.c.cond, localctx.e3.expr ] ) ); 
                        this.state = 2687; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.WHEN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2695;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ELSE) {
                    this.state = 2691;
                    localctx.el = this.match(languageParser.ELSE);
                    this.state = 2692;
                    localctx.e4 = this.expression();
                     localctx.expr.args.push( this.createPrefixOp( localctx.el, [ localctx.e4.expr ] ) ); 
                }

                this.state = 2697;
                this.match(languageParser.END);
                break;
            case languageParser.NEW:
                this.state = 2699;
                localctx.ne = this.match(languageParser.NEW);
                this.state = 2700;
                localctx.nqp = this.valuePath( 'ref', null);
                 localctx.expr =  { op: this.tokenLocation( localctx.ne, undefined, 'new' ), args: [] }
                        this.notSupportedYet( localctx.ne ); 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2703;
                localctx.vp = this.valuePath( 'ref', null );
                 localctx.expr =  this.valuePathAst( localctx.vp.qp ) 
                break;
            case languageParser.T__4:
                this.state = 2706;
                this.match(languageParser.T__4);
                this.state = 2712;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                    this.state = 2707;
                    localctx.vp = this.valuePath( 'paramref', this.startLocation() );
                     localctx.expr =  localctx.vp.qp; localctx.expr.scope = 'param'; 
                    break;
                case languageParser.Number:
                    this.state = 2710;
                    localctx.pp = this.match(languageParser.Number);
                     localctx.expr =  { param: this.numberLiteral( localctx.pp ), scope: 'param' }
                              this.csnParseOnly( 'Positional parameter ":' + (localctx.pp===null ? null : localctx.pp.text) + '" is not supported', localctx.pp );
                            
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case languageParser.T__16:
            case languageParser.HideAlternatives:
                this.state = 2714;
                localctx.qm = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===languageParser.T__16 || _la===languageParser.HideAlternatives)) {
                    localctx.qm = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                 localctx.expr =  { param: this.tokenLocation( localctx.qm, undefined, '?' ), scope: 'param' }
                        this.csnParseOnly( 'Dynamic parameter "?" is not supported', localctx.qm );
                      
                break;
            case languageParser.T__5:
                this.state = 2716;
                localctx.open = this.match(languageParser.T__5);
                this.state = 2736;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2717;
                    localctx.qe = this.queryExpression();
                    this.state = 2718;
                    localctx.close = this.match(languageParser.T__6);
                     localctx.expr =  this.surroundByParens( localctx.qe.query, localctx.open, localctx.close, true ) 
                    break;

                case 2:
                    this.state = 2721;
                    localctx.c1 = this.condition();
                     localctx.expr =  [ localctx.c1.cond ] 
                    this.state = 2730;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2723;
                        this.match(languageParser.T__2);
                         if (localctx.expr.length > 1 && this.isStraightBefore(')')) break; 
                        this.state = 2725;
                        localctx.cn = this.expression();
                         if (localctx.cn.expr) localctx.expr.push(localctx.cn.expr); 
                        this.state = 2732;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2733;
                    localctx.close = this.match(languageParser.T__6);

                              if (localctx.expr.length > 1)
                                localctx.expr =  { op: this.tokenLocation( localctx.open, undefined, ',' ), args: localctx.expr }
                              else if (localctx.expr[0]) // can be `null` if condition failed to parse
                                localctx.expr =  this.surroundByParens( localctx.expr[0], localctx.open, localctx.close )
                            
                    break;

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecialFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_specialFunction;
    this.ret = { }
    this.art = {}
    this.fun = null; // Token
    this.open = null; // Token
    this.t = null; // Token
    this.e = null; // ExpressionContext
    this.f = null; // Token
    this.ca = null; // Token
    return this;
}

SpecialFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialFunctionContext.prototype.constructor = SpecialFunctionContext;

SpecialFunctionContext.prototype.TRIM = function() {
    return this.getToken(languageParser.TRIM, 0);
};

SpecialFunctionContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

SpecialFunctionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SpecialFunctionContext.prototype.LEADING = function() {
    return this.getToken(languageParser.LEADING, 0);
};

SpecialFunctionContext.prototype.TRAILING = function() {
    return this.getToken(languageParser.TRAILING, 0);
};

SpecialFunctionContext.prototype.BOTH = function() {
    return this.getToken(languageParser.BOTH, 0);
};

SpecialFunctionContext.prototype.EXTRACT = function() {
    return this.getToken(languageParser.EXTRACT, 0);
};

SpecialFunctionContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};

SpecialFunctionContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};

SpecialFunctionContext.prototype.DAY = function() {
    return this.getToken(languageParser.DAY, 0);
};

SpecialFunctionContext.prototype.HOUR = function() {
    return this.getToken(languageParser.HOUR, 0);
};

SpecialFunctionContext.prototype.MINUTE = function() {
    return this.getToken(languageParser.MINUTE, 0);
};

SpecialFunctionContext.prototype.SECOND = function() {
    return this.getToken(languageParser.SECOND, 0);
};

SpecialFunctionContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SpecialFunctionContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

SpecialFunctionContext.prototype.CAST = function() {
    return this.getToken(languageParser.CAST, 0);
};




languageParser.SpecialFunctionContext = SpecialFunctionContext;

languageParser.prototype.specialFunction = function() {

    var localctx = new SpecialFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, languageParser.RULE_specialFunction);
    var _la = 0; // Token type
    try {
        this.state = 2787;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.TRIM:
            this.enterOuterAlt(localctx, 1);
            this.state = 2742;
            localctx.fun = this.match(languageParser.TRIM);
            this.state = 2743;
            localctx.open = this.match(languageParser.T__5);
             localctx.ret =  this.functionAst( localctx.fun, localctx.open ) 
            this.state = 2765;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2745;
                localctx.t = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===languageParser.BOTH || _la===languageParser.LEADING || _la===languageParser.TRAILING)) {
                    localctx.t = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                 localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text) ); 
                this.state = 2750;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.EXTRACT - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.TRIM - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.AND - 65)) | (1 << (languageParser.ANNOTATE - 65)) | (1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.BOTH - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.DAY - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)) | (1 << (languageParser.HAVING - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HOUR - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEADING - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MINUTE - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.MONTH - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.SECOND - 97)) | (1 << (languageParser.SERVICE - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TRAILING - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.YEAR - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                    this.state = 2747;
                    localctx.e = this.expression();
                     localctx.ret.args[0].args.push( localctx.e.expr ); 
                }

                this.state = 2752;
                localctx.t = this.match(languageParser.FROM);
                this.state = 2753;
                localctx.e = this.expression();
                 localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text), localctx.e.expr ); 
                break;

            case 2:
                this.state = 2756;
                localctx.e = this.expression();
                this.state = 2763;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.FROM:
                     localctx.ret.args[0].args.push( localctx.e.expr ); 
                    this.state = 2758;
                    localctx.t = this.match(languageParser.FROM);
                    this.state = 2759;
                    localctx.e = this.expression();
                     localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text), localctx.e.expr ); 
                    break;
                case languageParser.T__6:
                     localctx.ret.args[0] = localctx.e.expr; 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            this.state = 2767;
            this.match(languageParser.T__6);
            break;
        case languageParser.EXTRACT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2769;
            localctx.fun = this.match(languageParser.EXTRACT);
            this.state = 2770;
            localctx.open = this.match(languageParser.T__5);
             localctx.ret =  this.functionAst( localctx.fun, localctx.open ) 
            this.state = 2772;
            localctx.t = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.DAY || _la===languageParser.HOUR || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MINUTE - 112)) | (1 << (languageParser.MONTH - 112)) | (1 << (languageParser.SECOND - 112)) | (1 << (languageParser.YEAR - 112)))) !== 0))) {
                localctx.t = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2773;
            localctx.f = this.match(languageParser.FROM);
            this.state = 2774;
            localctx.e = this.expression();
             localctx.ret.args[0].args.push( (localctx.t===null ? null : localctx.t.text), (localctx.f===null ? null : localctx.f.text), localctx.e.expr ); 
            this.state = 2776;
            this.match(languageParser.T__6);
            break;
        case languageParser.CAST:
            this.enterOuterAlt(localctx, 3);
            this.state = 2778;
            localctx.ca = this.match(languageParser.CAST);
            this.state = 2779;
            localctx.open = this.match(languageParser.T__5);

                  localctx.ret =  {
                    op: this.tokenLocation( localctx.ca, undefined, 'cast' ),
                    args: [ ],
                    location: this.tokenLocation( localctx.ca )
                  }
                
            this.state = 2781;
            localctx.e = this.expression();
            this.state = 2782;
            this.match(languageParser.AS);
            this.state = 2783;
            this.typeRefOptArgs( localctx.ret );

                  localctx.ret.args.push( localctx.e.expr );
                
            this.state = 2785;
            this.match(languageParser.T__6);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuePathContext(parser, parent, invokingState, category, location) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_valuePath;
    this.category = null
    this.location = null
    this.qp = { path: [] }
    this._sync = 'nop'
    this.id = null; // IdentContext
    this.category = category || null;
    this.location = location || null;
    return this;
}

ValuePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuePathContext.prototype.constructor = ValuePathContext;

ValuePathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

ValuePathContext.prototype.pathArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathArgumentsContext);
    } else {
        return this.getTypedRuleContext(PathArgumentsContext,i);
    }
};

ValuePathContext.prototype.cardinalityAndFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CardinalityAndFilterContext);
    } else {
        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
    }
};




languageParser.ValuePathContext = ValuePathContext;

languageParser.prototype.valuePath = function(category, location) {

    var localctx = new ValuePathContext(this, this._ctx, this.state, category, location);
    this.enterRule(localctx, 190, languageParser.RULE_valuePath);
     localctx.qp.location = location || this.startLocation(); 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2789;
        localctx.id = this.ident( localctx.category );
         this.pushIdent( localctx.qp.path, localctx.id.id ); 
        this.state = 2796;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__5:
        	this.state = 2791;
        	this.pathArguments( localctx.id.id, localctx.id.id );
        	this.state = 2793;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.T__12) {
        	    this.state = 2792;
        	    this.cardinalityAndFilter( localctx.id.id );
        	}

        	break;
        case languageParser.T__12:
        	this.state = 2795;
        	this.cardinalityAndFilter( localctx.id.id );
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__4:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__8:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__11:
        case languageParser.T__14:
        case languageParser.T__15:
        case languageParser.T__17:
        case languageParser.T__18:
        case languageParser.T__19:
        case languageParser.T__20:
        case languageParser.T__21:
        case languageParser.T__22:
        case languageParser.T__23:
        case languageParser.T__24:
        case languageParser.ALL:
        case languageParser.AS:
        case languageParser.DISTINCT:
        case languageParser.FROM:
        case languageParser.IN:
        case languageParser.NOT:
        case languageParser.NULL:
        case languageParser.ON:
        case languageParser.WHEN:
        case languageParser.WHERE:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
        case languageParser.DOTbeforeBRACE:
        	break;
        default:
        	break;
        }
        this.state = 2810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 2798;
            this.match(languageParser.T__15);
            this.state = 2799;
            localctx.id = this.ident('ref');
             this.pushIdent( localctx.qp.path, localctx.id.id ); 
            this.state = 2806;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__5:
            	this.state = 2801;
            	this.pathArguments( localctx.id.id );
            	this.state = 2803;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.T__12) {
            	    this.state = 2802;
            	    this.cardinalityAndFilter( localctx.id.id );
            	}

            	break;
            case languageParser.T__12:
            	this.state = 2805;
            	this.cardinalityAndFilter( localctx.id.id );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__4:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__8:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__11:
            case languageParser.T__14:
            case languageParser.T__15:
            case languageParser.T__17:
            case languageParser.T__18:
            case languageParser.T__19:
            case languageParser.T__20:
            case languageParser.T__21:
            case languageParser.T__22:
            case languageParser.T__23:
            case languageParser.T__24:
            case languageParser.ALL:
            case languageParser.AS:
            case languageParser.DISTINCT:
            case languageParser.FROM:
            case languageParser.IN:
            case languageParser.NOT:
            case languageParser.NULL:
            case languageParser.ON:
            case languageParser.WHEN:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.COMPOSITION:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DESC:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.ESCAPE:
            case languageParser.EXACT:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXTEND:
            case languageParser.FIRST:
            case languageParser.FULL:
            case languageParser.FUNCTION:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.LAST:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MIXIN:
            case languageParser.MONTH:
            case languageParser.NAMESPACE:
            case languageParser.NULLS:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OUTER:
            case languageParser.PARAMETERS:
            case languageParser.PROJECTION:
            case languageParser.REDIRECTED:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.SECOND:
            case languageParser.SERVICE:
            case languageParser.THEN:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.USING:
            case languageParser.VIEW:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.HideAlternatives:
            case languageParser.DOTbeforeBRACE:
            	break;
            default:
            	break;
            }
            this.state = 2812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.qp); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromArgumentsContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fromArguments;
    this.pathStep = null
    this.paren = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

FromArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromArgumentsContext.prototype.constructor = FromArgumentsContext;

FromArgumentsContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};




languageParser.FromArgumentsContext = FromArgumentsContext;

languageParser.prototype.fromArguments = function(pathStep) {

    var localctx = new FromArgumentsContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 192, languageParser.RULE_fromArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2813;
        localctx.paren = this.match(languageParser.T__5);
        this.state = 2814;
        this.namedExpression( localctx.pathStep );
        this.state = 2820;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 2815;
            this.match(languageParser.T__2);
             if (this.isStraightBefore(')')) break; 
            this.state = 2817;
            this.namedExpression( localctx.pathStep );
            this.state = 2822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2823;
        this.match(languageParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PathArgumentsContext(parser, parent, invokingState, pathStep, considerSpecial) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_pathArguments;
    this.pathStep = null
    this.considerSpecial = null
    this.paren = null; // Token
    this.a = null; // Token
    this.e1 = null; // ExpressionContext
    this.d = null; // Token
    this.e2 = null; // ExpressionContext
    this.star = null; // Token
    this.pathStep = pathStep || null;
    this.considerSpecial = considerSpecial || null;
    return this;
}

PathArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathArgumentsContext.prototype.constructor = PathArgumentsContext;

PathArgumentsContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};

PathArgumentsContext.prototype.arrowedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrowedExpressionContext);
    } else {
        return this.getTypedRuleContext(ArrowedExpressionContext,i);
    }
};

PathArgumentsContext.prototype.funcExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FuncExpressionContext);
    } else {
        return this.getTypedRuleContext(FuncExpressionContext,i);
    }
};

PathArgumentsContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};

PathArgumentsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PathArgumentsContext.prototype.DISTINCT = function() {
    return this.getToken(languageParser.DISTINCT, 0);
};




languageParser.PathArgumentsContext = PathArgumentsContext;

languageParser.prototype.pathArguments = function(pathStep, considerSpecial) {

    var localctx = new PathArgumentsContext(this, this._ctx, this.state, pathStep, considerSpecial);
    this.enterRule(localctx, 194, languageParser.RULE_pathArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2825;
        localctx.paren = this.match(languageParser.T__5);
         this.prepareGenericKeywords( localctx.considerSpecial ); 
        this.state = 2877;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,388,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2827;
            this.namedExpression( localctx.pathStep );
            this.state = 2833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2828;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2830;
                this.namedExpression( localctx.pathStep );
                this.state = 2835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
             localctx.pathStep.args = Object.create(null); 
            this.state = 2837;
            this.arrowedExpression( localctx.pathStep );
            this.state = 2843;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2838;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2840;
                this.arrowedExpression( localctx.pathStep );
                this.state = 2845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
             localctx.pathStep.args = []; 
            this.state = 2847;
            this.funcExpression( localctx.pathStep, localctx.considerSpecial );
            this.state = 2853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2848;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2850;
                this.funcExpression( localctx.pathStep, localctx.considerSpecial );
                this.state = 2855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 4:
            this.state = 2856;
            localctx.a = this.match(languageParser.ALL);
             localctx.pathStep.quantifier = this.tokenLocation( localctx.a, undefined, 'all' ); 
            this.state = 2858;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            break;

        case 5:
            this.state = 2861;
            localctx.d = this.match(languageParser.DISTINCT);
             localctx.pathStep.quantifier = this.tokenLocation( localctx.d, undefined, 'distinct' ); 
            this.state = 2863;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            this.state = 2871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2865;
                this.match(languageParser.T__2);
                this.state = 2866;
                localctx.e2 = this.expression();
                 localctx.pathStep.args.push( localctx.e2.expr ); 
                this.state = 2873;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 6:
            this.state = 2874;
            localctx.star = this.match(languageParser.T__11);
             localctx.pathStep.args = [ { location: this.tokenLocation(localctx.star), val: '*', literal: 'token' } ]; 
            break;

        case 7:
             localctx.pathStep.args = []; 
            break;

        }
        this.state = 2879;
        this.match(languageParser.T__6);
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedExpressionContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedExpression;
    this.pathStep = null
    this.name = null; // IdentContext
    this.elem = null; // ExpressionContext
    this.pathStep = pathStep || null;
    return this;
}

NamedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionContext.prototype.constructor = NamedExpressionContext;

NamedExpressionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.NamedExpressionContext = NamedExpressionContext;

languageParser.prototype.namedExpression = function(pathStep) {

    var localctx = new NamedExpressionContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 196, languageParser.RULE_namedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2881;
        localctx.name = this.ident('paramname');
        this.state = 2882;
        this.match(languageParser.T__4);
        this.state = 2883;
        localctx.elem = this.expression();
         if (localctx.pathStep && localctx.name.id) {
                this.addDef( localctx.pathStep, 'args', 0, localctx.name.id, true,
                             (localctx.elem) ? localctx.elem.expr : { location: localctx.name.id.location } );
                localctx.pathStep['$'+'syntax'] = ':';
              }
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrowedExpressionContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_arrowedExpression;
    this.pathStep = null
    this.name = null; // IdentContext
    this.a = null; // Token
    this.elem = null; // ExpressionContext
    this.pathStep = pathStep || null;
    return this;
}

ArrowedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowedExpressionContext.prototype.constructor = ArrowedExpressionContext;

ArrowedExpressionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ArrowedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.ArrowedExpressionContext = ArrowedExpressionContext;

languageParser.prototype.arrowedExpression = function(pathStep) {

    var localctx = new ArrowedExpressionContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 198, languageParser.RULE_arrowedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2886;
        localctx.name = this.ident('paramname');
        this.state = 2887;
        localctx.a = this.match(languageParser.T__25);
        this.state = 2888;
        localctx.elem = this.expression();
         if (localctx.name.id) this.addDef( localctx.pathStep, 'args', 0, localctx.name.id, true,
                                         (localctx.elem) ? localctx.elem.expr : { location: localctx.name.id.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncExpressionContext(parser, parent, invokingState, pathStep, considerSpecial) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_funcExpression;
    this.pathStep = null
    this.considerSpecial = null
    this.only = null; // Token
    this.expr = null; // ExpressionContext
    this.pathStep = pathStep || null;
    this.considerSpecial = considerSpecial || null;
    return this;
}

FuncExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncExpressionContext.prototype.constructor = FuncExpressionContext;

FuncExpressionContext.prototype.GenericArgFull = function() {
    return this.getToken(languageParser.GenericArgFull, 0);
};

FuncExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.FuncExpressionContext = FuncExpressionContext;

languageParser.prototype.funcExpression = function(pathStep, considerSpecial) {

    var localctx = new FuncExpressionContext(this, this._ctx, this.state, pathStep, considerSpecial);
    this.enterRule(localctx, 200, languageParser.RULE_funcExpression);
     this.prepareGenericKeywords( localctx.considerSpecial ); 
    try {
        this.state = 2896;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.GenericArgFull:
            this.enterOuterAlt(localctx, 1);
            this.state = 2891;
            localctx.only = this.match(languageParser.GenericArgFull);
             localctx.pathStep.args.push( { location: this.tokenLocation(localctx.only), val: (localctx.only===null ? null : localctx.only.text), literal: 'token' } ); 
            break;
        case languageParser.T__4:
        case languageParser.T__5:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__16:
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.HideAlternatives:
            this.enterOuterAlt(localctx, 2);
            this.state = 2893;
            localctx.expr = this.expression();
             localctx.pathStep.args.push( localctx.expr.expr ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CardinalityAndFilterContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_cardinalityAndFilter;
    this.pathStep = null
    this._sync = 'nop'
    this.co = null; // ConditionContext
    this.pathStep = pathStep || null;
    return this;
}

CardinalityAndFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityAndFilterContext.prototype.constructor = CardinalityAndFilterContext;

CardinalityAndFilterContext.prototype.optionalWhereForFilter = function() {
    return this.getTypedRuleContext(OptionalWhereForFilterContext,0);
};

CardinalityAndFilterContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

CardinalityAndFilterContext.prototype.optionalCardinality = function() {
    return this.getTypedRuleContext(OptionalCardinalityContext,0);
};




languageParser.CardinalityAndFilterContext = CardinalityAndFilterContext;

languageParser.prototype.cardinalityAndFilter = function(pathStep) {

    var localctx = new CardinalityAndFilterContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 202, languageParser.RULE_cardinalityAndFilter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2898;
        this.match(languageParser.T__12);
        this.state = 2900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.Number) {
            this.state = 2899;
            this.optionalCardinality( pathStep );
        }

        this.state = 2902;
        this.optionalWhereForFilter();
        this.state = 2903;
        localctx.co = this.condition();
         if (localctx.pathStep) localctx.pathStep.where = localctx.co.cond; 
        this.state = 2905;
        this.match(languageParser.T__14);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalCardinalityContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalCardinality;
    this.pathStep = null
    this.trgMax = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

OptionalCardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalCardinalityContext.prototype.constructor = OptionalCardinalityContext;

OptionalCardinalityContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.OptionalCardinalityContext = OptionalCardinalityContext;

languageParser.prototype.optionalCardinality = function(pathStep) {

    var localctx = new OptionalCardinalityContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 204, languageParser.RULE_optionalCardinality);
    try {
        this.enterOuterAlt(localctx, 1);
         if (this._input.LT(2).text !== ':') return localctx; 

        this.state = 2908;
        localctx.trgMax = this.match(languageParser.Number);
        this.state = 2909;
        this.match(languageParser.T__4);
         if (localctx.pathStep) localctx.pathStep.cardinality = { targetMax: this.numberLiteral( localctx.trgMax ) } 
        this._ctx.stop = this._input.LT(-1);
         if (localctx.pathStep && localctx.pathStep.cardinality) this.attachLocation(localctx.pathStep.cardinality); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalWhereForFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalWhereForFilter;
    return this;
}

OptionalWhereForFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalWhereForFilterContext.prototype.constructor = OptionalWhereForFilterContext;

OptionalWhereForFilterContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};




languageParser.OptionalWhereForFilterContext = OptionalWhereForFilterContext;

languageParser.prototype.optionalWhereForFilter = function() {

    var localctx = new OptionalWhereForFilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, languageParser.RULE_optionalWhereForFilter);
    try {
        this.enterOuterAlt(localctx, 1);

              var text = this.getCurrentToken().text.toUpperCase();
              if (!['WHERE','GROUP','ORDER','LIMIT'].includes( text )) return;
              // TODO: should we somehow add those keywords to $(EXPECTED)?
            
        this.state = 2913;
        this.match(languageParser.WHERE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnoValueBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annoValueBase;
    this.val = null
    this.hasEllipsis = 0
    this.head = null; // ArrayValueContext
    this.e = null; // Token
    this.tail = null; // ArrayValueContext
    this.v1 = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    return this;
}

AnnoValueBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnoValueBaseContext.prototype.constructor = AnnoValueBaseContext;

AnnoValueBaseContext.prototype.namedValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedValueContext);
    } else {
        return this.getTypedRuleContext(NamedValueContext,i);
    }
};

AnnoValueBaseContext.prototype.arrayValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayValueContext);
    } else {
        return this.getTypedRuleContext(ArrayValueContext,i);
    }
};

AnnoValueBaseContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

AnnoValueBaseContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.AnnoValueBaseContext = AnnoValueBaseContext;

languageParser.prototype.annoValueBase = function() {

    var localctx = new AnnoValueBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, languageParser.RULE_annoValueBase);
    var _la = 0; // Token type
    try {
        this.state = 2964;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
             localctx.val =  { literal: 'struct', location: this.startLocation() } 
            this.state = 2916;
            this.match(languageParser.T__1);
             this.meltKeywordToIdentifier(); 
            this.state = 2918;
            this.namedValue( localctx.val );
            this.state = 2924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2919;
                this.match(languageParser.T__2);

                        this.meltKeywordToIdentifier();
                        if (this.isStraightBefore("}")) break; // allow ',' before ')'
                      
                this.state = 2921;
                this.namedValue( localctx.val );
                this.state = 2926;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2927;
            this.match(languageParser.T__3);
            break;
        case languageParser.T__12:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  { literal: 'array', location: this.startLocation(), val: [] } 
            this.state = 2930;
            this.match(languageParser.T__12);
            this.state = 2952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__12) | (1 << languageParser.T__26) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.AND - 65)) | (1 << (languageParser.ANNOTATE - 65)) | (1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.BOTH - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.DAY - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)) | (1 << (languageParser.HAVING - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HOUR - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEADING - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MINUTE - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.MONTH - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.SECOND - 97)) | (1 << (languageParser.SERVICE - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TRAILING - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.YEAR - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
                this.state = 2936;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__7:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__12:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MIXIN:
                case languageParser.MONTH:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.SECOND:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.YEAR:
                case languageParser.Identifier:
                    this.state = 2931;
                    localctx.head = this.arrayValue();
                     localctx.val.val.push( localctx.head.val ); 
                    break;
                case languageParser.T__26:
                    this.state = 2934;
                    localctx.e = this.match(languageParser.T__26);
                     
                                localctx.val.val.push( { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) } );
                                localctx.hasEllipsis++;
                              
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2949;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2938;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(']')) break; 
                    this.state = 2945;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.T__1:
                    case languageParser.T__7:
                    case languageParser.T__9:
                    case languageParser.T__10:
                    case languageParser.T__12:
                    case languageParser.T__27:
                    case languageParser.String:
                    case languageParser.QuotedLiteral:
                    case languageParser.Boolean:
                    case languageParser.NULL:
                    case languageParser.Number:
                    case languageParser.ABSTRACT:
                    case languageParser.ACTION:
                    case languageParser.ACTIONS:
                    case languageParser.AND:
                    case languageParser.ANNOTATE:
                    case languageParser.ANNOTATION:
                    case languageParser.ARRAY:
                    case languageParser.ASC:
                    case languageParser.ASPECT:
                    case languageParser.ASSOCIATION:
                    case languageParser.BETWEEN:
                    case languageParser.BOTH:
                    case languageParser.COMPOSITION:
                    case languageParser.CONTEXT:
                    case languageParser.CROSS:
                    case languageParser.DAY:
                    case languageParser.DEFAULT:
                    case languageParser.DEFINE:
                    case languageParser.DESC:
                    case languageParser.ELEMENT:
                    case languageParser.ELSE:
                    case languageParser.END:
                    case languageParser.ENTITY:
                    case languageParser.ENUM:
                    case languageParser.EVENT:
                    case languageParser.ESCAPE:
                    case languageParser.EXACT:
                    case languageParser.EXCEPT:
                    case languageParser.EXCLUDING:
                    case languageParser.EXTEND:
                    case languageParser.FIRST:
                    case languageParser.FULL:
                    case languageParser.FUNCTION:
                    case languageParser.GROUP:
                    case languageParser.HAVING:
                    case languageParser.HOUR:
                    case languageParser.INNER:
                    case languageParser.INTERSECT:
                    case languageParser.INTO:
                    case languageParser.IS:
                    case languageParser.JOIN:
                    case languageParser.LAST:
                    case languageParser.LEADING:
                    case languageParser.LEFT:
                    case languageParser.LIKE:
                    case languageParser.LIMIT:
                    case languageParser.LOCALIZED:
                    case languageParser.MANY:
                    case languageParser.MASKED:
                    case languageParser.MINUS:
                    case languageParser.MINUTE:
                    case languageParser.MIXIN:
                    case languageParser.MONTH:
                    case languageParser.NAMESPACE:
                    case languageParser.NULLS:
                    case languageParser.OFFSET:
                    case languageParser.ONE:
                    case languageParser.OR:
                    case languageParser.ORDER:
                    case languageParser.OUTER:
                    case languageParser.PARAMETERS:
                    case languageParser.PROJECTION:
                    case languageParser.REDIRECTED:
                    case languageParser.RETURNS:
                    case languageParser.RIGHT:
                    case languageParser.SECOND:
                    case languageParser.SERVICE:
                    case languageParser.THEN:
                    case languageParser.TRAILING:
                    case languageParser.TO:
                    case languageParser.TYPE:
                    case languageParser.UNION:
                    case languageParser.USING:
                    case languageParser.VIEW:
                    case languageParser.YEAR:
                    case languageParser.Identifier:
                        this.state = 2940;
                        localctx.tail = this.arrayValue();
                         localctx.val.val.push( localctx.tail.val ); 
                        break;
                    case languageParser.T__26:
                        this.state = 2943;
                        localctx.e = this.match(languageParser.T__26);
                         
                                      localctx.val.val.push( { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) } );
                                      if(++localctx.hasEllipsis > 1)
                                        this.error( 'syntax-unexpected-ellipsis', localctx.e, { code: '...' },
                                                    'Expected no more than one $(CODE)' );
                                    
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 2951;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2954;
            this.match(languageParser.T__14);
            break;
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 3);
            this.state = 2955;
            localctx.v1 = this.literalValue();
             localctx.val =  localctx.v1.val 
            break;
        case languageParser.T__9:
        case languageParser.T__10:
            this.enterOuterAlt(localctx, 4);
            this.state = 2960;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__9:
                this.state = 2958;
                localctx.plus = this.match(languageParser.T__9);
                break;
            case languageParser.T__10:
                this.state = 2959;
                localctx.min = this.match(languageParser.T__10);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2962;
            localctx.num = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.num, localctx.plus||localctx.min ) 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnoValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annoValue;
    this.val = null
    this.base = null; // AnnoValueBaseContext
    this.at = null; // Token
    return this;
}

AnnoValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnoValueContext.prototype.constructor = AnnoValueContext;

AnnoValueContext.prototype.annoValueBase = function() {
    return this.getTypedRuleContext(AnnoValueBaseContext,0);
};

AnnoValueContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

AnnoValueContext.prototype.annotationPathVariant = function() {
    return this.getTypedRuleContext(AnnotationPathVariantContext,0);
};




languageParser.AnnoValueContext = AnnoValueContext;

languageParser.prototype.annoValue = function() {

    var localctx = new AnnoValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, languageParser.RULE_annoValue);
    var _la = 0; // Token type
    try {
        this.state = 2977;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__12:
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 1);
            this.state = 2966;
            localctx.base = this.annoValueBase();
             localctx.val = localctx.base.val 
            break;
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  {} 
            this.state = 2971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__7) {
                this.state = 2970;
                localctx.at = this.match(languageParser.T__7);
            }

            this.state = 2973;
            this.annotationPath( localctx.val, 'ref', localctx.at );
            this.state = 2975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__27) {
                this.state = 2974;
                this.annotationPathVariant( localctx.val );
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedValueContext(parser, parent, invokingState, struct) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedValue;
    this.struct = null
    this.namedVal = { name: {} }
    this.at = null; // Token
    this.variant = null; // IdentContext
    this.elem = null; // AnnoValueContext
    this.struct = struct || null;
    return this;
}

NamedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedValueContext.prototype.constructor = NamedValueContext;

NamedValueContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

NamedValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedValueContext.prototype.annoValue = function() {
    return this.getTypedRuleContext(AnnoValueContext,0);
};




languageParser.NamedValueContext = NamedValueContext;

languageParser.prototype.namedValue = function(struct) {

    var localctx = new NamedValueContext(this, this._ctx, this.state, struct);
    this.enterRule(localctx, 212, languageParser.RULE_namedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 2979;
            localctx.at = this.match(languageParser.T__7);
        }

        this.state = 2982;
        this.annotationPath( localctx.namedVal.name, 'name', localctx.at );
        this.state = 2988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__27) {
            this.state = 2983;
            this.match(languageParser.T__27);
             this.meltKeywordToIdentifier(); 
            this.state = 2985;
            localctx.variant = this.ident('variant');
             localctx.namedVal.name.variant = localctx.variant.id; 
        }

        this.state = 2993;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 2990;
            this.match(languageParser.T__4);
             this.meltKeywordToIdentifier(true); 
            this.state = 2992;
            localctx.elem = this.annoValue();
        }

         this.addItem( localctx.struct, '_struct', null, true, // TODO: re-check _struct
                            (localctx.elem) ? Object.assign(localctx.namedVal, localctx.elem.val) : localctx.namedVal ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_arrayValue;
    this.val = null
    this.head = null; // ArrayValueContext
    this.tail = null; // ArrayValueContext
    this.v1 = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    this.at = null; // Token
    this.variant = null; // IdentContext
    return this;
}

ArrayValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayValueContext.prototype.constructor = ArrayValueContext;

ArrayValueContext.prototype.namedValueInArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedValueInArrayContext);
    } else {
        return this.getTypedRuleContext(NamedValueInArrayContext,i);
    }
};

ArrayValueContext.prototype.arrayValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayValueContext);
    } else {
        return this.getTypedRuleContext(ArrayValueContext,i);
    }
};

ArrayValueContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ArrayValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ArrayValueContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

ArrayValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ArrayValueContext = ArrayValueContext;

languageParser.prototype.arrayValue = function() {

    var localctx = new ArrayValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, languageParser.RULE_arrayValue);
    var _la = 0; // Token type
    try {
        this.state = 3049;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
             localctx.val =  { literal: 'struct', location: this.startLocation() } 
            this.state = 2998;
            this.match(languageParser.T__1);
             this.meltKeywordToIdentifier(); 
            this.state = 3000;
            this.namedValueInArray( localctx.val );
            this.state = 3006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3001;
                this.match(languageParser.T__2);

                        this.meltKeywordToIdentifier();
                        if (this.isStraightBefore("}")) break; // allow ',' before '}'
                      
                this.state = 3003;
                this.namedValueInArray( localctx.val );
                this.state = 3008;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3009;
            this.match(languageParser.T__3);
            break;
        case languageParser.T__12:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  { literal: 'array', location: this.startLocation(), val: [] } 
            this.state = 3012;
            this.match(languageParser.T__12);
            this.state = 3025;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__12) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.AND - 65)) | (1 << (languageParser.ANNOTATE - 65)) | (1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.BOTH - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.DAY - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)) | (1 << (languageParser.GROUP - 65)) | (1 << (languageParser.HAVING - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.HOUR - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEADING - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MINUTE - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.MONTH - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.SECOND - 97)) | (1 << (languageParser.SERVICE - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.THEN - 129)) | (1 << (languageParser.TRAILING - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.YEAR - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
                this.state = 3013;
                localctx.head = this.arrayValue();
                 localctx.val.val.push( localctx.head.val ); 
                this.state = 3022;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 3015;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(']')) break; 
                    this.state = 3017;
                    localctx.tail = this.arrayValue();
                     localctx.val.val.push( localctx.tail.val ); 
                    this.state = 3024;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3027;
            this.match(languageParser.T__14);
            break;
        case languageParser.T__27:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 3);
            this.state = 3028;
            localctx.v1 = this.literalValue();
             localctx.val =  localctx.v1.val 
            break;
        case languageParser.T__9:
        case languageParser.T__10:
            this.enterOuterAlt(localctx, 4);
            this.state = 3033;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__9:
                this.state = 3031;
                localctx.plus = this.match(languageParser.T__9);
                break;
            case languageParser.T__10:
                this.state = 3032;
                localctx.min = this.match(languageParser.T__10);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3035;
            localctx.num = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.num, localctx.plus||localctx.min ) 
            break;
        case languageParser.T__7:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.COMPOSITION:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DESC:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.ESCAPE:
        case languageParser.EXACT:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXTEND:
        case languageParser.FIRST:
        case languageParser.FULL:
        case languageParser.FUNCTION:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.LAST:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MIXIN:
        case languageParser.MONTH:
        case languageParser.NAMESPACE:
        case languageParser.NULLS:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OUTER:
        case languageParser.PARAMETERS:
        case languageParser.PROJECTION:
        case languageParser.REDIRECTED:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.SECOND:
        case languageParser.SERVICE:
        case languageParser.THEN:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.USING:
        case languageParser.VIEW:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 5);
             localctx.val =  {} 
            this.state = 3039;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__7) {
                this.state = 3038;
                localctx.at = this.match(languageParser.T__7);
            }

            this.state = 3041;
            this.annotationPath( localctx.val, 'ref', localctx.at );
            this.state = 3047;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__27) {
                this.state = 3042;
                this.match(languageParser.T__27);
                 this.meltKeywordToIdentifier(); 
                this.state = 3044;
                localctx.variant = this.ident('variant');
                 localctx.val.variant = localctx.variant.id; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedValueInArrayContext(parser, parent, invokingState, struct) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedValueInArray;
    this.struct = null
    this.name = {}
    this.at = null; // Token
    this.elem = null; // ArrayValueContext
    this.struct = struct || null;
    return this;
}

NamedValueInArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedValueInArrayContext.prototype.constructor = NamedValueInArrayContext;

NamedValueInArrayContext.prototype.annotationPath = function() {
    return this.getTypedRuleContext(AnnotationPathContext,0);
};

NamedValueInArrayContext.prototype.arrayValue = function() {
    return this.getTypedRuleContext(ArrayValueContext,0);
};




languageParser.NamedValueInArrayContext = NamedValueInArrayContext;

languageParser.prototype.namedValueInArray = function(struct) {

    var localctx = new NamedValueInArrayContext(this, this._ctx, this.state, struct);
    this.enterRule(localctx, 216, languageParser.RULE_namedValueInArray);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3052;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 3051;
            localctx.at = this.match(languageParser.T__7);
        }

        this.state = 3054;
        this.annotationPath( localctx.name, 'name', localctx.at );
        this.state = 3057;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 3055;
            this.match(languageParser.T__4);
            this.state = 3056;
            localctx.elem = this.arrayValue();
        }

         this.addDef( localctx.struct, 'struct', null, localctx.name, true,
                           (localctx.elem) ? localctx.elem.val : { location: localctx.name.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_literalValue;
    this.val = null
    this.tok = null
    this.name = null; // IdentContext
    return this;
}

LiteralValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralValueContext.prototype.constructor = LiteralValueContext;

LiteralValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

LiteralValueContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

LiteralValueContext.prototype.Boolean = function() {
    return this.getToken(languageParser.Boolean, 0);
};

LiteralValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

LiteralValueContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

LiteralValueContext.prototype.QuotedLiteral = function() {
    return this.getToken(languageParser.QuotedLiteral, 0);
};




languageParser.LiteralValueContext = LiteralValueContext;

languageParser.prototype.literalValue = function() {

    var localctx = new LiteralValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, languageParser.RULE_literalValue);
     localctx.tok =  this.getCurrentToken() 
    try {
        this.state = 3075;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__27:
            this.enterOuterAlt(localctx, 1);
            this.state = 3061;
            this.match(languageParser.T__27);
            this.state = 3062;
            localctx.name = this.ident('enumref');
             localctx.val = { literal: 'enum', sym: localctx.name.id } 
            break;
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3065;
            this.match(languageParser.NULL);
             localctx.val =  { literal: 'null', val: null } 
            break;
        case languageParser.Boolean:
            this.enterOuterAlt(localctx, 3);
            this.state = 3067;
            this.match(languageParser.Boolean);
             localctx.val =  { literal: 'boolean', val: localctx.tok.text.toLowerCase() != 'false' } 
            break;
        case languageParser.Number:
            this.enterOuterAlt(localctx, 4);
            this.state = 3069;
            this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.tok, '' ) 
            break;
        case languageParser.String:
            this.enterOuterAlt(localctx, 5);
            this.state = 3071;
            this.match(languageParser.String);
             localctx.val =  this.quotedLiteral( localctx.tok, 'string' ) 
            break;
        case languageParser.QuotedLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 3073;
            this.match(languageParser.QuotedLiteral);
             localctx.val =  this.quotedLiteral( localctx.tok ) 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimplePathContext(parser, parent, invokingState, art, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_simplePath;
    this.art = null
    this.category = null
    this._sync = 'nop'
    this.head = null; // IdentContext
    this.tail = null; // IdentContext
    this.art = art || null;
    this.category = category || null;
    return this;
}

SimplePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplePathContext.prototype.constructor = SimplePathContext;

SimplePathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};




languageParser.SimplePathContext = SimplePathContext;

languageParser.prototype.simplePath = function(art, category) {

    var localctx = new SimplePathContext(this, this._ctx, this.state, art, category);
    this.enterRule(localctx, 220, languageParser.RULE_simplePath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3077;
        localctx.head = this.ident( localctx.category );
         if (!localctx.art.path) localctx.art.path = []; this.pushIdent( localctx.art.path, localctx.head.id );
              if (localctx.category === 'artref') localctx.art.scope = 0;
            
        this.state = 3085;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 3079;
            this.match(languageParser.T__15);
            this.state = 3080;
            localctx.tail = this.ident( localctx.category );
             this.pushIdent( localctx.art.path, localctx.tail.id ); 
            this.state = 3087;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationPathContext(parser, parent, invokingState, art, category, headat) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationPath;
    this.art = null
    this.category = null
    this.headat = null
    this._sync = 'nop'
    this.head = null; // IdentContext
    this.at = null; // Token
    this.tail = null; // IdentContext
    this.art = art || null;
    this.category = category || null;
    this.headat = headat || null;
    return this;
}

AnnotationPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationPathContext.prototype.constructor = AnnotationPathContext;

AnnotationPathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};




languageParser.AnnotationPathContext = AnnotationPathContext;

languageParser.prototype.annotationPath = function(art, category, headat) {

    var localctx = new AnnotationPathContext(this, this._ctx, this.state, art, category, headat);
    this.enterRule(localctx, 222, languageParser.RULE_annotationPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3088;
        localctx.head = this.ident( localctx.category );
         localctx.art.path = []; this.pushIdent( localctx.art.path, localctx.head.id, localctx.headat );
              if (localctx.category === 'artref') localctx.art.scope = 0;
            
        this.state = 3099;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__15) {
            this.state = 3090;
            this.match(languageParser.T__15);
            this.state = 3092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__7) {
                this.state = 3091;
                localctx.at = this.match(languageParser.T__7);
            }

            this.state = 3094;
            localctx.tail = this.ident( localctx.category );
             this.pushIdent( localctx.art.path, localctx.tail.id, localctx.at );
                    // Otherwise, localctx.at may continue to be set after one `.@anno` segment.
                    localctx.at = null;
                  
            this.state = 3101;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnnotationPathVariantContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationPathVariant;
    this.art = null
    this.variant = null; // IdentContext
    this.art = art || null;
    return this;
}

AnnotationPathVariantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationPathVariantContext.prototype.constructor = AnnotationPathVariantContext;

AnnotationPathVariantContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.AnnotationPathVariantContext = AnnotationPathVariantContext;

languageParser.prototype.annotationPathVariant = function(art) {

    var localctx = new AnnotationPathVariantContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 224, languageParser.RULE_annotationPathVariant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3102;
        this.match(languageParser.T__27);
         this.meltKeywordToIdentifier(); 
        this.state = 3104;
        localctx.variant = this.ident('variant');
         localctx.art.variant = localctx.variant.id; 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentNoKeywordContext(parser, parent, invokingState, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_identNoKeyword;
    this.category = null
    this.id = null
    this.category = category || null;
    return this;
}

IdentNoKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentNoKeywordContext.prototype.constructor = IdentNoKeywordContext;

IdentNoKeywordContext.prototype.Identifier = function() {
    return this.getToken(languageParser.Identifier, 0);
};




languageParser.IdentNoKeywordContext = IdentNoKeywordContext;

languageParser.prototype.identNoKeyword = function(category) {

    var localctx = new IdentNoKeywordContext(this, this._ctx, this.state, category);
    this.enterRule(localctx, 226, languageParser.RULE_identNoKeyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3107;
        this.match(languageParser.Identifier);
        this._ctx.stop = this._input.LT(-1);
         localctx.id =  this.identAst( localctx.stop, localctx.category ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentContext(parser, parent, invokingState, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_ident;
    this.category = null
    this.id = null
    this.category = category || null;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.Identifier = function() {
    return this.getToken(languageParser.Identifier, 0);
};

IdentContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};

IdentContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

IdentContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

IdentContext.prototype.AND = function() {
    return this.getToken(languageParser.AND, 0);
};

IdentContext.prototype.ANNOTATE = function() {
    return this.getToken(languageParser.ANNOTATE, 0);
};

IdentContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

IdentContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

IdentContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

IdentContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

IdentContext.prototype.ASSOCIATION = function() {
    return this.getToken(languageParser.ASSOCIATION, 0);
};

IdentContext.prototype.BETWEEN = function() {
    return this.getToken(languageParser.BETWEEN, 0);
};

IdentContext.prototype.BOTH = function() {
    return this.getToken(languageParser.BOTH, 0);
};

IdentContext.prototype.COMPOSITION = function() {
    return this.getToken(languageParser.COMPOSITION, 0);
};

IdentContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

IdentContext.prototype.CROSS = function() {
    return this.getToken(languageParser.CROSS, 0);
};

IdentContext.prototype.DAY = function() {
    return this.getToken(languageParser.DAY, 0);
};

IdentContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

IdentContext.prototype.DEFINE = function() {
    return this.getToken(languageParser.DEFINE, 0);
};

IdentContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};

IdentContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};

IdentContext.prototype.ELSE = function() {
    return this.getToken(languageParser.ELSE, 0);
};

IdentContext.prototype.END = function() {
    return this.getToken(languageParser.END, 0);
};

IdentContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

IdentContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

IdentContext.prototype.ESCAPE = function() {
    return this.getToken(languageParser.ESCAPE, 0);
};

IdentContext.prototype.EVENT = function() {
    return this.getToken(languageParser.EVENT, 0);
};

IdentContext.prototype.EXACT = function() {
    return this.getToken(languageParser.EXACT, 0);
};

IdentContext.prototype.EXCEPT = function() {
    return this.getToken(languageParser.EXCEPT, 0);
};

IdentContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

IdentContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

IdentContext.prototype.FIRST = function() {
    return this.getToken(languageParser.FIRST, 0);
};

IdentContext.prototype.FULL = function() {
    return this.getToken(languageParser.FULL, 0);
};

IdentContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};

IdentContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

IdentContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

IdentContext.prototype.HOUR = function() {
    return this.getToken(languageParser.HOUR, 0);
};

IdentContext.prototype.INNER = function() {
    return this.getToken(languageParser.INNER, 0);
};

IdentContext.prototype.INTERSECT = function() {
    return this.getToken(languageParser.INTERSECT, 0);
};

IdentContext.prototype.INTO = function() {
    return this.getToken(languageParser.INTO, 0);
};

IdentContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

IdentContext.prototype.JOIN = function() {
    return this.getToken(languageParser.JOIN, 0);
};

IdentContext.prototype.LAST = function() {
    return this.getToken(languageParser.LAST, 0);
};

IdentContext.prototype.LEADING = function() {
    return this.getToken(languageParser.LEADING, 0);
};

IdentContext.prototype.LEFT = function() {
    return this.getToken(languageParser.LEFT, 0);
};

IdentContext.prototype.LIKE = function() {
    return this.getToken(languageParser.LIKE, 0);
};

IdentContext.prototype.LIMIT = function() {
    return this.getToken(languageParser.LIMIT, 0);
};

IdentContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

IdentContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

IdentContext.prototype.MASKED = function() {
    return this.getToken(languageParser.MASKED, 0);
};

IdentContext.prototype.MINUS = function() {
    return this.getToken(languageParser.MINUS, 0);
};

IdentContext.prototype.MINUTE = function() {
    return this.getToken(languageParser.MINUTE, 0);
};

IdentContext.prototype.MIXIN = function() {
    return this.getToken(languageParser.MIXIN, 0);
};

IdentContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};

IdentContext.prototype.NAMESPACE = function() {
    return this.getToken(languageParser.NAMESPACE, 0);
};

IdentContext.prototype.NULLS = function() {
    return this.getToken(languageParser.NULLS, 0);
};

IdentContext.prototype.OFFSET = function() {
    return this.getToken(languageParser.OFFSET, 0);
};

IdentContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};

IdentContext.prototype.OR = function() {
    return this.getToken(languageParser.OR, 0);
};

IdentContext.prototype.ORDER = function() {
    return this.getToken(languageParser.ORDER, 0);
};

IdentContext.prototype.OUTER = function() {
    return this.getToken(languageParser.OUTER, 0);
};

IdentContext.prototype.PARAMETERS = function() {
    return this.getToken(languageParser.PARAMETERS, 0);
};

IdentContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

IdentContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

IdentContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

IdentContext.prototype.RIGHT = function() {
    return this.getToken(languageParser.RIGHT, 0);
};

IdentContext.prototype.SECOND = function() {
    return this.getToken(languageParser.SECOND, 0);
};

IdentContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

IdentContext.prototype.THEN = function() {
    return this.getToken(languageParser.THEN, 0);
};

IdentContext.prototype.TRAILING = function() {
    return this.getToken(languageParser.TRAILING, 0);
};

IdentContext.prototype.UNION = function() {
    return this.getToken(languageParser.UNION, 0);
};

IdentContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

IdentContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

IdentContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

IdentContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

IdentContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};




languageParser.IdentContext = IdentContext;

languageParser.prototype.ident = function(category) {

    var localctx = new IdentContext(this, this._ctx, this.state, category);
    this.enterRule(localctx, 228, languageParser.RULE_ident);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3109;
        _la = this._input.LA(1);
        if(!(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (languageParser.ABSTRACT - 62)) | (1 << (languageParser.ACTION - 62)) | (1 << (languageParser.ACTIONS - 62)) | (1 << (languageParser.AND - 62)) | (1 << (languageParser.ANNOTATE - 62)) | (1 << (languageParser.ANNOTATION - 62)) | (1 << (languageParser.ARRAY - 62)) | (1 << (languageParser.ASC - 62)) | (1 << (languageParser.ASPECT - 62)) | (1 << (languageParser.ASSOCIATION - 62)) | (1 << (languageParser.BETWEEN - 62)) | (1 << (languageParser.BOTH - 62)) | (1 << (languageParser.COMPOSITION - 62)) | (1 << (languageParser.CONTEXT - 62)) | (1 << (languageParser.CROSS - 62)) | (1 << (languageParser.DAY - 62)) | (1 << (languageParser.DEFAULT - 62)) | (1 << (languageParser.DEFINE - 62)) | (1 << (languageParser.DESC - 62)) | (1 << (languageParser.ELEMENT - 62)) | (1 << (languageParser.ELSE - 62)) | (1 << (languageParser.END - 62)) | (1 << (languageParser.ENTITY - 62)) | (1 << (languageParser.ENUM - 62)) | (1 << (languageParser.EVENT - 62)) | (1 << (languageParser.ESCAPE - 62)) | (1 << (languageParser.EXACT - 62)) | (1 << (languageParser.EXCEPT - 62)) | (1 << (languageParser.EXCLUDING - 62)) | (1 << (languageParser.EXTEND - 62)) | (1 << (languageParser.FIRST - 62)) | (1 << (languageParser.FULL - 62)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (languageParser.FUNCTION - 94)) | (1 << (languageParser.GROUP - 94)) | (1 << (languageParser.HAVING - 94)) | (1 << (languageParser.HOUR - 94)) | (1 << (languageParser.INNER - 94)) | (1 << (languageParser.INTERSECT - 94)) | (1 << (languageParser.INTO - 94)) | (1 << (languageParser.IS - 94)) | (1 << (languageParser.JOIN - 94)) | (1 << (languageParser.LAST - 94)) | (1 << (languageParser.LEADING - 94)) | (1 << (languageParser.LEFT - 94)) | (1 << (languageParser.LIKE - 94)) | (1 << (languageParser.LIMIT - 94)) | (1 << (languageParser.LOCALIZED - 94)) | (1 << (languageParser.MANY - 94)) | (1 << (languageParser.MASKED - 94)) | (1 << (languageParser.MINUS - 94)) | (1 << (languageParser.MINUTE - 94)) | (1 << (languageParser.MIXIN - 94)) | (1 << (languageParser.MONTH - 94)) | (1 << (languageParser.NAMESPACE - 94)) | (1 << (languageParser.NULLS - 94)) | (1 << (languageParser.OFFSET - 94)) | (1 << (languageParser.ONE - 94)) | (1 << (languageParser.OR - 94)) | (1 << (languageParser.ORDER - 94)) | (1 << (languageParser.OUTER - 94)) | (1 << (languageParser.PARAMETERS - 94)) | (1 << (languageParser.PROJECTION - 94)) | (1 << (languageParser.REDIRECTED - 94)) | (1 << (languageParser.RETURNS - 94)))) !== 0) || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.RIGHT - 126)) | (1 << (languageParser.SECOND - 126)) | (1 << (languageParser.SERVICE - 126)) | (1 << (languageParser.THEN - 126)) | (1 << (languageParser.TRAILING - 126)) | (1 << (languageParser.TO - 126)) | (1 << (languageParser.TYPE - 126)) | (1 << (languageParser.UNION - 126)) | (1 << (languageParser.USING - 126)) | (1 << (languageParser.VIEW - 126)) | (1 << (languageParser.YEAR - 126)) | (1 << (languageParser.Identifier - 126)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this._ctx.stop = this._input.LT(-1);
         localctx.id =  this.identAst( localctx.stop, localctx.category ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.languageParser = languageParser;
