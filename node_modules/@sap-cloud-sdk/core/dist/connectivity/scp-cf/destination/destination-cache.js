"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.destinationCache = exports.getDestinationCacheKey = void 0;
var cache_1 = require("../cache");
var tenant_1 = require("../tenant");
var user_1 = require("../user");
var DestinationCache = function (cache) { return ({
    retrieveDestinationFromCache: function (decodedJwt, name, isolation) {
        return cache.get(getDestinationCacheKey(decodedJwt, name, isolation));
    },
    cacheRetrievedDestination: function (decodedJwt, destination, isolation) {
        cacheRetrievedDestination(decodedJwt, destination, isolation, cache);
    },
    cacheRetrievedDestinations: function (decodedJwt, retrievedDestinations, isolation) {
        retrievedDestinations.subaccount.forEach(function (dest) {
            return cacheRetrievedDestination(decodedJwt, dest, isolation, cache);
        });
        retrievedDestinations.instance.forEach(function (dest) {
            return cacheRetrievedDestination(decodedJwt, dest, isolation, cache);
        });
    },
    clear: function () {
        cache.clear();
    },
    getCacheInstance: function () { return cache; }
}); };
/**
 * Calculates a cache key based on the jwt and destination name for the given isolation strategy.
 * Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy [[IsolationStrategy.Tenant]]
 * will not result in a cache hit for a destination that has been cached with strategy [[IsolationStrategy.Tenant_User]].
 * @param decodedJwt - The decoded JWT of the current request.
 * @param destinationName - The name of the destination.
 * @param isolationStrategy - The strategy used to isolate cache entries.
 * @returns The cache key.
 * @hidden
 */
function getDestinationCacheKey(decodedJwt, destinationName, isolationStrategy) {
    switch (isolationStrategy) {
        case cache_1.IsolationStrategy.No_Isolation:
            return "::" + destinationName;
        case cache_1.IsolationStrategy.Tenant_User:
            return tenant_1.tenantId(decodedJwt) + ":" + user_1.userId(decodedJwt) + ":" + destinationName;
        case cache_1.IsolationStrategy.User:
            return ":" + user_1.userId(decodedJwt) + ":" + destinationName;
        default:
            return tenant_1.tenantId(decodedJwt) + "::" + destinationName;
    }
}
exports.getDestinationCacheKey = getDestinationCacheKey;
function cacheRetrievedDestination(decodedJwt, destination, isolation, cache) {
    if (!destination.name) {
        throw new Error('The destination name is undefined.');
    }
    var key = getDestinationCacheKey(decodedJwt, destination.name, isolation);
    cache.set(key, destination);
}
exports.destinationCache = DestinationCache(new cache_1.Cache({ hours: 0, minutes: 5, seconds: 0 }));
//# sourceMappingURL=destination-cache.js.map