"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDestinationFromDestinationService = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var jwt_1 = require("../jwt");
var proxy_util_1 = require("../../../http-agent/proxy-util");
var cache_1 = require("../cache");
var token_accessor_1 = require("../token-accessor");
var connectivity_service_1 = require("../connectivity-service");
var environment_accessor_1 = require("../environment-accessor");
var tenant_1 = require("../tenant");
var destination_selection_strategies_1 = require("./destination-selection-strategies");
var destination_service_1 = require("./destination-service");
var destination_cache_1 = require("./destination-cache");
var logger = util_1.createLogger({
    package: 'core',
    messageContext: 'destination-accessor-service'
});
var emptyDestinationByType = {
    instance: [],
    subaccount: []
};
/**
 * Retrieves a destination with the given name from the Cloud Foundry destination service.
 * Returns `null`, if no destination can be found.
 * Requires the following service bindings: destination, XSUAA
 * By default, selects subscriber over provider and instance over subaccount destinations.
 *
 * If the destinations are read from the environment, the jwt will be ignored.
 * @param name - The name of the destination to be retrieved.
 * @param options - Configuration for how to retrieve destinations from the destination service.
 * @returns A promise returning the requested destination on success.
 */
function getDestinationFromDestinationService(name, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            logger.info('Attempting to retrieve destination from destination service.');
            return [2 /*return*/, DestinationFromServiceRetriever.getDestinationFromDestinationService(name, options)];
        });
    });
}
exports.getDestinationFromDestinationService = getDestinationFromDestinationService;
var DestinationFromServiceRetriever = /** @class */ (function () {
    function DestinationFromServiceRetriever(name, options, subscriberToken, providerClientCredentialsToken) {
        this.name = name;
        this.subscriberToken = subscriberToken;
        this.providerClientCredentialsToken = providerClientCredentialsToken;
        var defaultOptions = __assign({ isolationStrategy: cache_1.IsolationStrategy.Tenant, selectionStrategy: destination_selection_strategies_1.subscriberFirst, useCache: false }, options);
        this.options = __assign(__assign({}, defaultOptions), options);
    }
    DestinationFromServiceRetriever.getDestinationFromDestinationService = function (name, options) {
        return __awaiter(this, void 0, void 0, function () {
            var subscriberToken, providerToken, da, destinationResult, destination, _a, withProxySetting;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, DestinationFromServiceRetriever.getSubscriberToken(options)];
                    case 1:
                        subscriberToken = _b.sent();
                        return [4 /*yield*/, DestinationFromServiceRetriever.getProviderClientCredentialsToken(options)];
                    case 2:
                        providerToken = _b.sent();
                        da = new DestinationFromServiceRetriever(name, options, subscriberToken, providerToken);
                        return [4 /*yield*/, da.searchDestinationWithSelectionStrategyAndCache()];
                    case 3:
                        destinationResult = _b.sent();
                        if (!destinationResult) {
                            return [2 /*return*/, null];
                        }
                        if (destinationResult.fromCache) {
                            return [2 /*return*/, destinationResult.destination];
                        }
                        destination = destinationResult.destination;
                        if (!(destination.authentication === 'OAuth2SAMLBearerAssertion')) return [3 /*break*/, 7];
                        return [4 /*yield*/, da.fetchDestinationBySystemUser(destinationResult)];
                    case 4:
                        _a = (_b.sent());
                        if (_a) return [3 /*break*/, 6];
                        return [4 /*yield*/, da.fetchDestinationByUserJwt()];
                    case 5:
                        _a = (_b.sent());
                        _b.label = 6;
                    case 6:
                        /*
                      This covers the two technical user propagation cases https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/3cb7b81115c44cf594e0e3631291af94.html (fetchDestinationBySystemUser)
                      If no system user is set the subscriber or provider destination is fetched depending on the content of the JWT (fetchDestinationByUserJwt)
                      */
                        destination = _a;
                        _b.label = 7;
                    case 7:
                        if (!(destination.authentication === 'OAuth2UserTokenExchange')) return [3 /*break*/, 9];
                        return [4 /*yield*/, da.fetchDestinationByUserTokenExchange(destinationResult.origin)];
                    case 8:
                        destination = _b.sent();
                        _b.label = 9;
                    case 9:
                        if (!(destination.authentication === 'OAuth2ClientCredentials' ||
                            destination.authentication === 'OAuth2Password')) return [3 /*break*/, 11];
                        return [4 /*yield*/, da.fetchDestinationByClientCrendentialsGrant()];
                    case 10:
                        destination = _b.sent();
                        _b.label = 11;
                    case 11:
                        if (!(destination.authentication === 'OAuth2JWTBearer')) return [3 /*break*/, 13];
                        return [4 /*yield*/, da.fetchDestinationByUserJwt()];
                    case 12:
                        destination = _b.sent();
                        _b.label = 13;
                    case 13:
                        if (!(destination.authentication === 'ClientCertificateAuthentication')) return [3 /*break*/, 15];
                        return [4 /*yield*/, da.addClientCertAuth(destinationResult.origin)];
                    case 14:
                        destination = _b.sent();
                        _b.label = 15;
                    case 15: return [4 /*yield*/, da.addProxyConfiguration(destination)];
                    case 16:
                        withProxySetting = _b.sent();
                        da.updateDestinationCache(withProxySetting, destinationResult.origin);
                        return [2 /*return*/, withProxySetting];
                }
            });
        });
    };
    DestinationFromServiceRetriever.getSubscriberToken = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var payload;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.userJwt) return [3 /*break*/, 2];
                        if (options.iss) {
                            logger.warn('You have provided the `userJwt` and `iss` options to fetch the destination. This is most likely unintentional. Ignoring `iss`.');
                        }
                        _a = {};
                        return [4 /*yield*/, jwt_1.verifyJwt(options.userJwt, options)];
                    case 1: return [2 /*return*/, (_a.decoded = _b.sent(),
                            _a.encoded = options.userJwt,
                            _a)];
                    case 2:
                        if (options.iss) {
                            logger.info('Using `iss` option to fetch a destination instead of a full JWT. No validation is performed.');
                            payload = { iss: options.iss };
                            return [2 /*return*/, {
                                    decoded: payload,
                                    encoded: util_1.encodeBase64(JSON.stringify(payload))
                                }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DestinationFromServiceRetriever.getProviderClientCredentialsToken = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var userJwt, optionsWithoutJwt, encoded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userJwt = options.userJwt, optionsWithoutJwt = __rest(options, ["userJwt"]);
                        return [4 /*yield*/, token_accessor_1.serviceToken('destination', optionsWithoutJwt)];
                    case 1:
                        encoded = _a.sent();
                        return [2 /*return*/, { encoded: encoded, decoded: jwt_1.decodeJwt(encoded) }];
                }
            });
        });
    };
    DestinationFromServiceRetriever.getSubscriberClientCredentialsToken = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!options.userJwt) {
                    throw new Error('User JWT is needed to obtain a client credentials token for the subscriber account.');
                }
                return [2 /*return*/, token_accessor_1.serviceToken('destination', options)];
            });
        });
    };
    DestinationFromServiceRetriever.prototype.searchDestinationWithSelectionStrategyAndCache = function () {
        return __awaiter(this, void 0, void 0, function () {
            var destinationSearchResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isSubscriberNeeded()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.searchSubscriberAccountForDestination()];
                    case 1:
                        destinationSearchResult =
                            _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!this.isProviderNeeded(destinationSearchResult)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.searchProviderAccountForDestination()];
                    case 3:
                        destinationSearchResult =
                            _a.sent();
                        _a.label = 4;
                    case 4:
                        if (destinationSearchResult && !destinationSearchResult.fromCache) {
                            logger.debug('Successfully retrieved destination from destination service.');
                        }
                        if (destinationSearchResult && destinationSearchResult.fromCache) {
                            logger.debug("Successfully retrieved destination from destination service cache for " + destinationSearchResult.origin + " destinations.");
                        }
                        if (!destinationSearchResult) {
                            logger.info('Could not retrieve destination from destination service.');
                        }
                        return [2 /*return*/, destinationSearchResult];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.getInstanceAndSubaccountDestinations = function (accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, instance, subaccount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            destination_service_1.fetchInstanceDestinations(this.destinationServiceCredentials.uri, accessToken, this.options),
                            destination_service_1.fetchSubaccountDestinations(this.destinationServiceCredentials.uri, accessToken, this.options)
                        ])];
                    case 1:
                        _a = _b.sent(), instance = _a[0], subaccount = _a[1];
                        return [2 /*return*/, {
                                instance: instance,
                                subaccount: subaccount
                            }];
                }
            });
        });
    };
    Object.defineProperty(DestinationFromServiceRetriever.prototype, "destinationServiceCredentials", {
        get: function () {
            var credentials = environment_accessor_1.getDestinationServiceCredentialsList();
            if (!credentials || credentials.length === 0) {
                throw Error('No binding to a destination service instance found. Please bind a destination service instance to your application.');
            }
            if (credentials.length > 1) {
                logger.info('Found more than one destination service instance. Using the first one.');
            }
            return credentials[0];
        },
        enumerable: false,
        configurable: true
    });
    DestinationFromServiceRetriever.prototype.fetchDestinationByToken = function (jwt) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, destination_service_1.fetchDestination(this.destinationServiceCredentials.uri, jwt, this.name, this.options)];
            });
        });
    };
    DestinationFromServiceRetriever.prototype.getAuthTokenForOAuth2UserTokenExchange = function (destinationOrigin) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!jwt_1.isUserToken(this.subscriberToken)) {
                            throw Error('No user token (JWT) has been provided. This is strictly necessary for `OAuth2UserTokenExchange`.');
                        }
                        if (!this.isProviderAndSubscriberSameTenant()) return [3 /*break*/, 2];
                        logger.debug("OAuth2UserTokenExchange flow started without user exchange token for destination " + this.name + " of the provider account.");
                        _a = {};
                        return [4 /*yield*/, token_accessor_1.jwtBearerToken(this.subscriberToken.encoded, environment_accessor_1.getDestinationService(), this.options)];
                    case 1: return [2 /*return*/, (_a.authHeaderJwt = _c.sent(),
                            _a)];
                    case 2:
                        // Case 2 Destination in provider and jwt issued for subscriber account
                        if (destinationOrigin === 'provider') {
                            logger.debug("OAuth2UserTokenExchange flow started for destination " + this.name + " of the provider account.");
                            return [2 /*return*/, {
                                    authHeaderJwt: this.providerClientCredentialsToken.encoded,
                                    exchangeHeaderJwt: this.subscriberToken.encoded
                                }];
                        }
                        if (!(destinationOrigin === 'subscriber')) return [3 /*break*/, 4];
                        logger.debug("OAuth2UserTokenExchange flow started for destination " + this.name + " of the subscriber account.");
                        _b = {};
                        return [4 /*yield*/, DestinationFromServiceRetriever.getSubscriberClientCredentialsToken(this.options)];
                    case 3: return [2 /*return*/, (_b.authHeaderJwt = _c.sent(),
                            _b.exchangeHeaderJwt = this.subscriberToken.encoded,
                            _b)];
                    case 4: throw new Error('Not possible to build tokens for OAuth2UserTokenExchange flow.');
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.fetchDestinationByUserTokenExchange = function (destinationOrigin) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAuthTokenForOAuth2UserTokenExchange(destinationOrigin)];
                    case 1:
                        token = _a.sent();
                        return [2 /*return*/, this.fetchDestinationByToken(token)];
                }
            });
        });
    };
    /**
     * @hidden
     * This method calls the 'find destination by name' endpoint of the destination service using a client credentials grant.
     * For the find by name endpoint, the destination service will take care of OAuth flows and include the token in the destination.
     */
    DestinationFromServiceRetriever.prototype.fetchDestinationByClientCrendentialsGrant = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var clientGrant;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, token_accessor_1.serviceToken('destination', {
                            userJwt: ((_a = this === null || this === void 0 ? void 0 : this.subscriberToken) === null || _a === void 0 ? void 0 : _a.decoded) ||
                                this.providerClientCredentialsToken.decoded
                        })];
                    case 1:
                        clientGrant = _b.sent();
                        return [2 /*return*/, this.fetchDestinationByToken(clientGrant)];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.fetchDestinationBySystemUser = function (destinationResult) {
        return __awaiter(this, void 0, void 0, function () {
            var token, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!destinationResult.destination.systemUser) return [3 /*break*/, 4];
                        if (!(destinationResult.origin === 'provider')) return [3 /*break*/, 1];
                        _a = this.providerClientCredentialsToken.encoded;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, DestinationFromServiceRetriever.getSubscriberClientCredentialsToken(this.options)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        token = _a;
                        logger.debug("System user found on destination: \"" + destinationResult.destination.name + "\".");
                        if (destinationResult.origin) {
                            return [2 /*return*/, this.fetchDestinationByToken(token)];
                        }
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.fetchDestinationByUserJwt = function () {
        return __awaiter(this, void 0, void 0, function () {
            var destinationService, accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        destinationService = environment_accessor_1.getDestinationService();
                        /* This covers the two business user propagation cases https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/3cb7b81115c44cf594e0e3631291af94.html
                         The two cases are JWT issued from provider or JWT from subscriber - the two cases are handled automatically.
                         In the provider case the subdomain replacement in the xsuaa.url with the iss value does nothing but this does not hurt. */
                        if (!jwt_1.isUserToken(this.subscriberToken)) {
                            throw Error('No user token (JWT) has been provided. This is strictly necessary for principal propagation.');
                        }
                        return [4 /*yield*/, token_accessor_1.jwtBearerToken(this.subscriberToken.encoded, destinationService, this.options)];
                    case 1:
                        accessToken = _a.sent();
                        return [2 /*return*/, this.fetchDestinationByToken(accessToken)];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.addClientCertAuth = function (origin) {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, token_accessor_1.serviceToken('destination', __assign(__assign({}, this.options), { userJwt: origin === 'subscriber'
                                ? this.subscriberToken.decoded
                                : this.providerClientCredentialsToken.decoded }))];
                    case 1:
                        accessToken = _a.sent();
                        return [2 /*return*/, destination_service_1.fetchDestination(this.destinationServiceCredentials.uri, accessToken, this.name, this.options)];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.addProxyConfiguration = function (destination) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (proxy_util_1.proxyStrategy(destination)) {
                    case proxy_util_1.ProxyStrategy.ON_PREMISE_PROXY:
                        if (!jwt_1.isUserToken(this.subscriberToken)) {
                            throw new Error('For principal propagation a user JWT is needed.');
                        }
                        return [2 /*return*/, connectivity_service_1.addProxyConfigurationOnPrem(destination, this.subscriberToken.encoded)];
                    case proxy_util_1.ProxyStrategy.INTERNET_PROXY:
                        return [2 /*return*/, proxy_util_1.addProxyConfigurationInternet(destination)];
                    case proxy_util_1.ProxyStrategy.NO_PROXY:
                        return [2 /*return*/, destination];
                    default:
                        throw new Error('Illegal argument: No valid proxy configuration found in the destination input to be aded.');
                }
                return [2 /*return*/];
            });
        });
    };
    DestinationFromServiceRetriever.prototype.updateDestinationCache = function (destination, destinationOrigin) {
        if (!this.options.useCache) {
            return destination;
        }
        destination_cache_1.destinationCache.cacheRetrievedDestination(destinationOrigin === 'subscriber'
            ? this.subscriberToken.decoded
            : this.providerClientCredentialsToken.decoded, destination, this.options.isolationStrategy);
    };
    DestinationFromServiceRetriever.prototype.getProviderDestinationService = function () {
        return __awaiter(this, void 0, void 0, function () {
            var provider, destination;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInstanceAndSubaccountDestinations(this.providerClientCredentialsToken.encoded)];
                    case 1:
                        provider = _a.sent();
                        destination = this.options.selectionStrategy({
                            subscriber: emptyDestinationByType,
                            provider: provider
                        }, this.name);
                        if (destination) {
                            return [2 /*return*/, {
                                    destination: destination,
                                    fromCache: false,
                                    origin: 'provider'
                                }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.getProviderDestinationCache = function () {
        var destination = destination_cache_1.destinationCache.retrieveDestinationFromCache(this.providerClientCredentialsToken.decoded, this.name, this.options.isolationStrategy);
        if (destination) {
            return { destination: destination, fromCache: true, origin: 'subscriber' };
        }
    };
    DestinationFromServiceRetriever.prototype.getSubscriberDestinationService = function () {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken, subscriber, destination;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.subscriberToken) {
                            throw new Error('Try to get destinations from subscriber account but user JWT was not set.');
                        }
                        return [4 /*yield*/, token_accessor_1.serviceToken('destination', __assign(__assign({}, this.options), { userJwt: this.subscriberToken.decoded }))];
                    case 1:
                        accessToken = _a.sent();
                        return [4 /*yield*/, this.getInstanceAndSubaccountDestinations(accessToken)];
                    case 2:
                        subscriber = _a.sent();
                        destination = this.options.selectionStrategy({
                            subscriber: subscriber,
                            provider: emptyDestinationByType
                        }, this.name);
                        if (destination) {
                            return [2 /*return*/, { destination: destination, fromCache: false, origin: 'subscriber' }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DestinationFromServiceRetriever.prototype.getSubscriberDestinationCache = function () {
        var destination = destination_cache_1.destinationCache.retrieveDestinationFromCache(this.subscriberToken.decoded, this.name, this.options.isolationStrategy);
        if (destination) {
            return { destination: destination, fromCache: true, origin: 'subscriber' };
        }
    };
    DestinationFromServiceRetriever.prototype.isProviderAndSubscriberSameTenant = function () {
        return (this.subscriberToken &&
            tenant_1.isIdenticalTenant(this.subscriberToken.decoded, this.providerClientCredentialsToken.decoded));
    };
    DestinationFromServiceRetriever.prototype.isProviderNeeded = function (resultFromSubscriber) {
        if (this.options.selectionStrategy === destination_selection_strategies_1.alwaysSubscriber) {
            return false;
        }
        if (this.options.selectionStrategy === destination_selection_strategies_1.subscriberFirst &&
            resultFromSubscriber) {
            return false;
        }
        return true;
    };
    DestinationFromServiceRetriever.prototype.isSubscriberNeeded = function () {
        if (!this.subscriberToken) {
            return false;
        }
        if (this.options.selectionStrategy === destination_selection_strategies_1.alwaysProvider) {
            return false;
        }
        if (this.isProviderAndSubscriberSameTenant()) {
            return false;
        }
        return true;
    };
    DestinationFromServiceRetriever.prototype.searchProviderAccountForDestination = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, ((this.options.useCache && this.getProviderDestinationCache()) ||
                        this.getProviderDestinationService())];
            });
        });
    };
    DestinationFromServiceRetriever.prototype.searchSubscriberAccountForDestination = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, ((this.options.useCache && this.getSubscriberDestinationCache()) ||
                        this.getSubscriberDestinationService())];
            });
        });
    };
    return DestinationFromServiceRetriever;
}());
//# sourceMappingURL=destination-from-service.js.map